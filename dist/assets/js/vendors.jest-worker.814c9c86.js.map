{"version":3,"file":"assets/js/vendors.jest-worker.814c9c86.js","sources":["webpack://react-boilerplate/./node_modules/jest-worker/build/Farm.js","webpack://react-boilerplate/./node_modules/jest-worker/build/FifoQueue.js","webpack://react-boilerplate/./node_modules/jest-worker/build/PriorityQueue.js","webpack://react-boilerplate/./node_modules/jest-worker/build/WorkerPool.js","webpack://react-boilerplate/./node_modules/jest-worker/build/base/BaseWorkerPool.js","webpack://react-boilerplate/./node_modules/jest-worker/build/index.js","webpack://react-boilerplate/./node_modules/jest-worker/build/types.js","webpack://react-boilerplate/./node_modules/jest-worker/build/workers/ChildProcessWorker.js","webpack://react-boilerplate/./node_modules/jest-worker/build/workers/NodeThreadsWorker.js","webpack://react-boilerplate/./node_modules/jest-worker/build/workers/messageParent.js","webpack://react-boilerplate/./node_modules/jest-worker/build/workers/processChild.js","webpack://react-boilerplate/./node_modules/jest-worker/node_modules/supports-color/browser.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _FifoQueue = _interopRequireDefault(require('./FifoQueue'));\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass Farm {\n  constructor(_numOfWorkers, _callback, options = {}) {\n    var _options$workerSchedu, _options$taskQueue;\n\n    this._numOfWorkers = _numOfWorkers;\n    this._callback = _callback;\n\n    _defineProperty(this, '_computeWorkerKey', void 0);\n\n    _defineProperty(this, '_workerSchedulingPolicy', void 0);\n\n    _defineProperty(this, '_cacheKeys', Object.create(null));\n\n    _defineProperty(this, '_locks', []);\n\n    _defineProperty(this, '_offset', 0);\n\n    _defineProperty(this, '_taskQueue', void 0);\n\n    this._computeWorkerKey = options.computeWorkerKey;\n    this._workerSchedulingPolicy =\n      (_options$workerSchedu = options.workerSchedulingPolicy) !== null &&\n      _options$workerSchedu !== void 0\n        ? _options$workerSchedu\n        : 'round-robin';\n    this._taskQueue =\n      (_options$taskQueue = options.taskQueue) !== null &&\n      _options$taskQueue !== void 0\n        ? _options$taskQueue\n        : new _FifoQueue.default();\n  }\n\n  doWork(method, ...args) {\n    const customMessageListeners = new Set();\n\n    const addCustomMessageListener = listener => {\n      customMessageListeners.add(listener);\n      return () => {\n        customMessageListeners.delete(listener);\n      };\n    };\n\n    const onCustomMessage = message => {\n      customMessageListeners.forEach(listener => listener(message));\n    };\n\n    const promise = new Promise( // Bind args to this function so it won't reference to the parent scope.\n      // This prevents a memory leak in v8, because otherwise the function will\n      // retaine args for the closure.\n      ((args, resolve, reject) => {\n        const computeWorkerKey = this._computeWorkerKey;\n        const request = [_types.CHILD_MESSAGE_CALL, false, method, args];\n        let worker = null;\n        let hash = null;\n\n        if (computeWorkerKey) {\n          hash = computeWorkerKey.call(this, method, ...args);\n          worker = hash == null ? null : this._cacheKeys[hash];\n        }\n\n        const onStart = worker => {\n          if (hash != null) {\n            this._cacheKeys[hash] = worker;\n          }\n        };\n\n        const onEnd = (error, result) => {\n          customMessageListeners.clear();\n\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        };\n\n        const task = {\n          onCustomMessage,\n          onEnd,\n          onStart,\n          request\n        };\n\n        if (worker) {\n          this._taskQueue.enqueue(task, worker.getWorkerId());\n\n          this._process(worker.getWorkerId());\n        } else {\n          this._push(task);\n        }\n      }).bind(null, args)\n    );\n    promise.UNSTABLE_onCustomMessage = addCustomMessageListener;\n    return promise;\n  }\n\n  _process(workerId) {\n    if (this._isLocked(workerId)) {\n      return this;\n    }\n\n    const task = this._taskQueue.dequeue(workerId);\n\n    if (!task) {\n      return this;\n    }\n\n    if (task.request[1]) {\n      throw new Error('Queue implementation returned processed task');\n    } // Reference the task object outside so it won't be retained by onEnd,\n    // and other properties of the task object, such as task.request can be\n    // garbage collected.\n\n    const taskOnEnd = task.onEnd;\n\n    const onEnd = (error, result) => {\n      taskOnEnd(error, result);\n\n      this._unlock(workerId);\n\n      this._process(workerId);\n    };\n\n    task.request[1] = true;\n\n    this._lock(workerId);\n\n    this._callback(\n      workerId,\n      task.request,\n      task.onStart,\n      onEnd,\n      task.onCustomMessage\n    );\n\n    return this;\n  }\n\n  _push(task) {\n    this._taskQueue.enqueue(task);\n\n    const offset = this._getNextWorkerOffset();\n\n    for (let i = 0; i < this._numOfWorkers; i++) {\n      this._process((offset + i) % this._numOfWorkers);\n\n      if (task.request[1]) {\n        break;\n      }\n    }\n\n    return this;\n  } // Typescript ensures that the switch statement is exhaustive.\n  // Adding an explicit return at the end would disable the exhaustive check void.\n  // eslint-disable-next-line consistent-return\n\n  _getNextWorkerOffset() {\n    switch (this._workerSchedulingPolicy) {\n      case 'in-order':\n        return 0;\n\n      case 'round-robin':\n        return this._offset++;\n    }\n  }\n\n  _lock(workerId) {\n    this._locks[workerId] = true;\n  }\n\n  _unlock(workerId) {\n    this._locks[workerId] = false;\n  }\n\n  _isLocked(workerId) {\n    return this._locks[workerId];\n  }\n}\n\nexports.default = Farm;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * First-in, First-out task queue that manages a dedicated pool\n * for each worker as well as a shared queue. The FIFO ordering is guaranteed\n * across the worker specific and shared queue.\n */\nclass FifoQueue {\n  constructor() {\n    _defineProperty(this, '_workerQueues', []);\n\n    _defineProperty(this, '_sharedQueue', new InternalQueue());\n  }\n\n  enqueue(task, workerId) {\n    if (workerId == null) {\n      this._sharedQueue.enqueue(task);\n\n      return;\n    }\n\n    let workerQueue = this._workerQueues[workerId];\n\n    if (workerQueue == null) {\n      workerQueue = this._workerQueues[workerId] = new InternalQueue();\n    }\n\n    const sharedTop = this._sharedQueue.peekLast();\n\n    const item = {\n      previousSharedTask: sharedTop,\n      task\n    };\n    workerQueue.enqueue(item);\n  }\n\n  dequeue(workerId) {\n    var _this$_workerQueues$w, _workerTop$previousSh, _workerTop$previousSh2;\n\n    const workerTop =\n      (_this$_workerQueues$w = this._workerQueues[workerId]) === null ||\n      _this$_workerQueues$w === void 0\n        ? void 0\n        : _this$_workerQueues$w.peek();\n    const sharedTaskIsProcessed =\n      (_workerTop$previousSh =\n        workerTop === null || workerTop === void 0\n          ? void 0\n          : (_workerTop$previousSh2 = workerTop.previousSharedTask) === null ||\n            _workerTop$previousSh2 === void 0\n          ? void 0\n          : _workerTop$previousSh2.request[1]) !== null &&\n      _workerTop$previousSh !== void 0\n        ? _workerTop$previousSh\n        : true; // Process the top task from the shared queue if\n    // - there's no task in the worker specific queue or\n    // - if the non-worker-specific task after which this worker specifif task\n    //   hasn been queued wasn't processed yet\n\n    if (workerTop != null && sharedTaskIsProcessed) {\n      var _this$_workerQueues$w2,\n        _this$_workerQueues$w3,\n        _this$_workerQueues$w4;\n\n      return (_this$_workerQueues$w2 =\n        (_this$_workerQueues$w3 = this._workerQueues[workerId]) === null ||\n        _this$_workerQueues$w3 === void 0\n          ? void 0\n          : (_this$_workerQueues$w4 = _this$_workerQueues$w3.dequeue()) ===\n              null || _this$_workerQueues$w4 === void 0\n          ? void 0\n          : _this$_workerQueues$w4.task) !== null &&\n        _this$_workerQueues$w2 !== void 0\n        ? _this$_workerQueues$w2\n        : null;\n    }\n\n    return this._sharedQueue.dequeue();\n  }\n}\n\nexports.default = FifoQueue;\n\n/**\n * FIFO queue for a single worker / shared queue.\n */\nclass InternalQueue {\n  constructor() {\n    _defineProperty(this, '_head', null);\n\n    _defineProperty(this, '_last', null);\n  }\n\n  enqueue(value) {\n    const item = {\n      next: null,\n      value\n    };\n\n    if (this._last == null) {\n      this._head = item;\n    } else {\n      this._last.next = item;\n    }\n\n    this._last = item;\n  }\n\n  dequeue() {\n    if (this._head == null) {\n      return null;\n    }\n\n    const item = this._head;\n    this._head = item.next;\n\n    if (this._head == null) {\n      this._last = null;\n    }\n\n    return item.value;\n  }\n\n  peek() {\n    var _this$_head$value, _this$_head;\n\n    return (_this$_head$value =\n      (_this$_head = this._head) === null || _this$_head === void 0\n        ? void 0\n        : _this$_head.value) !== null && _this$_head$value !== void 0\n      ? _this$_head$value\n      : null;\n  }\n\n  peekLast() {\n    var _this$_last$value, _this$_last;\n\n    return (_this$_last$value =\n      (_this$_last = this._last) === null || _this$_last === void 0\n        ? void 0\n        : _this$_last.value) !== null && _this$_last$value !== void 0\n      ? _this$_last$value\n      : null;\n  }\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Priority queue that processes tasks in natural ordering (lower priority first)\n * accoridng to the priority computed by the function passed in the constructor.\n *\n * FIFO ordering isn't guaranteed for tasks with the same priority.\n *\n * Worker specific tasks with the same priority as a non-worker specific task\n * are always processed first.\n */\nclass PriorityQueue {\n  constructor(_computePriority) {\n    this._computePriority = _computePriority;\n\n    _defineProperty(this, '_queue', []);\n\n    _defineProperty(this, '_sharedQueue', new MinHeap());\n  }\n\n  enqueue(task, workerId) {\n    if (workerId == null) {\n      this._enqueue(task, this._sharedQueue);\n    } else {\n      const queue = this._getWorkerQueue(workerId);\n\n      this._enqueue(task, queue);\n    }\n  }\n\n  _enqueue(task, queue) {\n    const item = {\n      priority: this._computePriority(task.request[2], ...task.request[3]),\n      task\n    };\n    queue.add(item);\n  }\n\n  dequeue(workerId) {\n    const workerQueue = this._getWorkerQueue(workerId);\n\n    const workerTop = workerQueue.peek();\n\n    const sharedTop = this._sharedQueue.peek(); // use the task from the worker queue if there's no task in the shared queue\n    // or if the priority of the worker queue is smaller or equal to the\n    // priority of the top task in the shared queue. The tasks of the\n    // worker specific queue are preferred because no other worker can pick this\n    // specific task up.\n\n    if (\n      sharedTop == null ||\n      (workerTop != null && workerTop.priority <= sharedTop.priority)\n    ) {\n      var _workerQueue$poll$tas, _workerQueue$poll;\n\n      return (_workerQueue$poll$tas =\n        (_workerQueue$poll = workerQueue.poll()) === null ||\n        _workerQueue$poll === void 0\n          ? void 0\n          : _workerQueue$poll.task) !== null && _workerQueue$poll$tas !== void 0\n        ? _workerQueue$poll$tas\n        : null;\n    }\n\n    return this._sharedQueue.poll().task;\n  }\n\n  _getWorkerQueue(workerId) {\n    let queue = this._queue[workerId];\n\n    if (queue == null) {\n      queue = this._queue[workerId] = new MinHeap();\n    }\n\n    return queue;\n  }\n}\n\nexports.default = PriorityQueue;\n\nclass MinHeap {\n  constructor() {\n    _defineProperty(this, '_heap', []);\n  }\n\n  peek() {\n    var _this$_heap$;\n\n    return (_this$_heap$ = this._heap[0]) !== null && _this$_heap$ !== void 0\n      ? _this$_heap$\n      : null;\n  }\n\n  add(item) {\n    const nodes = this._heap;\n    nodes.push(item);\n\n    if (nodes.length === 1) {\n      return;\n    }\n\n    let currentIndex = nodes.length - 1; // Bubble up the added node as long as the parent is bigger\n\n    while (currentIndex > 0) {\n      const parentIndex = Math.floor((currentIndex + 1) / 2) - 1;\n      const parent = nodes[parentIndex];\n\n      if (parent.priority <= item.priority) {\n        break;\n      }\n\n      nodes[currentIndex] = parent;\n      nodes[parentIndex] = item;\n      currentIndex = parentIndex;\n    }\n  }\n\n  poll() {\n    const nodes = this._heap;\n    const result = nodes[0];\n    const lastElement = nodes.pop(); // heap was empty or removed the last element\n\n    if (result == null || nodes.length === 0) {\n      return result !== null && result !== void 0 ? result : null;\n    }\n\n    let index = 0;\n    nodes[0] =\n      lastElement !== null && lastElement !== void 0 ? lastElement : null;\n    const element = nodes[0];\n\n    while (true) {\n      let swapIndex = null;\n      const rightChildIndex = (index + 1) * 2;\n      const leftChildIndex = rightChildIndex - 1;\n      const rightChild = nodes[rightChildIndex];\n      const leftChild = nodes[leftChildIndex]; // if the left child is smaller, swap with the left\n\n      if (leftChild != null && leftChild.priority < element.priority) {\n        swapIndex = leftChildIndex;\n      } // If the right child is smaller or the right child is smaller than the left\n      // then swap with the right child\n\n      if (\n        rightChild != null &&\n        rightChild.priority < (swapIndex == null ? element : leftChild).priority\n      ) {\n        swapIndex = rightChildIndex;\n      }\n\n      if (swapIndex == null) {\n        break;\n      }\n\n      nodes[index] = nodes[swapIndex];\n      nodes[swapIndex] = element;\n      index = swapIndex;\n    }\n\n    return result;\n  }\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _BaseWorkerPool = _interopRequireDefault(require('./base/BaseWorkerPool'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst canUseWorkerThreads = () => {\n  try {\n    require('worker_threads');\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nclass WorkerPool extends _BaseWorkerPool.default {\n  send(workerId, request, onStart, onEnd, onCustomMessage) {\n    this.getWorkerById(workerId).send(request, onStart, onEnd, onCustomMessage);\n  }\n\n  createWorker(workerOptions) {\n    let Worker;\n\n    if (this._options.enableWorkerThreads && canUseWorkerThreads()) {\n      Worker = require('./workers/NodeThreadsWorker').default;\n    } else {\n      Worker = require('./workers/ChildProcessWorker').default;\n    }\n\n    return new Worker(workerOptions);\n  }\n}\n\nvar _default = WorkerPool;\nexports.default = _default;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = require('../types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// How long to wait for the child process to terminate\n// after CHILD_MESSAGE_END before sending force exiting.\nconst FORCE_EXIT_DELAY = 500;\n/* istanbul ignore next */\n\nconst emptyMethod = () => {};\n\nclass BaseWorkerPool {\n  constructor(workerPath, options) {\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workers', void 0);\n\n    this._options = options;\n    this._workers = new Array(options.numWorkers);\n\n    if (!path().isAbsolute(workerPath)) {\n      workerPath = require.resolve(workerPath);\n    }\n\n    const stdout = (0, _mergeStream().default)();\n    const stderr = (0, _mergeStream().default)();\n    const {forkOptions, maxRetries, resourceLimits, setupArgs} = options;\n\n    for (let i = 0; i < options.numWorkers; i++) {\n      const workerOptions = {\n        forkOptions,\n        maxRetries,\n        resourceLimits,\n        setupArgs,\n        workerId: i,\n        workerPath\n      };\n      const worker = this.createWorker(workerOptions);\n      const workerStdout = worker.getStdout();\n      const workerStderr = worker.getStderr();\n\n      if (workerStdout) {\n        stdout.add(workerStdout);\n      }\n\n      if (workerStderr) {\n        stderr.add(workerStderr);\n      }\n\n      this._workers[i] = worker;\n    }\n\n    this._stdout = stdout;\n    this._stderr = stderr;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getWorkers() {\n    return this._workers;\n  }\n\n  getWorkerById(workerId) {\n    return this._workers[workerId];\n  }\n\n  createWorker(_workerOptions) {\n    throw Error('Missing method createWorker in WorkerPool');\n  }\n\n  async end() {\n    // We do not cache the request object here. If so, it would only be only\n    // processed by one of the workers, and we want them all to close.\n    const workerExitPromises = this._workers.map(async worker => {\n      worker.send(\n        [_types().CHILD_MESSAGE_END, false],\n        emptyMethod,\n        emptyMethod,\n        emptyMethod\n      ); // Schedule a force exit in case worker fails to exit gracefully so\n      // await worker.waitForExit() never takes longer than FORCE_EXIT_DELAY\n\n      let forceExited = false;\n      const forceExitTimeout = setTimeout(() => {\n        worker.forceExit();\n        forceExited = true;\n      }, FORCE_EXIT_DELAY);\n      await worker.waitForExit(); // Worker ideally exited gracefully, don't send force exit then\n\n      clearTimeout(forceExitTimeout);\n      return forceExited;\n    });\n\n    const workerExits = await Promise.all(workerExitPromises);\n    return workerExits.reduce(\n      (result, forceExited) => ({\n        forceExited: result.forceExited || forceExited\n      }),\n      {\n        forceExited: false\n      }\n    );\n  }\n}\n\nexports.default = BaseWorkerPool;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'PriorityQueue', {\n  enumerable: true,\n  get: function () {\n    return _PriorityQueue.default;\n  }\n});\nObject.defineProperty(exports, 'FifoQueue', {\n  enumerable: true,\n  get: function () {\n    return _FifoQueue.default;\n  }\n});\nObject.defineProperty(exports, 'messageParent', {\n  enumerable: true,\n  get: function () {\n    return _messageParent.default;\n  }\n});\nexports.Worker = void 0;\n\nfunction _os() {\n  const data = require('os');\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Farm = _interopRequireDefault(require('./Farm'));\n\nvar _WorkerPool = _interopRequireDefault(require('./WorkerPool'));\n\nvar _PriorityQueue = _interopRequireDefault(require('./PriorityQueue'));\n\nvar _FifoQueue = _interopRequireDefault(require('./FifoQueue'));\n\nvar _messageParent = _interopRequireDefault(require('./workers/messageParent'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction getExposedMethods(workerPath, options) {\n  let exposedMethods = options.exposedMethods; // If no methods list is given, try getting it by auto-requiring the module.\n\n  if (!exposedMethods) {\n    const module = require(workerPath);\n\n    exposedMethods = Object.keys(module).filter(\n      // @ts-expect-error: no index\n      name => typeof module[name] === 'function'\n    );\n\n    if (typeof module === 'function') {\n      exposedMethods = [...exposedMethods, 'default'];\n    }\n  }\n\n  return exposedMethods;\n}\n/**\n * The Jest farm (publicly called \"Worker\") is a class that allows you to queue\n * methods across multiple child processes, in order to parallelize work. This\n * is done by providing an absolute path to a module that will be loaded on each\n * of the child processes, and bridged to the main process.\n *\n * Bridged methods are specified by using the \"exposedMethods\" property of the\n * \"options\" object. This is an array of strings, where each of them corresponds\n * to the exported name in the loaded module.\n *\n * You can also control the amount of workers by using the \"numWorkers\" property\n * of the \"options\" object, and the settings passed to fork the process through\n * the \"forkOptions\" property. The amount of workers defaults to the amount of\n * CPUS minus one.\n *\n * Queueing calls can be done in two ways:\n *   - Standard method: calls will be redirected to the first available worker,\n *     so they will get executed as soon as they can.\n *\n *   - Sticky method: if a \"computeWorkerKey\" method is provided within the\n *     config, the resulting string of this method will be used as a key.\n *     Every time this key is returned, it is guaranteed that your job will be\n *     processed by the same worker. This is specially useful if your workers\n *     are caching results.\n */\n\nclass Worker {\n  constructor(workerPath, options) {\n    var _this$_options$enable,\n      _this$_options$forkOp,\n      _this$_options$maxRet,\n      _this$_options$numWor,\n      _this$_options$resour,\n      _this$_options$setupA;\n\n    _defineProperty(this, '_ending', void 0);\n\n    _defineProperty(this, '_farm', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workerPool', void 0);\n\n    this._options = {...options};\n    this._ending = false;\n    const workerPoolOptions = {\n      enableWorkerThreads:\n        (_this$_options$enable = this._options.enableWorkerThreads) !== null &&\n        _this$_options$enable !== void 0\n          ? _this$_options$enable\n          : false,\n      forkOptions:\n        (_this$_options$forkOp = this._options.forkOptions) !== null &&\n        _this$_options$forkOp !== void 0\n          ? _this$_options$forkOp\n          : {},\n      maxRetries:\n        (_this$_options$maxRet = this._options.maxRetries) !== null &&\n        _this$_options$maxRet !== void 0\n          ? _this$_options$maxRet\n          : 3,\n      numWorkers:\n        (_this$_options$numWor = this._options.numWorkers) !== null &&\n        _this$_options$numWor !== void 0\n          ? _this$_options$numWor\n          : Math.max((0, _os().cpus)().length - 1, 1),\n      resourceLimits:\n        (_this$_options$resour = this._options.resourceLimits) !== null &&\n        _this$_options$resour !== void 0\n          ? _this$_options$resour\n          : {},\n      setupArgs:\n        (_this$_options$setupA = this._options.setupArgs) !== null &&\n        _this$_options$setupA !== void 0\n          ? _this$_options$setupA\n          : []\n    };\n\n    if (this._options.WorkerPool) {\n      // @ts-expect-error: constructor target any?\n      this._workerPool = new this._options.WorkerPool(\n        workerPath,\n        workerPoolOptions\n      );\n    } else {\n      this._workerPool = new _WorkerPool.default(workerPath, workerPoolOptions);\n    }\n\n    this._farm = new _Farm.default(\n      workerPoolOptions.numWorkers,\n      this._workerPool.send.bind(this._workerPool),\n      {\n        computeWorkerKey: this._options.computeWorkerKey,\n        taskQueue: this._options.taskQueue,\n        workerSchedulingPolicy: this._options.workerSchedulingPolicy\n      }\n    );\n\n    this._bindExposedWorkerMethods(workerPath, this._options);\n  }\n\n  _bindExposedWorkerMethods(workerPath, options) {\n    getExposedMethods(workerPath, options).forEach(name => {\n      if (name.startsWith('_')) {\n        return;\n      }\n\n      if (this.constructor.prototype.hasOwnProperty(name)) {\n        throw new TypeError('Cannot define a method called ' + name);\n      } // @ts-expect-error: dynamic extension of the class instance is expected.\n\n      this[name] = this._callFunctionWithArgs.bind(this, name);\n    });\n  }\n\n  _callFunctionWithArgs(method, ...args) {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    return this._farm.doWork(method, ...args);\n  }\n\n  getStderr() {\n    return this._workerPool.getStderr();\n  }\n\n  getStdout() {\n    return this._workerPool.getStdout();\n  }\n\n  async end() {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    this._ending = true;\n    return this._workerPool.end();\n  }\n}\n\nexports.Worker = Worker;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.PARENT_MESSAGE_CUSTOM =\n  exports.PARENT_MESSAGE_SETUP_ERROR =\n  exports.PARENT_MESSAGE_CLIENT_ERROR =\n  exports.PARENT_MESSAGE_OK =\n  exports.CHILD_MESSAGE_END =\n  exports.CHILD_MESSAGE_CALL =\n  exports.CHILD_MESSAGE_INITIALIZE =\n    void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// import type {ResourceLimits} from 'worker_threads';\n// This is not present in the Node 12 typings\n// Because of the dynamic nature of a worker communication process, all messages\n// coming from any of the other processes cannot be typed. Thus, many types\n// include \"unknown\" as a TS type, which is (unfortunately) correct here.\nconst CHILD_MESSAGE_INITIALIZE = 0;\nexports.CHILD_MESSAGE_INITIALIZE = CHILD_MESSAGE_INITIALIZE;\nconst CHILD_MESSAGE_CALL = 1;\nexports.CHILD_MESSAGE_CALL = CHILD_MESSAGE_CALL;\nconst CHILD_MESSAGE_END = 2;\nexports.CHILD_MESSAGE_END = CHILD_MESSAGE_END;\nconst PARENT_MESSAGE_OK = 0;\nexports.PARENT_MESSAGE_OK = PARENT_MESSAGE_OK;\nconst PARENT_MESSAGE_CLIENT_ERROR = 1;\nexports.PARENT_MESSAGE_CLIENT_ERROR = PARENT_MESSAGE_CLIENT_ERROR;\nconst PARENT_MESSAGE_SETUP_ERROR = 2;\nexports.PARENT_MESSAGE_SETUP_ERROR = PARENT_MESSAGE_SETUP_ERROR;\nconst PARENT_MESSAGE_CUSTOM = 3;\nexports.PARENT_MESSAGE_CUSTOM = PARENT_MESSAGE_CUSTOM;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  const data = require('child_process');\n\n  _child_process = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  const data = require('stream');\n\n  _stream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _supportsColor() {\n  const data = require('supports-color');\n\n  _supportsColor = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = require('../types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst SIGNAL_BASE_EXIT_CODE = 128;\nconst SIGKILL_EXIT_CODE = SIGNAL_BASE_EXIT_CODE + 9;\nconst SIGTERM_EXIT_CODE = SIGNAL_BASE_EXIT_CODE + 15; // How long to wait after SIGTERM before sending SIGKILL\n\nconst SIGKILL_DELAY = 500;\n/**\n * This class wraps the child process and provides a nice interface to\n * communicate with. It takes care of:\n *\n *  - Re-spawning the process if it dies.\n *  - Queues calls while the worker is busy.\n *  - Re-sends the requests if the worker blew up.\n *\n * The reason for queueing them here (since childProcess.send also has an\n * internal queue) is because the worker could be doing asynchronous work, and\n * this would lead to the child process to read its receiving buffer and start a\n * second call. By queueing calls here, we don't send the next call to the\n * children until we receive the result of the previous one.\n *\n * As soon as a request starts to be processed by a worker, its \"processed\"\n * field is changed to \"true\", so that other workers which might encounter the\n * same call skip it.\n */\n\nclass ChildProcessWorker {\n  constructor(options) {\n    _defineProperty(this, '_child', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_onCustomMessage', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_exitPromise', void 0);\n\n    _defineProperty(this, '_resolveExitPromise', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._fakeStream = null;\n    this._stdout = null;\n    this._stderr = null;\n    this._exitPromise = new Promise(resolve => {\n      this._resolveExitPromise = resolve;\n    });\n    this.initialize();\n  }\n\n  initialize() {\n    const forceColor = _supportsColor().stdout\n      ? {\n          FORCE_COLOR: '1'\n        }\n      : {};\n    const child = (0, _child_process().fork)(\n      require.resolve('./processChild'),\n      [],\n      {\n        cwd: process.cwd(),\n        env: {\n          ...process.env,\n          JEST_WORKER_ID: String(this._options.workerId + 1),\n          // 0-indexed workerId, 1-indexed JEST_WORKER_ID\n          ...forceColor\n        },\n        // Suppress --debug / --inspect flags while preserving others (like --harmony).\n        execArgv: process.execArgv.filter(v => !/^--(debug|inspect)/.test(v)),\n        silent: true,\n        ...this._options.forkOptions\n      }\n    );\n\n    if (child.stdout) {\n      if (!this._stdout) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stdout.add(child.stdout);\n    }\n\n    if (child.stderr) {\n      if (!this._stderr) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stderr.add(child.stderr);\n    }\n\n    child.on('message', this._onMessage.bind(this));\n    child.on('exit', this._onExit.bind(this));\n    child.send([\n      _types().CHILD_MESSAGE_INITIALIZE,\n      false,\n      this._options.workerPath,\n      this._options.setupArgs\n    ]);\n    this._child = child;\n    this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n    // coming from the child. This avoids code duplication related with cleaning\n    // the queue, and scheduling the next call.\n\n    if (this._retries > this._options.maxRetries) {\n      const error = new Error(\n        `Jest worker encountered ${this._retries} child process exceptions, exceeding retry limit`\n      );\n\n      this._onMessage([\n        _types().PARENT_MESSAGE_CLIENT_ERROR,\n        error.name,\n        error.message,\n        error.stack,\n        {\n          type: 'WorkerError'\n        }\n      ]);\n    }\n  }\n\n  _shutdown() {\n    // End the temporary streams so the merged streams end too\n    if (this._fakeStream) {\n      this._fakeStream.end();\n\n      this._fakeStream = null;\n    }\n\n    this._resolveExitPromise();\n  }\n\n  _onMessage(response) {\n    // TODO: Add appropriate type check\n    let error;\n\n    switch (response[0]) {\n      case _types().PARENT_MESSAGE_OK:\n        this._onProcessEnd(null, response[1]);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CLIENT_ERROR:\n        error = response[4];\n\n        if (error != null && typeof error === 'object') {\n          const extra = error; // @ts-expect-error: no index\n\n          const NativeCtor = global[response[1]];\n          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n          error = new Ctor(response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          for (const key in extra) {\n            error[key] = extra[key];\n          }\n        }\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_SETUP_ERROR:\n        error = new Error('Error when calling setup: ' + response[2]);\n        error.type = response[1];\n        error.stack = response[3];\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CUSTOM:\n        this._onCustomMessage(response[1]);\n\n        break;\n\n      default:\n        throw new TypeError('Unexpected response from worker: ' + response[0]);\n    }\n  }\n\n  _onExit(exitCode) {\n    if (\n      exitCode !== 0 &&\n      exitCode !== null &&\n      exitCode !== SIGTERM_EXIT_CODE &&\n      exitCode !== SIGKILL_EXIT_CODE\n    ) {\n      this.initialize();\n\n      if (this._request) {\n        this._child.send(this._request);\n      }\n    } else {\n      this._shutdown();\n    }\n  }\n\n  send(request, onProcessStart, onProcessEnd, onCustomMessage) {\n    onProcessStart(this);\n\n    this._onProcessEnd = (...args) => {\n      // Clean the request to avoid sending past requests to workers that fail\n      // while waiting for a new request (timers, unhandled rejections...)\n      this._request = null;\n      return onProcessEnd(...args);\n    };\n\n    this._onCustomMessage = (...arg) => onCustomMessage(...arg);\n\n    this._request = request;\n    this._retries = 0;\n\n    this._child.send(request, () => {});\n  }\n\n  waitForExit() {\n    return this._exitPromise;\n  }\n\n  forceExit() {\n    this._child.kill('SIGTERM');\n\n    const sigkillTimeout = setTimeout(\n      () => this._child.kill('SIGKILL'),\n      SIGKILL_DELAY\n    );\n\n    this._exitPromise.then(() => clearTimeout(sigkillTimeout));\n  }\n\n  getWorkerId() {\n    return this._options.workerId;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  _getFakeStream() {\n    if (!this._fakeStream) {\n      this._fakeStream = new (_stream().PassThrough)();\n    }\n\n    return this._fakeStream;\n  }\n}\n\nexports.default = ChildProcessWorker;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  const data = require('stream');\n\n  _stream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _worker_threads() {\n  const data = require('worker_threads');\n\n  _worker_threads = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = require('../types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass ExperimentalWorker {\n  constructor(options) {\n    _defineProperty(this, '_worker', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_onCustomMessage', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_exitPromise', void 0);\n\n    _defineProperty(this, '_resolveExitPromise', void 0);\n\n    _defineProperty(this, '_forceExited', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._fakeStream = null;\n    this._stdout = null;\n    this._stderr = null;\n    this._exitPromise = new Promise(resolve => {\n      this._resolveExitPromise = resolve;\n    });\n    this._forceExited = false;\n    this.initialize();\n  }\n\n  initialize() {\n    this._worker = new (_worker_threads().Worker)(\n      path().resolve(__dirname, './threadChild.js'),\n      {\n        eval: false,\n        // @ts-expect-error: added in newer versions\n        resourceLimits: this._options.resourceLimits,\n        stderr: true,\n        stdout: true,\n        workerData: {\n          cwd: process.cwd(),\n          env: {\n            ...process.env,\n            JEST_WORKER_ID: String(this._options.workerId + 1) // 0-indexed workerId, 1-indexed JEST_WORKER_ID\n          },\n          // Suppress --debug / --inspect flags while preserving others (like --harmony).\n          execArgv: process.execArgv.filter(v => !/^--(debug|inspect)/.test(v)),\n          silent: true,\n          ...this._options.forkOptions\n        }\n      }\n    );\n\n    if (this._worker.stdout) {\n      if (!this._stdout) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stdout.add(this._worker.stdout);\n    }\n\n    if (this._worker.stderr) {\n      if (!this._stderr) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stderr.add(this._worker.stderr);\n    }\n\n    this._worker.on('message', this._onMessage.bind(this));\n\n    this._worker.on('exit', this._onExit.bind(this));\n\n    this._worker.postMessage([\n      _types().CHILD_MESSAGE_INITIALIZE,\n      false,\n      this._options.workerPath,\n      this._options.setupArgs\n    ]);\n\n    this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n    // coming from the child. This avoids code duplication related with cleaning\n    // the queue, and scheduling the next call.\n\n    if (this._retries > this._options.maxRetries) {\n      const error = new Error('Call retries were exceeded');\n\n      this._onMessage([\n        _types().PARENT_MESSAGE_CLIENT_ERROR,\n        error.name,\n        error.message,\n        error.stack,\n        {\n          type: 'WorkerError'\n        }\n      ]);\n    }\n  }\n\n  _shutdown() {\n    // End the permanent stream so the merged stream end too\n    if (this._fakeStream) {\n      this._fakeStream.end();\n\n      this._fakeStream = null;\n    }\n\n    this._resolveExitPromise();\n  }\n\n  _onMessage(response) {\n    let error;\n\n    switch (response[0]) {\n      case _types().PARENT_MESSAGE_OK:\n        this._onProcessEnd(null, response[1]);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CLIENT_ERROR:\n        error = response[4];\n\n        if (error != null && typeof error === 'object') {\n          const extra = error; // @ts-expect-error: no index\n\n          const NativeCtor = global[response[1]];\n          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n          error = new Ctor(response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          for (const key in extra) {\n            // @ts-expect-error: no index\n            error[key] = extra[key];\n          }\n        }\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_SETUP_ERROR:\n        error = new Error('Error when calling setup: ' + response[2]); // @ts-expect-error: adding custom properties to errors.\n\n        error.type = response[1];\n        error.stack = response[3];\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CUSTOM:\n        this._onCustomMessage(response[1]);\n\n        break;\n\n      default:\n        throw new TypeError('Unexpected response from worker: ' + response[0]);\n    }\n  }\n\n  _onExit(exitCode) {\n    if (exitCode !== 0 && !this._forceExited) {\n      this.initialize();\n\n      if (this._request) {\n        this._worker.postMessage(this._request);\n      }\n    } else {\n      this._shutdown();\n    }\n  }\n\n  waitForExit() {\n    return this._exitPromise;\n  }\n\n  forceExit() {\n    this._forceExited = true;\n\n    this._worker.terminate();\n  }\n\n  send(request, onProcessStart, onProcessEnd, onCustomMessage) {\n    onProcessStart(this);\n\n    this._onProcessEnd = (...args) => {\n      var _onProcessEnd;\n\n      // Clean the request to avoid sending past requests to workers that fail\n      // while waiting for a new request (timers, unhandled rejections...)\n      this._request = null;\n      const res =\n        (_onProcessEnd = onProcessEnd) === null || _onProcessEnd === void 0\n          ? void 0\n          : _onProcessEnd(...args); // Clean up the reference so related closures can be garbage collected.\n\n      onProcessEnd = null;\n      return res;\n    };\n\n    this._onCustomMessage = (...arg) => onCustomMessage(...arg);\n\n    this._request = request;\n    this._retries = 0;\n\n    this._worker.postMessage(request);\n  }\n\n  getWorkerId() {\n    return this._options.workerId;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  _getFakeStream() {\n    if (!this._fakeStream) {\n      this._fakeStream = new (_stream().PassThrough)();\n    }\n\n    return this._fakeStream;\n  }\n}\n\nexports.default = ExperimentalWorker;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = messageParent;\n\nfunction _types() {\n  const data = require('../types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst isWorkerThread = (() => {\n  try {\n    // `Require` here to support Node v10\n    const {isMainThread, parentPort} = require('worker_threads');\n\n    return !isMainThread && parentPort != null;\n  } catch {\n    return false;\n  }\n})();\n\nfunction messageParent(message, parentProcess = process) {\n  if (isWorkerThread) {\n    // `Require` here to support Node v10\n    const {parentPort} = require('worker_threads'); // ! is safe due to `null` check in `isWorkerThread`\n\n    parentPort.postMessage([_types().PARENT_MESSAGE_CUSTOM, message]);\n  } else if (typeof parentProcess.send === 'function') {\n    parentProcess.send([_types().PARENT_MESSAGE_CUSTOM, message]);\n  } else {\n    throw new Error('\"messageParent\" can only be used inside a worker');\n  }\n}\n","'use strict';\n\nfunction _types() {\n  const data = require('../types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nlet file = null;\nlet setupArgs = [];\nlet initialized = false;\n/**\n * This file is a small bootstrapper for workers. It sets up the communication\n * between the worker and the parent process, interpreting parent messages and\n * sending results back.\n *\n * The file loaded will be lazily initialized the first time any of the workers\n * is called. This is done for optimal performance: if the farm is initialized,\n * but no call is made to it, child Node processes will be consuming the least\n * possible amount of memory.\n *\n * If an invalid message is detected, the child will exit (by throwing) with a\n * non-zero exit code.\n */\n\nconst messageListener = request => {\n  switch (request[0]) {\n    case _types().CHILD_MESSAGE_INITIALIZE:\n      const init = request;\n      file = init[2];\n      setupArgs = request[3];\n      break;\n\n    case _types().CHILD_MESSAGE_CALL:\n      const call = request;\n      execMethod(call[2], call[3]);\n      break;\n\n    case _types().CHILD_MESSAGE_END:\n      end();\n      break;\n\n    default:\n      throw new TypeError(\n        'Unexpected request from parent process: ' + request[0]\n      );\n  }\n};\n\nprocess.on('message', messageListener);\n\nfunction reportSuccess(result) {\n  if (!process || !process.send) {\n    throw new Error('Child can only be used on a forked process');\n  }\n\n  process.send([_types().PARENT_MESSAGE_OK, result]);\n}\n\nfunction reportClientError(error) {\n  return reportError(error, _types().PARENT_MESSAGE_CLIENT_ERROR);\n}\n\nfunction reportInitializeError(error) {\n  return reportError(error, _types().PARENT_MESSAGE_SETUP_ERROR);\n}\n\nfunction reportError(error, type) {\n  if (!process || !process.send) {\n    throw new Error('Child can only be used on a forked process');\n  }\n\n  if (error == null) {\n    error = new Error('\"null\" or \"undefined\" thrown');\n  }\n\n  process.send([\n    type,\n    error.constructor && error.constructor.name,\n    error.message,\n    error.stack,\n    typeof error === 'object' ? {...error} : error\n  ]);\n}\n\nfunction end() {\n  const main = require(file);\n\n  if (!main.teardown) {\n    exitProcess();\n    return;\n  }\n\n  execFunction(main.teardown, main, [], exitProcess, exitProcess);\n}\n\nfunction exitProcess() {\n  // Clean up open handles so the process ideally exits gracefully\n  process.removeListener('message', messageListener);\n}\n\nfunction execMethod(method, args) {\n  const main = require(file);\n\n  let fn;\n\n  if (method === 'default') {\n    fn = main.__esModule ? main['default'] : main;\n  } else {\n    fn = main[method];\n  }\n\n  function execHelper() {\n    execFunction(fn, main, args, reportSuccess, reportClientError);\n  }\n\n  if (initialized || !main.setup) {\n    execHelper();\n    return;\n  }\n\n  initialized = true;\n  execFunction(main.setup, main, setupArgs, execHelper, reportInitializeError);\n}\n\nconst isPromise = obj =>\n  !!obj &&\n  (typeof obj === 'object' || typeof obj === 'function') &&\n  typeof obj.then === 'function';\n\nfunction execFunction(fn, ctx, args, onResult, onError) {\n  let result;\n\n  try {\n    result = fn.apply(ctx, args);\n  } catch (err) {\n    onError(err);\n    return;\n  }\n\n  if (isPromise(result)) {\n    result.then(onResult, onError);\n  } else {\n    onResult(result);\n  }\n}\n","/* eslint-env browser */\n'use strict';\n\nfunction getChromeVersion() {\n\tconst matches = /(Chrome|Chromium)\\/(?<chromeVersion>\\d+)\\./.exec(navigator.userAgent);\n\n\tif (!matches) {\n\t\treturn;\n\t}\n\n\treturn Number.parseInt(matches.groups.chromeVersion, 10);\n}\n\nconst colorSupport = getChromeVersion() >= 69 ? {\n\tlevel: 1,\n\thasBasic: true,\n\thas256: false,\n\thas16m: false\n} : false;\n\nmodule.exports = {\n\tstdout: colorSupport,\n\tstderr: colorSupport\n};\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;AChhhtpvWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;A","sourceRoot":""}