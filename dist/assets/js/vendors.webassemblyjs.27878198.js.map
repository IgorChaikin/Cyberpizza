{"version":3,"file":"assets/js/vendors.webassemblyjs.27878198.js","sources":["webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/esm/clone.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/esm/node-helpers.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/esm/node-path.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/esm/nodes.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/esm/signatures.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/esm/transform/ast-module-to-module-context/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/esm/traverse.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/esm/utils.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ast/lib/clone.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/floating-point-hex-parser/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/helper-api-error/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/helper-buffer/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/helper-numbers/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/helper-wasm-bytecode/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/helper-wasm-bytecode/esm/section.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/helper-wasm-section/esm/create.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/helper-wasm-section/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/helper-wasm-section/esm/remove.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/helper-wasm-section/esm/resize.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/ieee754/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/leb128/esm/bits.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/leb128/esm/bufs.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/leb128/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/leb128/esm/leb.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/utf8/esm/decoder.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/utf8/esm/encoder.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/utf8/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-edit/esm/apply.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-edit/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-gen/esm/encoder/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-gen/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-gen/lib/encoder/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-gen/lib/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-opt/esm/index.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-opt/esm/leb128.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-parser/esm/decoder.js","webpack://react-boilerplate/./node_modules/@webassemblyjs/wasm-parser/esm/index.js"],"sourcesContent":["export function cloneNode(n) {\n  return Object.assign({}, n);\n}","export * from \"./nodes\";\nexport { numberLiteralFromRaw, withLoc, withRaw, funcParam, indexLiteral, memIndexLiteral, instruction, objectInstruction } from \"./node-helpers.js\";\nexport { traverse } from \"./traverse\";\nexport { signatures } from \"./signatures\";\nexport * from \"./utils\";\nexport { cloneNode } from \"./clone\";\nexport { moduleContextFromModuleAST } from \"./transform/ast-module-to-module-context\";","import { parse32F, parse64F, parse32I, parse64I, parseU32, isNanLiteral, isInfLiteral } from \"@webassemblyjs/helper-numbers\";\nimport { longNumberLiteral, floatLiteral, numberLiteral, instr } from \"./nodes\";\nexport function numberLiteralFromRaw(rawValue) {\n  var instructionType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"i32\";\n  var original = rawValue; // Remove numeric separators _\n\n  if (typeof rawValue === \"string\") {\n    rawValue = rawValue.replace(/_/g, \"\");\n  }\n\n  if (typeof rawValue === \"number\") {\n    return numberLiteral(rawValue, String(original));\n  } else {\n    switch (instructionType) {\n      case \"i32\":\n        {\n          return numberLiteral(parse32I(rawValue), String(original));\n        }\n\n      case \"u32\":\n        {\n          return numberLiteral(parseU32(rawValue), String(original));\n        }\n\n      case \"i64\":\n        {\n          return longNumberLiteral(parse64I(rawValue), String(original));\n        }\n\n      case \"f32\":\n        {\n          return floatLiteral(parse32F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n      // f64\n\n      default:\n        {\n          return floatLiteral(parse64F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n    }\n  }\n}\nexport function instruction(id) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var namedArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return instr(id, undefined, args, namedArgs);\n}\nexport function objectInstruction(id, object) {\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var namedArgs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return instr(id, object, args, namedArgs);\n}\n/**\n * Decorators\n */\n\nexport function withLoc(n, end, start) {\n  var loc = {\n    start: start,\n    end: end\n  };\n  n.loc = loc;\n  return n;\n}\nexport function withRaw(n, raw) {\n  n.raw = raw;\n  return n;\n}\nexport function funcParam(valtype, id) {\n  return {\n    id: id,\n    valtype: valtype\n  };\n}\nexport function indexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}\nexport function memIndexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction findParent(_ref, cb) {\n  var parentPath = _ref.parentPath;\n\n  if (parentPath == null) {\n    throw new Error(\"node is root\");\n  }\n\n  var currentPath = parentPath;\n\n  while (cb(currentPath) !== false) {\n    // Hit the root node, stop\n    // $FlowIgnore\n    if (currentPath.parentPath == null) {\n      return null;\n    } // $FlowIgnore\n\n\n    currentPath = currentPath.parentPath;\n  }\n\n  return currentPath.node;\n}\n\nfunction insertBefore(context, newNode) {\n  return insert(context, newNode);\n}\n\nfunction insertAfter(context, newNode) {\n  return insert(context, newNode, 1);\n}\n\nfunction insert(_ref2, newNode) {\n  var node = _ref2.node,\n      inList = _ref2.inList,\n      parentPath = _ref2.parentPath,\n      parentKey = _ref2.parentKey;\n  var indexOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!inList) {\n    throw new Error('inList' + \" error: \" + (\"insert can only be used for nodes that are within lists\" || \"unknown\"));\n  }\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  var parentList = parentPath.node[parentKey];\n  var indexInList = parentList.findIndex(function (n) {\n    return n === node;\n  });\n  parentList.splice(indexInList + indexOffset, 0, newNode);\n}\n\nfunction remove(_ref3) {\n  var node = _ref3.node,\n      parentKey = _ref3.parentKey,\n      parentPath = _ref3.parentPath;\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  var parentNode = parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    // $FlowIgnore\n    parentNode[parentKey] = parentProperty.filter(function (n) {\n      return n !== node;\n    });\n  } else {\n    // $FlowIgnore\n    delete parentNode[parentKey];\n  }\n\n  node._deleted = true;\n}\n\nfunction stop(context) {\n  context.shouldStop = true;\n}\n\nfunction replaceWith(context, newNode) {\n  // $FlowIgnore\n  var parentNode = context.parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[context.parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    var indexInList = parentProperty.findIndex(function (n) {\n      return n === context.node;\n    });\n    parentProperty.splice(indexInList, 1, newNode);\n  } else {\n    // $FlowIgnore\n    parentNode[context.parentKey] = newNode;\n  }\n\n  context.node._deleted = true;\n  context.node = newNode;\n} // bind the context to the first argument of node operations\n\n\nfunction bindNodeOperations(operations, context) {\n  var keys = Object.keys(operations);\n  var boundOperations = {};\n  keys.forEach(function (key) {\n    boundOperations[key] = operations[key].bind(null, context);\n  });\n  return boundOperations;\n}\n\nfunction createPathOperations(context) {\n  // $FlowIgnore\n  return bindNodeOperations({\n    findParent: findParent,\n    replaceWith: replaceWith,\n    remove: remove,\n    insertBefore: insertBefore,\n    insertAfter: insertAfter,\n    stop: stop\n  }, context);\n}\n\nexport function createPath(context) {\n  var path = _extends({}, context); // $FlowIgnore\n\n\n  Object.assign(path, createPathOperations(path)); // $FlowIgnore\n\n  return path;\n}","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// THIS FILE IS AUTOGENERATED\n// see scripts/generateNodeUtils.js\nfunction isTypeOf(t) {\n  return function (n) {\n    return n.type === t;\n  };\n}\n\nfunction assertTypeOf(t) {\n  return function (n) {\n    return function () {\n      if (!(n.type === t)) {\n        throw new Error('n.type === t' + \" error: \" + (undefined || \"unknown\"));\n      }\n    }();\n  };\n}\n\nexport function module(id, fields, metadata) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(fields) === \"object\" && typeof fields.length !== \"undefined\")) {\n    throw new Error('typeof fields === \"object\" && typeof fields.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Module\",\n    id: id,\n    fields: fields\n  };\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\nexport function moduleMetadata(sections, functionNames, localNames, producers) {\n  if (!(_typeof(sections) === \"object\" && typeof sections.length !== \"undefined\")) {\n    throw new Error('typeof sections === \"object\" && typeof sections.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (functionNames !== null && functionNames !== undefined) {\n    if (!(_typeof(functionNames) === \"object\" && typeof functionNames.length !== \"undefined\")) {\n      throw new Error('typeof functionNames === \"object\" && typeof functionNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (localNames !== null && localNames !== undefined) {\n    if (!(_typeof(localNames) === \"object\" && typeof localNames.length !== \"undefined\")) {\n      throw new Error('typeof localNames === \"object\" && typeof localNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (producers !== null && producers !== undefined) {\n    if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n      throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"ModuleMetadata\",\n    sections: sections\n  };\n\n  if (typeof functionNames !== \"undefined\" && functionNames.length > 0) {\n    node.functionNames = functionNames;\n  }\n\n  if (typeof localNames !== \"undefined\" && localNames.length > 0) {\n    node.localNames = localNames;\n  }\n\n  if (typeof producers !== \"undefined\" && producers.length > 0) {\n    node.producers = producers;\n  }\n\n  return node;\n}\nexport function moduleNameMetadata(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleNameMetadata\",\n    value: value\n  };\n  return node;\n}\nexport function functionNameMetadata(value, index) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof index === \"number\")) {\n    throw new Error('typeof index === \"number\"' + \" error: \" + (\"Argument index must be of type number, given: \" + _typeof(index) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FunctionNameMetadata\",\n    value: value,\n    index: index\n  };\n  return node;\n}\nexport function localNameMetadata(value, localIndex, functionIndex) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof localIndex === \"number\")) {\n    throw new Error('typeof localIndex === \"number\"' + \" error: \" + (\"Argument localIndex must be of type number, given: \" + _typeof(localIndex) || \"unknown\"));\n  }\n\n  if (!(typeof functionIndex === \"number\")) {\n    throw new Error('typeof functionIndex === \"number\"' + \" error: \" + (\"Argument functionIndex must be of type number, given: \" + _typeof(functionIndex) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LocalNameMetadata\",\n    value: value,\n    localIndex: localIndex,\n    functionIndex: functionIndex\n  };\n  return node;\n}\nexport function binaryModule(id, blob) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(blob) === \"object\" && typeof blob.length !== \"undefined\")) {\n    throw new Error('typeof blob === \"object\" && typeof blob.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BinaryModule\",\n    id: id,\n    blob: blob\n  };\n  return node;\n}\nexport function quoteModule(id, string) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(string) === \"object\" && typeof string.length !== \"undefined\")) {\n    throw new Error('typeof string === \"object\" && typeof string.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"QuoteModule\",\n    id: id,\n    string: string\n  };\n  return node;\n}\nexport function sectionMetadata(section, startOffset, size, vectorOfSize) {\n  if (!(typeof startOffset === \"number\")) {\n    throw new Error('typeof startOffset === \"number\"' + \" error: \" + (\"Argument startOffset must be of type number, given: \" + _typeof(startOffset) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"SectionMetadata\",\n    section: section,\n    startOffset: startOffset,\n    size: size,\n    vectorOfSize: vectorOfSize\n  };\n  return node;\n}\nexport function producersSectionMetadata(producers) {\n  if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n    throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducersSectionMetadata\",\n    producers: producers\n  };\n  return node;\n}\nexport function producerMetadata(language, processedBy, sdk) {\n  if (!(_typeof(language) === \"object\" && typeof language.length !== \"undefined\")) {\n    throw new Error('typeof language === \"object\" && typeof language.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(processedBy) === \"object\" && typeof processedBy.length !== \"undefined\")) {\n    throw new Error('typeof processedBy === \"object\" && typeof processedBy.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(sdk) === \"object\" && typeof sdk.length !== \"undefined\")) {\n    throw new Error('typeof sdk === \"object\" && typeof sdk.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadata\",\n    language: language,\n    processedBy: processedBy,\n    sdk: sdk\n  };\n  return node;\n}\nexport function producerMetadataVersionedName(name, version) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  if (!(typeof version === \"string\")) {\n    throw new Error('typeof version === \"string\"' + \" error: \" + (\"Argument version must be of type string, given: \" + _typeof(version) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadataVersionedName\",\n    name: name,\n    version: version\n  };\n  return node;\n}\nexport function loopInstruction(label, resulttype, instr) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LoopInstruction\",\n    id: \"loop\",\n    label: label,\n    resulttype: resulttype,\n    instr: instr\n  };\n  return node;\n}\nexport function instr(id, object, args, namedArgs) {\n  if (!(typeof id === \"string\")) {\n    throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n  }\n\n  if (!(_typeof(args) === \"object\" && typeof args.length !== \"undefined\")) {\n    throw new Error('typeof args === \"object\" && typeof args.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Instr\",\n    id: id,\n    args: args\n  };\n\n  if (typeof object !== \"undefined\") {\n    node.object = object;\n  }\n\n  if (typeof namedArgs !== \"undefined\" && Object.keys(namedArgs).length !== 0) {\n    node.namedArgs = namedArgs;\n  }\n\n  return node;\n}\nexport function ifInstruction(testLabel, test, result, consequent, alternate) {\n  if (!(_typeof(test) === \"object\" && typeof test.length !== \"undefined\")) {\n    throw new Error('typeof test === \"object\" && typeof test.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(consequent) === \"object\" && typeof consequent.length !== \"undefined\")) {\n    throw new Error('typeof consequent === \"object\" && typeof consequent.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(alternate) === \"object\" && typeof alternate.length !== \"undefined\")) {\n    throw new Error('typeof alternate === \"object\" && typeof alternate.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"IfInstruction\",\n    id: \"if\",\n    testLabel: testLabel,\n    test: test,\n    result: result,\n    consequent: consequent,\n    alternate: alternate\n  };\n  return node;\n}\nexport function stringLiteral(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"StringLiteral\",\n    value: value\n  };\n  return node;\n}\nexport function numberLiteral(value, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"NumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\nexport function longNumberLiteral(value, raw) {\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LongNumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\nexport function floatLiteral(value, nan, inf, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (nan !== null && nan !== undefined) {\n    if (!(typeof nan === \"boolean\")) {\n      throw new Error('typeof nan === \"boolean\"' + \" error: \" + (\"Argument nan must be of type boolean, given: \" + _typeof(nan) || \"unknown\"));\n    }\n  }\n\n  if (inf !== null && inf !== undefined) {\n    if (!(typeof inf === \"boolean\")) {\n      throw new Error('typeof inf === \"boolean\"' + \" error: \" + (\"Argument inf must be of type boolean, given: \" + _typeof(inf) || \"unknown\"));\n    }\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FloatLiteral\",\n    value: value,\n    raw: raw\n  };\n\n  if (nan === true) {\n    node.nan = true;\n  }\n\n  if (inf === true) {\n    node.inf = true;\n  }\n\n  return node;\n}\nexport function elem(table, offset, funcs) {\n  if (!(_typeof(offset) === \"object\" && typeof offset.length !== \"undefined\")) {\n    throw new Error('typeof offset === \"object\" && typeof offset.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(funcs) === \"object\" && typeof funcs.length !== \"undefined\")) {\n    throw new Error('typeof funcs === \"object\" && typeof funcs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Elem\",\n    table: table,\n    offset: offset,\n    funcs: funcs\n  };\n  return node;\n}\nexport function indexInFuncSection(index) {\n  var node = {\n    type: \"IndexInFuncSection\",\n    index: index\n  };\n  return node;\n}\nexport function valtypeLiteral(name) {\n  var node = {\n    type: \"ValtypeLiteral\",\n    name: name\n  };\n  return node;\n}\nexport function typeInstruction(id, functype) {\n  var node = {\n    type: \"TypeInstruction\",\n    id: id,\n    functype: functype\n  };\n  return node;\n}\nexport function start(index) {\n  var node = {\n    type: \"Start\",\n    index: index\n  };\n  return node;\n}\nexport function globalType(valtype, mutability) {\n  var node = {\n    type: \"GlobalType\",\n    valtype: valtype,\n    mutability: mutability\n  };\n  return node;\n}\nexport function leadingComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LeadingComment\",\n    value: value\n  };\n  return node;\n}\nexport function blockComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockComment\",\n    value: value\n  };\n  return node;\n}\nexport function data(memoryIndex, offset, init) {\n  var node = {\n    type: \"Data\",\n    memoryIndex: memoryIndex,\n    offset: offset,\n    init: init\n  };\n  return node;\n}\nexport function global(globalType, init, name) {\n  if (!(_typeof(init) === \"object\" && typeof init.length !== \"undefined\")) {\n    throw new Error('typeof init === \"object\" && typeof init.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Global\",\n    globalType: globalType,\n    init: init,\n    name: name\n  };\n  return node;\n}\nexport function table(elementType, limits, name, elements) {\n  if (!(limits.type === \"Limit\")) {\n    throw new Error('limits.type === \"Limit\"' + \" error: \" + (\"Argument limits must be of type Limit, given: \" + limits.type || \"unknown\"));\n  }\n\n  if (elements !== null && elements !== undefined) {\n    if (!(_typeof(elements) === \"object\" && typeof elements.length !== \"undefined\")) {\n      throw new Error('typeof elements === \"object\" && typeof elements.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Table\",\n    elementType: elementType,\n    limits: limits,\n    name: name\n  };\n\n  if (typeof elements !== \"undefined\" && elements.length > 0) {\n    node.elements = elements;\n  }\n\n  return node;\n}\nexport function memory(limits, id) {\n  var node = {\n    type: \"Memory\",\n    limits: limits,\n    id: id\n  };\n  return node;\n}\nexport function funcImportDescr(id, signature) {\n  var node = {\n    type: \"FuncImportDescr\",\n    id: id,\n    signature: signature\n  };\n  return node;\n}\nexport function moduleImport(module, name, descr) {\n  if (!(typeof module === \"string\")) {\n    throw new Error('typeof module === \"string\"' + \" error: \" + (\"Argument module must be of type string, given: \" + _typeof(module) || \"unknown\"));\n  }\n\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleImport\",\n    module: module,\n    name: name,\n    descr: descr\n  };\n  return node;\n}\nexport function moduleExportDescr(exportType, id) {\n  var node = {\n    type: \"ModuleExportDescr\",\n    exportType: exportType,\n    id: id\n  };\n  return node;\n}\nexport function moduleExport(name, descr) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleExport\",\n    name: name,\n    descr: descr\n  };\n  return node;\n}\nexport function limit(min, max, shared) {\n  if (!(typeof min === \"number\")) {\n    throw new Error('typeof min === \"number\"' + \" error: \" + (\"Argument min must be of type number, given: \" + _typeof(min) || \"unknown\"));\n  }\n\n  if (max !== null && max !== undefined) {\n    if (!(typeof max === \"number\")) {\n      throw new Error('typeof max === \"number\"' + \" error: \" + (\"Argument max must be of type number, given: \" + _typeof(max) || \"unknown\"));\n    }\n  }\n\n  if (shared !== null && shared !== undefined) {\n    if (!(typeof shared === \"boolean\")) {\n      throw new Error('typeof shared === \"boolean\"' + \" error: \" + (\"Argument shared must be of type boolean, given: \" + _typeof(shared) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Limit\",\n    min: min\n  };\n\n  if (typeof max !== \"undefined\") {\n    node.max = max;\n  }\n\n  if (shared === true) {\n    node.shared = true;\n  }\n\n  return node;\n}\nexport function signature(params, results) {\n  if (!(_typeof(params) === \"object\" && typeof params.length !== \"undefined\")) {\n    throw new Error('typeof params === \"object\" && typeof params.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(results) === \"object\" && typeof results.length !== \"undefined\")) {\n    throw new Error('typeof results === \"object\" && typeof results.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Signature\",\n    params: params,\n    results: results\n  };\n  return node;\n}\nexport function program(body) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Program\",\n    body: body\n  };\n  return node;\n}\nexport function identifier(value, raw) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (raw !== null && raw !== undefined) {\n    if (!(typeof raw === \"string\")) {\n      throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Identifier\",\n    value: value\n  };\n\n  if (typeof raw !== \"undefined\") {\n    node.raw = raw;\n  }\n\n  return node;\n}\nexport function blockInstruction(label, instr, result) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockInstruction\",\n    id: \"block\",\n    label: label,\n    instr: instr,\n    result: result\n  };\n  return node;\n}\nexport function callInstruction(index, instrArgs, numeric) {\n  if (instrArgs !== null && instrArgs !== undefined) {\n    if (!(_typeof(instrArgs) === \"object\" && typeof instrArgs.length !== \"undefined\")) {\n      throw new Error('typeof instrArgs === \"object\" && typeof instrArgs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallInstruction\",\n    id: \"call\",\n    index: index\n  };\n\n  if (typeof instrArgs !== \"undefined\" && instrArgs.length > 0) {\n    node.instrArgs = instrArgs;\n  }\n\n  if (typeof numeric !== \"undefined\") {\n    node.numeric = numeric;\n  }\n\n  return node;\n}\nexport function callIndirectInstruction(signature, intrs) {\n  if (intrs !== null && intrs !== undefined) {\n    if (!(_typeof(intrs) === \"object\" && typeof intrs.length !== \"undefined\")) {\n      throw new Error('typeof intrs === \"object\" && typeof intrs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallIndirectInstruction\",\n    id: \"call_indirect\",\n    signature: signature\n  };\n\n  if (typeof intrs !== \"undefined\" && intrs.length > 0) {\n    node.intrs = intrs;\n  }\n\n  return node;\n}\nexport function byteArray(values) {\n  if (!(_typeof(values) === \"object\" && typeof values.length !== \"undefined\")) {\n    throw new Error('typeof values === \"object\" && typeof values.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ByteArray\",\n    values: values\n  };\n  return node;\n}\nexport function func(name, signature, body, isExternal, metadata) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (isExternal !== null && isExternal !== undefined) {\n    if (!(typeof isExternal === \"boolean\")) {\n      throw new Error('typeof isExternal === \"boolean\"' + \" error: \" + (\"Argument isExternal must be of type boolean, given: \" + _typeof(isExternal) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Func\",\n    name: name,\n    signature: signature,\n    body: body\n  };\n\n  if (isExternal === true) {\n    node.isExternal = true;\n  }\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\nexport function internalBrUnless(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalBrUnless\",\n    target: target\n  };\n  return node;\n}\nexport function internalGoto(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalGoto\",\n    target: target\n  };\n  return node;\n}\nexport function internalCallExtern(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalCallExtern\",\n    target: target\n  };\n  return node;\n}\nexport function internalEndAndReturn() {\n  var node = {\n    type: \"InternalEndAndReturn\"\n  };\n  return node;\n}\nexport var isModule = isTypeOf(\"Module\");\nexport var isModuleMetadata = isTypeOf(\"ModuleMetadata\");\nexport var isModuleNameMetadata = isTypeOf(\"ModuleNameMetadata\");\nexport var isFunctionNameMetadata = isTypeOf(\"FunctionNameMetadata\");\nexport var isLocalNameMetadata = isTypeOf(\"LocalNameMetadata\");\nexport var isBinaryModule = isTypeOf(\"BinaryModule\");\nexport var isQuoteModule = isTypeOf(\"QuoteModule\");\nexport var isSectionMetadata = isTypeOf(\"SectionMetadata\");\nexport var isProducersSectionMetadata = isTypeOf(\"ProducersSectionMetadata\");\nexport var isProducerMetadata = isTypeOf(\"ProducerMetadata\");\nexport var isProducerMetadataVersionedName = isTypeOf(\"ProducerMetadataVersionedName\");\nexport var isLoopInstruction = isTypeOf(\"LoopInstruction\");\nexport var isInstr = isTypeOf(\"Instr\");\nexport var isIfInstruction = isTypeOf(\"IfInstruction\");\nexport var isStringLiteral = isTypeOf(\"StringLiteral\");\nexport var isNumberLiteral = isTypeOf(\"NumberLiteral\");\nexport var isLongNumberLiteral = isTypeOf(\"LongNumberLiteral\");\nexport var isFloatLiteral = isTypeOf(\"FloatLiteral\");\nexport var isElem = isTypeOf(\"Elem\");\nexport var isIndexInFuncSection = isTypeOf(\"IndexInFuncSection\");\nexport var isValtypeLiteral = isTypeOf(\"ValtypeLiteral\");\nexport var isTypeInstruction = isTypeOf(\"TypeInstruction\");\nexport var isStart = isTypeOf(\"Start\");\nexport var isGlobalType = isTypeOf(\"GlobalType\");\nexport var isLeadingComment = isTypeOf(\"LeadingComment\");\nexport var isBlockComment = isTypeOf(\"BlockComment\");\nexport var isData = isTypeOf(\"Data\");\nexport var isGlobal = isTypeOf(\"Global\");\nexport var isTable = isTypeOf(\"Table\");\nexport var isMemory = isTypeOf(\"Memory\");\nexport var isFuncImportDescr = isTypeOf(\"FuncImportDescr\");\nexport var isModuleImport = isTypeOf(\"ModuleImport\");\nexport var isModuleExportDescr = isTypeOf(\"ModuleExportDescr\");\nexport var isModuleExport = isTypeOf(\"ModuleExport\");\nexport var isLimit = isTypeOf(\"Limit\");\nexport var isSignature = isTypeOf(\"Signature\");\nexport var isProgram = isTypeOf(\"Program\");\nexport var isIdentifier = isTypeOf(\"Identifier\");\nexport var isBlockInstruction = isTypeOf(\"BlockInstruction\");\nexport var isCallInstruction = isTypeOf(\"CallInstruction\");\nexport var isCallIndirectInstruction = isTypeOf(\"CallIndirectInstruction\");\nexport var isByteArray = isTypeOf(\"ByteArray\");\nexport var isFunc = isTypeOf(\"Func\");\nexport var isInternalBrUnless = isTypeOf(\"InternalBrUnless\");\nexport var isInternalGoto = isTypeOf(\"InternalGoto\");\nexport var isInternalCallExtern = isTypeOf(\"InternalCallExtern\");\nexport var isInternalEndAndReturn = isTypeOf(\"InternalEndAndReturn\");\nexport var isNode = function isNode(node) {\n  return isModule(node) || isModuleMetadata(node) || isModuleNameMetadata(node) || isFunctionNameMetadata(node) || isLocalNameMetadata(node) || isBinaryModule(node) || isQuoteModule(node) || isSectionMetadata(node) || isProducersSectionMetadata(node) || isProducerMetadata(node) || isProducerMetadataVersionedName(node) || isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isElem(node) || isIndexInFuncSection(node) || isValtypeLiteral(node) || isTypeInstruction(node) || isStart(node) || isGlobalType(node) || isLeadingComment(node) || isBlockComment(node) || isData(node) || isGlobal(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node) || isModuleImport(node) || isModuleExportDescr(node) || isModuleExport(node) || isLimit(node) || isSignature(node) || isProgram(node) || isIdentifier(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node) || isByteArray(node) || isFunc(node) || isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\nexport var isBlock = function isBlock(node) {\n  return isLoopInstruction(node) || isBlockInstruction(node) || isFunc(node);\n};\nexport var isInstruction = function isInstruction(node) {\n  return isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isTypeInstruction(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node);\n};\nexport var isExpression = function isExpression(node) {\n  return isInstr(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isValtypeLiteral(node) || isIdentifier(node);\n};\nexport var isNumericLiteral = function isNumericLiteral(node) {\n  return isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node);\n};\nexport var isImportDescr = function isImportDescr(node) {\n  return isGlobalType(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node);\n};\nexport var isIntrinsic = function isIntrinsic(node) {\n  return isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\nexport var assertModule = assertTypeOf(\"Module\");\nexport var assertModuleMetadata = assertTypeOf(\"ModuleMetadata\");\nexport var assertModuleNameMetadata = assertTypeOf(\"ModuleNameMetadata\");\nexport var assertFunctionNameMetadata = assertTypeOf(\"FunctionNameMetadata\");\nexport var assertLocalNameMetadata = assertTypeOf(\"LocalNameMetadata\");\nexport var assertBinaryModule = assertTypeOf(\"BinaryModule\");\nexport var assertQuoteModule = assertTypeOf(\"QuoteModule\");\nexport var assertSectionMetadata = assertTypeOf(\"SectionMetadata\");\nexport var assertProducersSectionMetadata = assertTypeOf(\"ProducersSectionMetadata\");\nexport var assertProducerMetadata = assertTypeOf(\"ProducerMetadata\");\nexport var assertProducerMetadataVersionedName = assertTypeOf(\"ProducerMetadataVersionedName\");\nexport var assertLoopInstruction = assertTypeOf(\"LoopInstruction\");\nexport var assertInstr = assertTypeOf(\"Instr\");\nexport var assertIfInstruction = assertTypeOf(\"IfInstruction\");\nexport var assertStringLiteral = assertTypeOf(\"StringLiteral\");\nexport var assertNumberLiteral = assertTypeOf(\"NumberLiteral\");\nexport var assertLongNumberLiteral = assertTypeOf(\"LongNumberLiteral\");\nexport var assertFloatLiteral = assertTypeOf(\"FloatLiteral\");\nexport var assertElem = assertTypeOf(\"Elem\");\nexport var assertIndexInFuncSection = assertTypeOf(\"IndexInFuncSection\");\nexport var assertValtypeLiteral = assertTypeOf(\"ValtypeLiteral\");\nexport var assertTypeInstruction = assertTypeOf(\"TypeInstruction\");\nexport var assertStart = assertTypeOf(\"Start\");\nexport var assertGlobalType = assertTypeOf(\"GlobalType\");\nexport var assertLeadingComment = assertTypeOf(\"LeadingComment\");\nexport var assertBlockComment = assertTypeOf(\"BlockComment\");\nexport var assertData = assertTypeOf(\"Data\");\nexport var assertGlobal = assertTypeOf(\"Global\");\nexport var assertTable = assertTypeOf(\"Table\");\nexport var assertMemory = assertTypeOf(\"Memory\");\nexport var assertFuncImportDescr = assertTypeOf(\"FuncImportDescr\");\nexport var assertModuleImport = assertTypeOf(\"ModuleImport\");\nexport var assertModuleExportDescr = assertTypeOf(\"ModuleExportDescr\");\nexport var assertModuleExport = assertTypeOf(\"ModuleExport\");\nexport var assertLimit = assertTypeOf(\"Limit\");\nexport var assertSignature = assertTypeOf(\"Signature\");\nexport var assertProgram = assertTypeOf(\"Program\");\nexport var assertIdentifier = assertTypeOf(\"Identifier\");\nexport var assertBlockInstruction = assertTypeOf(\"BlockInstruction\");\nexport var assertCallInstruction = assertTypeOf(\"CallInstruction\");\nexport var assertCallIndirectInstruction = assertTypeOf(\"CallIndirectInstruction\");\nexport var assertByteArray = assertTypeOf(\"ByteArray\");\nexport var assertFunc = assertTypeOf(\"Func\");\nexport var assertInternalBrUnless = assertTypeOf(\"InternalBrUnless\");\nexport var assertInternalGoto = assertTypeOf(\"InternalGoto\");\nexport var assertInternalCallExtern = assertTypeOf(\"InternalCallExtern\");\nexport var assertInternalEndAndReturn = assertTypeOf(\"InternalEndAndReturn\");\nexport var unionTypesMap = {\n  Module: [\"Node\"],\n  ModuleMetadata: [\"Node\"],\n  ModuleNameMetadata: [\"Node\"],\n  FunctionNameMetadata: [\"Node\"],\n  LocalNameMetadata: [\"Node\"],\n  BinaryModule: [\"Node\"],\n  QuoteModule: [\"Node\"],\n  SectionMetadata: [\"Node\"],\n  ProducersSectionMetadata: [\"Node\"],\n  ProducerMetadata: [\"Node\"],\n  ProducerMetadataVersionedName: [\"Node\"],\n  LoopInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  Instr: [\"Node\", \"Expression\", \"Instruction\"],\n  IfInstruction: [\"Node\", \"Instruction\"],\n  StringLiteral: [\"Node\", \"Expression\"],\n  NumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  LongNumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  FloatLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  Elem: [\"Node\"],\n  IndexInFuncSection: [\"Node\"],\n  ValtypeLiteral: [\"Node\", \"Expression\"],\n  TypeInstruction: [\"Node\", \"Instruction\"],\n  Start: [\"Node\"],\n  GlobalType: [\"Node\", \"ImportDescr\"],\n  LeadingComment: [\"Node\"],\n  BlockComment: [\"Node\"],\n  Data: [\"Node\"],\n  Global: [\"Node\"],\n  Table: [\"Node\", \"ImportDescr\"],\n  Memory: [\"Node\", \"ImportDescr\"],\n  FuncImportDescr: [\"Node\", \"ImportDescr\"],\n  ModuleImport: [\"Node\"],\n  ModuleExportDescr: [\"Node\"],\n  ModuleExport: [\"Node\"],\n  Limit: [\"Node\"],\n  Signature: [\"Node\"],\n  Program: [\"Node\"],\n  Identifier: [\"Node\", \"Expression\"],\n  BlockInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  CallInstruction: [\"Node\", \"Instruction\"],\n  CallIndirectInstruction: [\"Node\", \"Instruction\"],\n  ByteArray: [\"Node\"],\n  Func: [\"Node\", \"Block\"],\n  InternalBrUnless: [\"Node\", \"Intrinsic\"],\n  InternalGoto: [\"Node\", \"Intrinsic\"],\n  InternalCallExtern: [\"Node\", \"Intrinsic\"],\n  InternalEndAndReturn: [\"Node\", \"Intrinsic\"]\n};\nexport var nodeAndUnionTypes = [\"Module\", \"ModuleMetadata\", \"ModuleNameMetadata\", \"FunctionNameMetadata\", \"LocalNameMetadata\", \"BinaryModule\", \"QuoteModule\", \"SectionMetadata\", \"ProducersSectionMetadata\", \"ProducerMetadata\", \"ProducerMetadataVersionedName\", \"LoopInstruction\", \"Instr\", \"IfInstruction\", \"StringLiteral\", \"NumberLiteral\", \"LongNumberLiteral\", \"FloatLiteral\", \"Elem\", \"IndexInFuncSection\", \"ValtypeLiteral\", \"TypeInstruction\", \"Start\", \"GlobalType\", \"LeadingComment\", \"BlockComment\", \"Data\", \"Global\", \"Table\", \"Memory\", \"FuncImportDescr\", \"ModuleImport\", \"ModuleExportDescr\", \"ModuleExport\", \"Limit\", \"Signature\", \"Program\", \"Identifier\", \"BlockInstruction\", \"CallInstruction\", \"CallIndirectInstruction\", \"ByteArray\", \"Func\", \"InternalBrUnless\", \"InternalGoto\", \"InternalCallExtern\", \"InternalEndAndReturn\", \"Node\", \"Block\", \"Instruction\", \"Expression\", \"NumericLiteral\", \"ImportDescr\", \"Intrinsic\"];","function sign(input, output) {\n  return [input, output];\n}\n\nvar u32 = \"u32\";\nvar i32 = \"i32\";\nvar i64 = \"i64\";\nvar f32 = \"f32\";\nvar f64 = \"f64\";\n\nvar vector = function vector(t) {\n  var vecType = [t]; // $FlowIgnore\n\n  vecType.vector = true;\n  return vecType;\n};\n\nvar controlInstructions = {\n  unreachable: sign([], []),\n  nop: sign([], []),\n  // block ?\n  // loop ?\n  // if ?\n  // if else ?\n  br: sign([u32], []),\n  br_if: sign([u32], []),\n  br_table: sign(vector(u32), []),\n  return: sign([], []),\n  call: sign([u32], []),\n  call_indirect: sign([u32], [])\n};\nvar parametricInstructions = {\n  drop: sign([], []),\n  select: sign([], [])\n};\nvar variableInstructions = {\n  get_local: sign([u32], []),\n  set_local: sign([u32], []),\n  tee_local: sign([u32], []),\n  get_global: sign([u32], []),\n  set_global: sign([u32], [])\n};\nvar memoryInstructions = {\n  \"i32.load\": sign([u32, u32], [i32]),\n  \"i64.load\": sign([u32, u32], []),\n  \"f32.load\": sign([u32, u32], []),\n  \"f64.load\": sign([u32, u32], []),\n  \"i32.load8_s\": sign([u32, u32], [i32]),\n  \"i32.load8_u\": sign([u32, u32], [i32]),\n  \"i32.load16_s\": sign([u32, u32], [i32]),\n  \"i32.load16_u\": sign([u32, u32], [i32]),\n  \"i64.load8_s\": sign([u32, u32], [i64]),\n  \"i64.load8_u\": sign([u32, u32], [i64]),\n  \"i64.load16_s\": sign([u32, u32], [i64]),\n  \"i64.load16_u\": sign([u32, u32], [i64]),\n  \"i64.load32_s\": sign([u32, u32], [i64]),\n  \"i64.load32_u\": sign([u32, u32], [i64]),\n  \"i32.store\": sign([u32, u32], []),\n  \"i64.store\": sign([u32, u32], []),\n  \"f32.store\": sign([u32, u32], []),\n  \"f64.store\": sign([u32, u32], []),\n  \"i32.store8\": sign([u32, u32], []),\n  \"i32.store16\": sign([u32, u32], []),\n  \"i64.store8\": sign([u32, u32], []),\n  \"i64.store16\": sign([u32, u32], []),\n  \"i64.store32\": sign([u32, u32], []),\n  current_memory: sign([], []),\n  grow_memory: sign([], [])\n};\nvar numericInstructions = {\n  \"i32.const\": sign([i32], [i32]),\n  \"i64.const\": sign([i64], [i64]),\n  \"f32.const\": sign([f32], [f32]),\n  \"f64.const\": sign([f64], [f64]),\n  \"i32.eqz\": sign([i32], [i32]),\n  \"i32.eq\": sign([i32, i32], [i32]),\n  \"i32.ne\": sign([i32, i32], [i32]),\n  \"i32.lt_s\": sign([i32, i32], [i32]),\n  \"i32.lt_u\": sign([i32, i32], [i32]),\n  \"i32.gt_s\": sign([i32, i32], [i32]),\n  \"i32.gt_u\": sign([i32, i32], [i32]),\n  \"i32.le_s\": sign([i32, i32], [i32]),\n  \"i32.le_u\": sign([i32, i32], [i32]),\n  \"i32.ge_s\": sign([i32, i32], [i32]),\n  \"i32.ge_u\": sign([i32, i32], [i32]),\n  \"i64.eqz\": sign([i64], [i64]),\n  \"i64.eq\": sign([i64, i64], [i32]),\n  \"i64.ne\": sign([i64, i64], [i32]),\n  \"i64.lt_s\": sign([i64, i64], [i32]),\n  \"i64.lt_u\": sign([i64, i64], [i32]),\n  \"i64.gt_s\": sign([i64, i64], [i32]),\n  \"i64.gt_u\": sign([i64, i64], [i32]),\n  \"i64.le_s\": sign([i64, i64], [i32]),\n  \"i64.le_u\": sign([i64, i64], [i32]),\n  \"i64.ge_s\": sign([i64, i64], [i32]),\n  \"i64.ge_u\": sign([i64, i64], [i32]),\n  \"f32.eq\": sign([f32, f32], [i32]),\n  \"f32.ne\": sign([f32, f32], [i32]),\n  \"f32.lt\": sign([f32, f32], [i32]),\n  \"f32.gt\": sign([f32, f32], [i32]),\n  \"f32.le\": sign([f32, f32], [i32]),\n  \"f32.ge\": sign([f32, f32], [i32]),\n  \"f64.eq\": sign([f64, f64], [i32]),\n  \"f64.ne\": sign([f64, f64], [i32]),\n  \"f64.lt\": sign([f64, f64], [i32]),\n  \"f64.gt\": sign([f64, f64], [i32]),\n  \"f64.le\": sign([f64, f64], [i32]),\n  \"f64.ge\": sign([f64, f64], [i32]),\n  \"i32.clz\": sign([i32], [i32]),\n  \"i32.ctz\": sign([i32], [i32]),\n  \"i32.popcnt\": sign([i32], [i32]),\n  \"i32.add\": sign([i32, i32], [i32]),\n  \"i32.sub\": sign([i32, i32], [i32]),\n  \"i32.mul\": sign([i32, i32], [i32]),\n  \"i32.div_s\": sign([i32, i32], [i32]),\n  \"i32.div_u\": sign([i32, i32], [i32]),\n  \"i32.rem_s\": sign([i32, i32], [i32]),\n  \"i32.rem_u\": sign([i32, i32], [i32]),\n  \"i32.and\": sign([i32, i32], [i32]),\n  \"i32.or\": sign([i32, i32], [i32]),\n  \"i32.xor\": sign([i32, i32], [i32]),\n  \"i32.shl\": sign([i32, i32], [i32]),\n  \"i32.shr_s\": sign([i32, i32], [i32]),\n  \"i32.shr_u\": sign([i32, i32], [i32]),\n  \"i32.rotl\": sign([i32, i32], [i32]),\n  \"i32.rotr\": sign([i32, i32], [i32]),\n  \"i64.clz\": sign([i64], [i64]),\n  \"i64.ctz\": sign([i64], [i64]),\n  \"i64.popcnt\": sign([i64], [i64]),\n  \"i64.add\": sign([i64, i64], [i64]),\n  \"i64.sub\": sign([i64, i64], [i64]),\n  \"i64.mul\": sign([i64, i64], [i64]),\n  \"i64.div_s\": sign([i64, i64], [i64]),\n  \"i64.div_u\": sign([i64, i64], [i64]),\n  \"i64.rem_s\": sign([i64, i64], [i64]),\n  \"i64.rem_u\": sign([i64, i64], [i64]),\n  \"i64.and\": sign([i64, i64], [i64]),\n  \"i64.or\": sign([i64, i64], [i64]),\n  \"i64.xor\": sign([i64, i64], [i64]),\n  \"i64.shl\": sign([i64, i64], [i64]),\n  \"i64.shr_s\": sign([i64, i64], [i64]),\n  \"i64.shr_u\": sign([i64, i64], [i64]),\n  \"i64.rotl\": sign([i64, i64], [i64]),\n  \"i64.rotr\": sign([i64, i64], [i64]),\n  \"f32.abs\": sign([f32], [f32]),\n  \"f32.neg\": sign([f32], [f32]),\n  \"f32.ceil\": sign([f32], [f32]),\n  \"f32.floor\": sign([f32], [f32]),\n  \"f32.trunc\": sign([f32], [f32]),\n  \"f32.nearest\": sign([f32], [f32]),\n  \"f32.sqrt\": sign([f32], [f32]),\n  \"f32.add\": sign([f32, f32], [f32]),\n  \"f32.sub\": sign([f32, f32], [f32]),\n  \"f32.mul\": sign([f32, f32], [f32]),\n  \"f32.div\": sign([f32, f32], [f32]),\n  \"f32.min\": sign([f32, f32], [f32]),\n  \"f32.max\": sign([f32, f32], [f32]),\n  \"f32.copysign\": sign([f32, f32], [f32]),\n  \"f64.abs\": sign([f64], [f64]),\n  \"f64.neg\": sign([f64], [f64]),\n  \"f64.ceil\": sign([f64], [f64]),\n  \"f64.floor\": sign([f64], [f64]),\n  \"f64.trunc\": sign([f64], [f64]),\n  \"f64.nearest\": sign([f64], [f64]),\n  \"f64.sqrt\": sign([f64], [f64]),\n  \"f64.add\": sign([f64, f64], [f64]),\n  \"f64.sub\": sign([f64, f64], [f64]),\n  \"f64.mul\": sign([f64, f64], [f64]),\n  \"f64.div\": sign([f64, f64], [f64]),\n  \"f64.min\": sign([f64, f64], [f64]),\n  \"f64.max\": sign([f64, f64], [f64]),\n  \"f64.copysign\": sign([f64, f64], [f64]),\n  \"i32.wrap/i64\": sign([i64], [i32]),\n  \"i32.trunc_s/f32\": sign([f32], [i32]),\n  \"i32.trunc_u/f32\": sign([f32], [i32]),\n  \"i32.trunc_s/f64\": sign([f32], [i32]),\n  \"i32.trunc_u/f64\": sign([f64], [i32]),\n  \"i64.extend_s/i32\": sign([i32], [i64]),\n  \"i64.extend_u/i32\": sign([i32], [i64]),\n  \"i64.trunc_s/f32\": sign([f32], [i64]),\n  \"i64.trunc_u/f32\": sign([f32], [i64]),\n  \"i64.trunc_s/f64\": sign([f64], [i64]),\n  \"i64.trunc_u/f64\": sign([f64], [i64]),\n  \"f32.convert_s/i32\": sign([i32], [f32]),\n  \"f32.convert_u/i32\": sign([i32], [f32]),\n  \"f32.convert_s/i64\": sign([i64], [f32]),\n  \"f32.convert_u/i64\": sign([i64], [f32]),\n  \"f32.demote/f64\": sign([f64], [f32]),\n  \"f64.convert_s/i32\": sign([i32], [f64]),\n  \"f64.convert_u/i32\": sign([i32], [f64]),\n  \"f64.convert_s/i64\": sign([i64], [f64]),\n  \"f64.convert_u/i64\": sign([i64], [f64]),\n  \"f64.promote/f32\": sign([f32], [f64]),\n  \"i32.reinterpret/f32\": sign([f32], [i32]),\n  \"i64.reinterpret/f64\": sign([f64], [i64]),\n  \"f32.reinterpret/i32\": sign([i32], [f32]),\n  \"f64.reinterpret/i64\": sign([i64], [f64])\n};\nexport var signatures = Object.assign({}, controlInstructions, parametricInstructions, variableInstructions, memoryInstructions, numericInstructions);","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// TODO(sven): add flow in here\nimport { isSignature, isNumberLiteral } from \"../../nodes.js\";\nexport function moduleContextFromModuleAST(m) {\n  var moduleContext = new ModuleContext();\n\n  if (!(m.type === \"Module\")) {\n    throw new Error('m.type === \"Module\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  m.fields.forEach(function (field) {\n    switch (field.type) {\n      case \"Start\":\n        {\n          moduleContext.setStart(field.index);\n          break;\n        }\n\n      case \"TypeInstruction\":\n        {\n          moduleContext.addType(field);\n          break;\n        }\n\n      case \"Func\":\n        {\n          moduleContext.addFunction(field);\n          break;\n        }\n\n      case \"Global\":\n        {\n          moduleContext.defineGlobal(field);\n          break;\n        }\n\n      case \"ModuleImport\":\n        {\n          switch (field.descr.type) {\n            case \"GlobalType\":\n              {\n                moduleContext.importGlobal(field.descr.valtype, field.descr.mutability);\n                break;\n              }\n\n            case \"Memory\":\n              {\n                moduleContext.addMemory(field.descr.limits.min, field.descr.limits.max);\n                break;\n              }\n\n            case \"FuncImportDescr\":\n              {\n                moduleContext.importFunction(field.descr);\n                break;\n              }\n\n            case \"Table\":\n              {\n                // FIXME(sven): not implemented yet\n                break;\n              }\n\n            default:\n              throw new Error(\"Unsupported ModuleImport of type \" + JSON.stringify(field.descr.type));\n          }\n\n          break;\n        }\n\n      case \"Memory\":\n        {\n          moduleContext.addMemory(field.limits.min, field.limits.max);\n          break;\n        }\n    }\n  });\n  return moduleContext;\n}\n/**\n * Module context for type checking\n */\n\nexport var ModuleContext =\n/*#__PURE__*/\nfunction () {\n  function ModuleContext() {\n    _classCallCheck(this, ModuleContext);\n\n    this.funcs = [];\n    this.funcsOffsetByIdentifier = [];\n    this.types = [];\n    this.globals = [];\n    this.globalsOffsetByIdentifier = [];\n    this.mems = []; // Current stack frame\n\n    this.locals = [];\n    this.labels = [];\n    this.return = [];\n    this.debugName = \"unknown\";\n    this.start = null;\n  }\n  /**\n   * Set start segment\n   */\n\n\n  _createClass(ModuleContext, [{\n    key: \"setStart\",\n    value: function setStart(index) {\n      this.start = index.value;\n    }\n    /**\n     * Get start function\n     */\n\n  }, {\n    key: \"getStart\",\n    value: function getStart() {\n      return this.start;\n    }\n    /**\n     * Reset the active stack frame\n     */\n\n  }, {\n    key: \"newContext\",\n    value: function newContext(debugName, expectedResult) {\n      this.locals = [];\n      this.labels = [expectedResult];\n      this.return = expectedResult;\n      this.debugName = debugName;\n    }\n    /**\n     * Functions\n     */\n\n  }, {\n    key: \"addFunction\",\n    value: function addFunction(func\n    /*: Func*/\n    ) {\n      // eslint-disable-next-line prefer-const\n      var _ref = func.signature || {},\n          _ref$params = _ref.params,\n          args = _ref$params === void 0 ? [] : _ref$params,\n          _ref$results = _ref.results,\n          result = _ref$results === void 0 ? [] : _ref$results;\n\n      args = args.map(function (arg) {\n        return arg.valtype;\n      });\n      this.funcs.push({\n        args: args,\n        result: result\n      });\n\n      if (typeof func.name !== \"undefined\") {\n        this.funcsOffsetByIdentifier[func.name.value] = this.funcs.length - 1;\n      }\n    }\n  }, {\n    key: \"importFunction\",\n    value: function importFunction(funcimport) {\n      if (isSignature(funcimport.signature)) {\n        // eslint-disable-next-line prefer-const\n        var _funcimport$signature = funcimport.signature,\n            args = _funcimport$signature.params,\n            result = _funcimport$signature.results;\n        args = args.map(function (arg) {\n          return arg.valtype;\n        });\n        this.funcs.push({\n          args: args,\n          result: result\n        });\n      } else {\n        if (!isNumberLiteral(funcimport.signature)) {\n          throw new Error('isNumberLiteral(funcimport.signature)' + \" error: \" + (undefined || \"unknown\"));\n        }\n\n        var typeId = funcimport.signature.value;\n\n        if (!this.hasType(typeId)) {\n          throw new Error('this.hasType(typeId)' + \" error: \" + (undefined || \"unknown\"));\n        }\n\n        var signature = this.getType(typeId);\n        this.funcs.push({\n          args: signature.params.map(function (arg) {\n            return arg.valtype;\n          }),\n          result: signature.results\n        });\n      }\n\n      if (typeof funcimport.id !== \"undefined\") {\n        // imports are first, we can assume their index in the array\n        this.funcsOffsetByIdentifier[funcimport.id.value] = this.funcs.length - 1;\n      }\n    }\n  }, {\n    key: \"hasFunction\",\n    value: function hasFunction(index) {\n      return typeof this.getFunction(index) !== \"undefined\";\n    }\n  }, {\n    key: \"getFunction\",\n    value: function getFunction(index) {\n      if (typeof index !== \"number\") {\n        throw new Error(\"getFunction only supported for number index\");\n      }\n\n      return this.funcs[index];\n    }\n  }, {\n    key: \"getFunctionOffsetByIdentifier\",\n    value: function getFunctionOffsetByIdentifier(name) {\n      if (!(typeof name === \"string\")) {\n        throw new Error('typeof name === \"string\"' + \" error: \" + (undefined || \"unknown\"));\n      }\n\n      return this.funcsOffsetByIdentifier[name];\n    }\n    /**\n     * Labels\n     */\n\n  }, {\n    key: \"addLabel\",\n    value: function addLabel(result) {\n      this.labels.unshift(result);\n    }\n  }, {\n    key: \"hasLabel\",\n    value: function hasLabel(index) {\n      return this.labels.length > index && index >= 0;\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(index) {\n      return this.labels[index];\n    }\n  }, {\n    key: \"popLabel\",\n    value: function popLabel() {\n      this.labels.shift();\n    }\n    /**\n     * Locals\n     */\n\n  }, {\n    key: \"hasLocal\",\n    value: function hasLocal(index) {\n      return typeof this.getLocal(index) !== \"undefined\";\n    }\n  }, {\n    key: \"getLocal\",\n    value: function getLocal(index) {\n      return this.locals[index];\n    }\n  }, {\n    key: \"addLocal\",\n    value: function addLocal(type) {\n      this.locals.push(type);\n    }\n    /**\n     * Types\n     */\n\n  }, {\n    key: \"addType\",\n    value: function addType(type) {\n      if (!(type.functype.type === \"Signature\")) {\n        throw new Error('type.functype.type === \"Signature\"' + \" error: \" + (undefined || \"unknown\"));\n      }\n\n      this.types.push(type.functype);\n    }\n  }, {\n    key: \"hasType\",\n    value: function hasType(index) {\n      return this.types[index] !== undefined;\n    }\n  }, {\n    key: \"getType\",\n    value: function getType(index) {\n      return this.types[index];\n    }\n    /**\n     * Globals\n     */\n\n  }, {\n    key: \"hasGlobal\",\n    value: function hasGlobal(index) {\n      return this.globals.length > index && index >= 0;\n    }\n  }, {\n    key: \"getGlobal\",\n    value: function getGlobal(index) {\n      return this.globals[index].type;\n    }\n  }, {\n    key: \"getGlobalOffsetByIdentifier\",\n    value: function getGlobalOffsetByIdentifier(name) {\n      if (!(typeof name === \"string\")) {\n        throw new Error('typeof name === \"string\"' + \" error: \" + (undefined || \"unknown\"));\n      }\n\n      return this.globalsOffsetByIdentifier[name];\n    }\n  }, {\n    key: \"defineGlobal\",\n    value: function defineGlobal(global\n    /*: Global*/\n    ) {\n      var type = global.globalType.valtype;\n      var mutability = global.globalType.mutability;\n      this.globals.push({\n        type: type,\n        mutability: mutability\n      });\n\n      if (typeof global.name !== \"undefined\") {\n        this.globalsOffsetByIdentifier[global.name.value] = this.globals.length - 1;\n      }\n    }\n  }, {\n    key: \"importGlobal\",\n    value: function importGlobal(type, mutability) {\n      this.globals.push({\n        type: type,\n        mutability: mutability\n      });\n    }\n  }, {\n    key: \"isMutableGlobal\",\n    value: function isMutableGlobal(index) {\n      return this.globals[index].mutability === \"var\";\n    }\n  }, {\n    key: \"isImmutableGlobal\",\n    value: function isImmutableGlobal(index) {\n      return this.globals[index].mutability === \"const\";\n    }\n    /**\n     * Memories\n     */\n\n  }, {\n    key: \"hasMemory\",\n    value: function hasMemory(index) {\n      return this.mems.length > index && index >= 0;\n    }\n  }, {\n    key: \"addMemory\",\n    value: function addMemory(min, max) {\n      this.mems.push({\n        min: min,\n        max: max\n      });\n    }\n  }, {\n    key: \"getMemory\",\n    value: function getMemory(index) {\n      return this.mems[index];\n    }\n  }]);\n\n  return ModuleContext;\n}();","import { createPath } from \"./node-path\";\nimport { unionTypesMap, nodeAndUnionTypes } from \"./nodes\"; // recursively walks the AST starting at the given node. The callback is invoked for\n// and object that has a 'type' property.\n\nfunction walk(context, callback) {\n  var stop = false;\n\n  function innerWalk(context, callback) {\n    if (stop) {\n      return;\n    }\n\n    var node = context.node;\n\n    if (node === undefined) {\n      console.warn(\"traversing with an empty context\");\n      return;\n    }\n\n    if (node._deleted === true) {\n      return;\n    }\n\n    var path = createPath(context);\n    callback(node.type, path);\n\n    if (path.shouldStop) {\n      stop = true;\n      return;\n    }\n\n    Object.keys(node).forEach(function (prop) {\n      var value = node[prop];\n\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      var valueAsArray = Array.isArray(value) ? value : [value];\n      valueAsArray.forEach(function (childNode) {\n        if (typeof childNode.type === \"string\") {\n          var childContext = {\n            node: childNode,\n            parentKey: prop,\n            parentPath: path,\n            shouldStop: false,\n            inList: Array.isArray(value)\n          };\n          innerWalk(childContext, callback);\n        }\n      });\n    });\n  }\n\n  innerWalk(context, callback);\n}\n\nvar noop = function noop() {};\n\nexport function traverse(node, visitors) {\n  var before = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n  var after = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;\n  Object.keys(visitors).forEach(function (visitor) {\n    if (!nodeAndUnionTypes.includes(visitor)) {\n      throw new Error(\"Unexpected visitor \".concat(visitor));\n    }\n  });\n  var context = {\n    node: node,\n    inList: false,\n    shouldStop: false,\n    parentPath: null,\n    parentKey: null\n  };\n  walk(context, function (type, path) {\n    if (typeof visitors[type] === \"function\") {\n      before(type, path);\n      visitors[type](path);\n      after(type, path);\n    }\n\n    var unionTypes = unionTypesMap[type];\n\n    if (!unionTypes) {\n      throw new Error(\"Unexpected node type \".concat(type));\n    }\n\n    unionTypes.forEach(function (unionType) {\n      if (typeof visitors[unionType] === \"function\") {\n        before(unionType, path);\n        visitors[unionType](path);\n        after(unionType, path);\n      }\n    });\n  });\n}","function _sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return _sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { signatures } from \"./signatures\";\nimport { traverse } from \"./traverse\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\nexport function isAnonymous(ident) {\n  return ident.raw === \"\";\n}\nexport function getSectionMetadata(ast, name) {\n  var section;\n  traverse(ast, {\n    SectionMetadata: function (_SectionMetadata) {\n      function SectionMetadata(_x) {\n        return _SectionMetadata.apply(this, arguments);\n      }\n\n      SectionMetadata.toString = function () {\n        return _SectionMetadata.toString();\n      };\n\n      return SectionMetadata;\n    }(function (_ref) {\n      var node = _ref.node;\n\n      if (node.section === name) {\n        section = node;\n      }\n    })\n  });\n  return section;\n}\nexport function getSectionMetadatas(ast, name) {\n  var sections = [];\n  traverse(ast, {\n    SectionMetadata: function (_SectionMetadata2) {\n      function SectionMetadata(_x2) {\n        return _SectionMetadata2.apply(this, arguments);\n      }\n\n      SectionMetadata.toString = function () {\n        return _SectionMetadata2.toString();\n      };\n\n      return SectionMetadata;\n    }(function (_ref2) {\n      var node = _ref2.node;\n\n      if (node.section === name) {\n        sections.push(node);\n      }\n    })\n  });\n  return sections;\n}\nexport function sortSectionMetadata(m) {\n  if (m.metadata == null) {\n    console.warn(\"sortSectionMetadata: no metadata to sort\");\n    return;\n  } // $FlowIgnore\n\n\n  m.metadata.sections.sort(function (a, b) {\n    var aId = constants.sections[a.section];\n    var bId = constants.sections[b.section];\n\n    if (typeof aId !== \"number\" || typeof bId !== \"number\") {\n      throw new Error(\"Section id not found\");\n    }\n\n    return aId - bId;\n  });\n}\nexport function orderedInsertNode(m, n) {\n  assertHasLoc(n);\n  var didInsert = false;\n\n  if (n.type === \"ModuleExport\") {\n    m.fields.push(n);\n    return;\n  }\n\n  m.fields = m.fields.reduce(function (acc, field) {\n    var fieldEndCol = Infinity;\n\n    if (field.loc != null) {\n      // $FlowIgnore\n      fieldEndCol = field.loc.end.column;\n    } // $FlowIgnore: assertHasLoc ensures that\n\n\n    if (didInsert === false && n.loc.start.column < fieldEndCol) {\n      didInsert = true;\n      acc.push(n);\n    }\n\n    acc.push(field);\n    return acc;\n  }, []); // Handles empty modules or n is the last element\n\n  if (didInsert === false) {\n    m.fields.push(n);\n  }\n}\nexport function assertHasLoc(n) {\n  if (n.loc == null || n.loc.start == null || n.loc.end == null) {\n    throw new Error(\"Internal failure: node (\".concat(JSON.stringify(n.type), \") has no location information\"));\n  }\n}\nexport function getEndOfSection(s) {\n  assertHasLoc(s.size);\n  return s.startOffset + s.size.value + ( // $FlowIgnore\n  s.size.loc.end.column - s.size.loc.start.column);\n}\nexport function shiftLoc(node, delta) {\n  // $FlowIgnore\n  node.loc.start.column += delta; // $FlowIgnore\n\n  node.loc.end.column += delta;\n}\nexport function shiftSection(ast, node, delta) {\n  if (node.type !== \"SectionMetadata\") {\n    throw new Error(\"Can not shift node \" + JSON.stringify(node.type));\n  }\n\n  node.startOffset += delta;\n\n  if (_typeof(node.size.loc) === \"object\") {\n    shiftLoc(node.size, delta);\n  } // Custom sections doesn't have vectorOfSize\n\n\n  if (_typeof(node.vectorOfSize) === \"object\" && _typeof(node.vectorOfSize.loc) === \"object\") {\n    shiftLoc(node.vectorOfSize, delta);\n  }\n\n  var sectionName = node.section; // shift node locations within that section\n\n  traverse(ast, {\n    Node: function Node(_ref3) {\n      var node = _ref3.node;\n      var section = getSectionForNode(node);\n\n      if (section === sectionName && _typeof(node.loc) === \"object\") {\n        shiftLoc(node, delta);\n      }\n    }\n  });\n}\nexport function signatureForOpcode(object, name) {\n  var opcodeName = name;\n\n  if (object !== undefined && object !== \"\") {\n    opcodeName = object + \".\" + name;\n  }\n\n  var sign = signatures[opcodeName];\n\n  if (sign == undefined) {\n    // TODO: Uncomment this when br_table and others has been done\n    //throw new Error(\"Invalid opcode: \"+opcodeName);\n    return [object, object];\n  }\n\n  return sign[0];\n}\nexport function getUniqueNameGenerator() {\n  var inc = {};\n  return function () {\n    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"temp\";\n\n    if (!(prefix in inc)) {\n      inc[prefix] = 0;\n    } else {\n      inc[prefix] = inc[prefix] + 1;\n    }\n\n    return prefix + \"_\" + inc[prefix];\n  };\n}\nexport function getStartByteOffset(n) {\n  // $FlowIgnore\n  if (typeof n.loc === \"undefined\" || typeof n.loc.start === \"undefined\") {\n    throw new Error( // $FlowIgnore\n    \"Can not get byte offset without loc informations, node: \" + String(n.id));\n  }\n\n  return n.loc.start.column;\n}\nexport function getEndByteOffset(n) {\n  // $FlowIgnore\n  if (typeof n.loc === \"undefined\" || typeof n.loc.end === \"undefined\") {\n    throw new Error(\"Can not get byte offset without loc informations, node: \" + n.type);\n  }\n\n  return n.loc.end.column;\n}\nexport function getFunctionBeginingByteOffset(n) {\n  if (!(n.body.length > 0)) {\n    throw new Error('n.body.length > 0' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var _n$body = _slicedToArray(n.body, 1),\n      firstInstruction = _n$body[0];\n\n  return getStartByteOffset(firstInstruction);\n}\nexport function getEndBlockByteOffset(n) {\n  // $FlowIgnore\n  if (!(n.instr.length > 0 || n.body.length > 0)) {\n    throw new Error('n.instr.length > 0 || n.body.length > 0' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var lastInstruction;\n\n  if (n.instr) {\n    // $FlowIgnore\n    lastInstruction = n.instr[n.instr.length - 1];\n  }\n\n  if (n.body) {\n    // $FlowIgnore\n    lastInstruction = n.body[n.body.length - 1];\n  }\n\n  if (!(_typeof(lastInstruction) === \"object\")) {\n    throw new Error('typeof lastInstruction === \"object\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  return getStartByteOffset(lastInstruction);\n}\nexport function getStartBlockByteOffset(n) {\n  // $FlowIgnore\n  if (!(n.instr.length > 0 || n.body.length > 0)) {\n    throw new Error('n.instr.length > 0 || n.body.length > 0' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var fistInstruction;\n\n  if (n.instr) {\n    // $FlowIgnore\n    var _n$instr = _slicedToArray(n.instr, 1);\n\n    fistInstruction = _n$instr[0];\n  }\n\n  if (n.body) {\n    // $FlowIgnore\n    var _n$body2 = _slicedToArray(n.body, 1);\n\n    fistInstruction = _n$body2[0];\n  }\n\n  if (!(_typeof(fistInstruction) === \"object\")) {\n    throw new Error('typeof fistInstruction === \"object\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  return getStartByteOffset(fistInstruction);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloneNode = cloneNode;\n\nfunction cloneNode(n) {\n  return Object.assign({}, n);\n}","export default function parse(input) {\n  input = input.toUpperCase();\n  var splitIndex = input.indexOf(\"P\");\n  var mantissa, exponent;\n\n  if (splitIndex !== -1) {\n    mantissa = input.substring(0, splitIndex);\n    exponent = parseInt(input.substring(splitIndex + 1));\n  } else {\n    mantissa = input;\n    exponent = 0;\n  }\n\n  var dotIndex = mantissa.indexOf(\".\");\n\n  if (dotIndex !== -1) {\n    var integerPart = parseInt(mantissa.substring(0, dotIndex), 16);\n    var sign = Math.sign(integerPart);\n    integerPart = sign * integerPart;\n    var fractionLength = mantissa.length - dotIndex - 1;\n    var fractionalPart = parseInt(mantissa.substring(dotIndex + 1), 16);\n    var fraction = fractionLength > 0 ? fractionalPart / Math.pow(16, fractionLength) : 0;\n\n    if (sign === 0) {\n      if (fraction === 0) {\n        mantissa = sign;\n      } else {\n        if (Object.is(sign, -0)) {\n          mantissa = -fraction;\n        } else {\n          mantissa = fraction;\n        }\n      }\n    } else {\n      mantissa = sign * (integerPart + fraction);\n    }\n  } else {\n    mantissa = parseInt(mantissa, 16);\n  }\n\n  return mantissa * (splitIndex !== -1 ? Math.pow(2, exponent) : 1);\n}","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nexport var RuntimeError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(RuntimeError, _Error);\n\n  function RuntimeError() {\n    _classCallCheck(this, RuntimeError);\n\n    return _possibleConstructorReturn(this, (RuntimeError.__proto__ || Object.getPrototypeOf(RuntimeError)).apply(this, arguments));\n  }\n\n  return RuntimeError;\n}(Error);\nexport var CompileError =\n/*#__PURE__*/\nfunction (_Error2) {\n  _inherits(CompileError, _Error2);\n\n  function CompileError() {\n    _classCallCheck(this, CompileError);\n\n    return _possibleConstructorReturn(this, (CompileError.__proto__ || Object.getPrototypeOf(CompileError)).apply(this, arguments));\n  }\n\n  return CompileError;\n}(Error);\nexport var LinkError =\n/*#__PURE__*/\nfunction (_Error3) {\n  _inherits(LinkError, _Error3);\n\n  function LinkError() {\n    _classCallCheck(this, LinkError);\n\n    return _possibleConstructorReturn(this, (LinkError.__proto__ || Object.getPrototypeOf(LinkError)).apply(this, arguments));\n  }\n\n  return LinkError;\n}(Error);","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction concatUint8Arrays() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  var totalLength = arrays.reduce(function (a, b) {\n    return a + b.length;\n  }, 0);\n  var result = new Uint8Array(totalLength);\n  var offset = 0;\n\n  for (var _i = 0; _i < arrays.length; _i++) {\n    var arr = arrays[_i];\n\n    if (arr instanceof Uint8Array === false) {\n      throw new Error(\"arr must be of type Uint8Array\");\n    }\n\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n\n  return result;\n}\n\nexport function overrideBytesInBuffer(buffer, startLoc, endLoc, newBytes) {\n  var beforeBytes = buffer.slice(0, startLoc);\n  var afterBytes = buffer.slice(endLoc, buffer.length); // replacement is empty, we can omit it\n\n  if (newBytes.length === 0) {\n    return concatUint8Arrays(beforeBytes, afterBytes);\n  }\n\n  var replacement = Uint8Array.from(newBytes);\n  return concatUint8Arrays(beforeBytes, replacement, afterBytes);\n}\nexport function makeBuffer() {\n  for (var _len2 = arguments.length, splitedBytes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    splitedBytes[_key2] = arguments[_key2];\n  }\n\n  var bytes = [].concat.apply([], splitedBytes);\n  return new Uint8Array(bytes).buffer;\n}\nexport function fromHexdump(str) {\n  var lines = str.split(\"\\n\"); // remove any leading left whitespace\n\n  lines = lines.map(function (line) {\n    return line.trim();\n  });\n  var bytes = lines.reduce(function (acc, line) {\n    var cols = line.split(\" \"); // remove the offset, left column\n\n    cols.shift();\n    cols = cols.filter(function (x) {\n      return x !== \"\";\n    });\n    var bytes = cols.map(function (x) {\n      return parseInt(x, 16);\n    });\n    acc.push.apply(acc, _toConsumableArray(bytes));\n    return acc;\n  }, []);\n  return Buffer.from(bytes);\n}","import Long from \"@xtuc/long\";\nimport parseHexFloat from \"@webassemblyjs/floating-point-hex-parser\";\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\nexport function parse32F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x400000);\n  }\n\n  return parseFloat(sourceString);\n}\nexport function parse64F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x8000000000000);\n  }\n\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n\n  return parseFloat(sourceString);\n}\nexport function parse32I(sourceString) {\n  var value = 0;\n\n  if (isHexLiteral(sourceString)) {\n    value = ~~parseInt(sourceString, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    value = parseInt(sourceString, 10);\n  }\n\n  return value;\n}\nexport function parseU32(sourceString) {\n  var value = parse32I(sourceString);\n\n  if (value < 0) {\n    throw new CompileError(\"Illegal value for u32: \" + sourceString);\n  }\n\n  return value;\n}\nexport function parse64I(sourceString) {\n  var long;\n\n  if (isHexLiteral(sourceString)) {\n    long = Long.fromString(sourceString, false, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    long = Long.fromString(sourceString);\n  }\n\n  return {\n    high: long.high,\n    low: long.low\n  };\n}\nvar NAN_WORD = /^\\+?-?nan/;\nvar INF_WORD = /^\\+?-?inf/;\nexport function isInfLiteral(sourceString) {\n  return INF_WORD.test(sourceString.toLowerCase());\n}\nexport function isNanLiteral(sourceString) {\n  return NAN_WORD.test(sourceString.toLowerCase());\n}\n\nfunction isDecimalExponentLiteral(sourceString) {\n  return !isHexLiteral(sourceString) && sourceString.toUpperCase().includes(\"E\");\n}\n\nfunction isHexLiteral(sourceString) {\n  return sourceString.substring(0, 2).toUpperCase() === \"0X\" || sourceString.substring(0, 3).toUpperCase() === \"-0X\";\n}","var illegalop = \"illegal\";\nvar magicModuleHeader = [0x00, 0x61, 0x73, 0x6d];\nvar moduleVersion = [0x01, 0x00, 0x00, 0x00];\n\nfunction invertMap(obj) {\n  var keyModifierFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (k) {\n    return k;\n  };\n  var result = {};\n  var keys = Object.keys(obj);\n\n  for (var i = 0, length = keys.length; i < length; i++) {\n    result[keyModifierFn(obj[keys[i]])] = keys[i];\n  }\n\n  return result;\n}\n\nfunction createSymbolObject(name\n/*: string */\n, object\n/*: string */\n)\n/*: Symbol*/\n{\n  var numberOfArgs\n  /*: number*/\n  = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return {\n    name: name,\n    object: object,\n    numberOfArgs: numberOfArgs\n  };\n}\n\nfunction createSymbol(name\n/*: string */\n)\n/*: Symbol*/\n{\n  var numberOfArgs\n  /*: number*/\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return {\n    name: name,\n    numberOfArgs: numberOfArgs\n  };\n}\n\nvar types = {\n  func: 0x60,\n  result: 0x40\n};\nvar exportTypes = {\n  0x00: \"Func\",\n  0x01: \"Table\",\n  0x02: \"Mem\",\n  0x03: \"Global\"\n};\nvar exportTypesByName = invertMap(exportTypes);\nvar valtypes = {\n  0x7f: \"i32\",\n  0x7e: \"i64\",\n  0x7d: \"f32\",\n  0x7c: \"f64\",\n  0x7b: \"v128\"\n};\nvar valtypesByString = invertMap(valtypes);\nvar tableTypes = {\n  0x70: \"anyfunc\"\n};\nvar blockTypes = Object.assign({}, valtypes, {\n  // https://webassembly.github.io/spec/core/binary/types.html#binary-blocktype\n  0x40: null,\n  // https://webassembly.github.io/spec/core/binary/types.html#binary-valtype\n  0x7f: \"i32\",\n  0x7e: \"i64\",\n  0x7d: \"f32\",\n  0x7c: \"f64\"\n});\nvar globalTypes = {\n  0x00: \"const\",\n  0x01: \"var\"\n};\nvar globalTypesByString = invertMap(globalTypes);\nvar importTypes = {\n  0x00: \"func\",\n  0x01: \"table\",\n  0x02: \"mem\",\n  0x03: \"global\"\n};\nvar sections = {\n  custom: 0,\n  type: 1,\n  import: 2,\n  func: 3,\n  table: 4,\n  memory: 5,\n  global: 6,\n  export: 7,\n  start: 8,\n  element: 9,\n  code: 10,\n  data: 11\n};\nvar symbolsByByte = {\n  0x00: createSymbol(\"unreachable\"),\n  0x01: createSymbol(\"nop\"),\n  0x02: createSymbol(\"block\"),\n  0x03: createSymbol(\"loop\"),\n  0x04: createSymbol(\"if\"),\n  0x05: createSymbol(\"else\"),\n  0x06: illegalop,\n  0x07: illegalop,\n  0x08: illegalop,\n  0x09: illegalop,\n  0x0a: illegalop,\n  0x0b: createSymbol(\"end\"),\n  0x0c: createSymbol(\"br\", 1),\n  0x0d: createSymbol(\"br_if\", 1),\n  0x0e: createSymbol(\"br_table\"),\n  0x0f: createSymbol(\"return\"),\n  0x10: createSymbol(\"call\", 1),\n  0x11: createSymbol(\"call_indirect\", 2),\n  0x12: illegalop,\n  0x13: illegalop,\n  0x14: illegalop,\n  0x15: illegalop,\n  0x16: illegalop,\n  0x17: illegalop,\n  0x18: illegalop,\n  0x19: illegalop,\n  0x1a: createSymbol(\"drop\"),\n  0x1b: createSymbol(\"select\"),\n  0x1c: illegalop,\n  0x1d: illegalop,\n  0x1e: illegalop,\n  0x1f: illegalop,\n  0x20: createSymbol(\"get_local\", 1),\n  0x21: createSymbol(\"set_local\", 1),\n  0x22: createSymbol(\"tee_local\", 1),\n  0x23: createSymbol(\"get_global\", 1),\n  0x24: createSymbol(\"set_global\", 1),\n  0x25: illegalop,\n  0x26: illegalop,\n  0x27: illegalop,\n  0x28: createSymbolObject(\"load\", \"u32\", 1),\n  0x29: createSymbolObject(\"load\", \"u64\", 1),\n  0x2a: createSymbolObject(\"load\", \"f32\", 1),\n  0x2b: createSymbolObject(\"load\", \"f64\", 1),\n  0x2c: createSymbolObject(\"load8_s\", \"u32\", 1),\n  0x2d: createSymbolObject(\"load8_u\", \"u32\", 1),\n  0x2e: createSymbolObject(\"load16_s\", \"u32\", 1),\n  0x2f: createSymbolObject(\"load16_u\", \"u32\", 1),\n  0x30: createSymbolObject(\"load8_s\", \"u64\", 1),\n  0x31: createSymbolObject(\"load8_u\", \"u64\", 1),\n  0x32: createSymbolObject(\"load16_s\", \"u64\", 1),\n  0x33: createSymbolObject(\"load16_u\", \"u64\", 1),\n  0x34: createSymbolObject(\"load32_s\", \"u64\", 1),\n  0x35: createSymbolObject(\"load32_u\", \"u64\", 1),\n  0x36: createSymbolObject(\"store\", \"u32\", 1),\n  0x37: createSymbolObject(\"store\", \"u64\", 1),\n  0x38: createSymbolObject(\"store\", \"f32\", 1),\n  0x39: createSymbolObject(\"store\", \"f64\", 1),\n  0x3a: createSymbolObject(\"store8\", \"u32\", 1),\n  0x3b: createSymbolObject(\"store16\", \"u32\", 1),\n  0x3c: createSymbolObject(\"store8\", \"u64\", 1),\n  0x3d: createSymbolObject(\"store16\", \"u64\", 1),\n  0x3e: createSymbolObject(\"store32\", \"u64\", 1),\n  0x3f: createSymbolObject(\"current_memory\"),\n  0x40: createSymbolObject(\"grow_memory\"),\n  0x41: createSymbolObject(\"const\", \"i32\", 1),\n  0x42: createSymbolObject(\"const\", \"i64\", 1),\n  0x43: createSymbolObject(\"const\", \"f32\", 1),\n  0x44: createSymbolObject(\"const\", \"f64\", 1),\n  0x45: createSymbolObject(\"eqz\", \"i32\"),\n  0x46: createSymbolObject(\"eq\", \"i32\"),\n  0x47: createSymbolObject(\"ne\", \"i32\"),\n  0x48: createSymbolObject(\"lt_s\", \"i32\"),\n  0x49: createSymbolObject(\"lt_u\", \"i32\"),\n  0x4a: createSymbolObject(\"gt_s\", \"i32\"),\n  0x4b: createSymbolObject(\"gt_u\", \"i32\"),\n  0x4c: createSymbolObject(\"le_s\", \"i32\"),\n  0x4d: createSymbolObject(\"le_u\", \"i32\"),\n  0x4e: createSymbolObject(\"ge_s\", \"i32\"),\n  0x4f: createSymbolObject(\"ge_u\", \"i32\"),\n  0x50: createSymbolObject(\"eqz\", \"i64\"),\n  0x51: createSymbolObject(\"eq\", \"i64\"),\n  0x52: createSymbolObject(\"ne\", \"i64\"),\n  0x53: createSymbolObject(\"lt_s\", \"i64\"),\n  0x54: createSymbolObject(\"lt_u\", \"i64\"),\n  0x55: createSymbolObject(\"gt_s\", \"i64\"),\n  0x56: createSymbolObject(\"gt_u\", \"i64\"),\n  0x57: createSymbolObject(\"le_s\", \"i64\"),\n  0x58: createSymbolObject(\"le_u\", \"i64\"),\n  0x59: createSymbolObject(\"ge_s\", \"i64\"),\n  0x5a: createSymbolObject(\"ge_u\", \"i64\"),\n  0x5b: createSymbolObject(\"eq\", \"f32\"),\n  0x5c: createSymbolObject(\"ne\", \"f32\"),\n  0x5d: createSymbolObject(\"lt\", \"f32\"),\n  0x5e: createSymbolObject(\"gt\", \"f32\"),\n  0x5f: createSymbolObject(\"le\", \"f32\"),\n  0x60: createSymbolObject(\"ge\", \"f32\"),\n  0x61: createSymbolObject(\"eq\", \"f64\"),\n  0x62: createSymbolObject(\"ne\", \"f64\"),\n  0x63: createSymbolObject(\"lt\", \"f64\"),\n  0x64: createSymbolObject(\"gt\", \"f64\"),\n  0x65: createSymbolObject(\"le\", \"f64\"),\n  0x66: createSymbolObject(\"ge\", \"f64\"),\n  0x67: createSymbolObject(\"clz\", \"i32\"),\n  0x68: createSymbolObject(\"ctz\", \"i32\"),\n  0x69: createSymbolObject(\"popcnt\", \"i32\"),\n  0x6a: createSymbolObject(\"add\", \"i32\"),\n  0x6b: createSymbolObject(\"sub\", \"i32\"),\n  0x6c: createSymbolObject(\"mul\", \"i32\"),\n  0x6d: createSymbolObject(\"div_s\", \"i32\"),\n  0x6e: createSymbolObject(\"div_u\", \"i32\"),\n  0x6f: createSymbolObject(\"rem_s\", \"i32\"),\n  0x70: createSymbolObject(\"rem_u\", \"i32\"),\n  0x71: createSymbolObject(\"and\", \"i32\"),\n  0x72: createSymbolObject(\"or\", \"i32\"),\n  0x73: createSymbolObject(\"xor\", \"i32\"),\n  0x74: createSymbolObject(\"shl\", \"i32\"),\n  0x75: createSymbolObject(\"shr_s\", \"i32\"),\n  0x76: createSymbolObject(\"shr_u\", \"i32\"),\n  0x77: createSymbolObject(\"rotl\", \"i32\"),\n  0x78: createSymbolObject(\"rotr\", \"i32\"),\n  0x79: createSymbolObject(\"clz\", \"i64\"),\n  0x7a: createSymbolObject(\"ctz\", \"i64\"),\n  0x7b: createSymbolObject(\"popcnt\", \"i64\"),\n  0x7c: createSymbolObject(\"add\", \"i64\"),\n  0x7d: createSymbolObject(\"sub\", \"i64\"),\n  0x7e: createSymbolObject(\"mul\", \"i64\"),\n  0x7f: createSymbolObject(\"div_s\", \"i64\"),\n  0x80: createSymbolObject(\"div_u\", \"i64\"),\n  0x81: createSymbolObject(\"rem_s\", \"i64\"),\n  0x82: createSymbolObject(\"rem_u\", \"i64\"),\n  0x83: createSymbolObject(\"and\", \"i64\"),\n  0x84: createSymbolObject(\"or\", \"i64\"),\n  0x85: createSymbolObject(\"xor\", \"i64\"),\n  0x86: createSymbolObject(\"shl\", \"i64\"),\n  0x87: createSymbolObject(\"shr_s\", \"i64\"),\n  0x88: createSymbolObject(\"shr_u\", \"i64\"),\n  0x89: createSymbolObject(\"rotl\", \"i64\"),\n  0x8a: createSymbolObject(\"rotr\", \"i64\"),\n  0x8b: createSymbolObject(\"abs\", \"f32\"),\n  0x8c: createSymbolObject(\"neg\", \"f32\"),\n  0x8d: createSymbolObject(\"ceil\", \"f32\"),\n  0x8e: createSymbolObject(\"floor\", \"f32\"),\n  0x8f: createSymbolObject(\"trunc\", \"f32\"),\n  0x90: createSymbolObject(\"nearest\", \"f32\"),\n  0x91: createSymbolObject(\"sqrt\", \"f32\"),\n  0x92: createSymbolObject(\"add\", \"f32\"),\n  0x93: createSymbolObject(\"sub\", \"f32\"),\n  0x94: createSymbolObject(\"mul\", \"f32\"),\n  0x95: createSymbolObject(\"div\", \"f32\"),\n  0x96: createSymbolObject(\"min\", \"f32\"),\n  0x97: createSymbolObject(\"max\", \"f32\"),\n  0x98: createSymbolObject(\"copysign\", \"f32\"),\n  0x99: createSymbolObject(\"abs\", \"f64\"),\n  0x9a: createSymbolObject(\"neg\", \"f64\"),\n  0x9b: createSymbolObject(\"ceil\", \"f64\"),\n  0x9c: createSymbolObject(\"floor\", \"f64\"),\n  0x9d: createSymbolObject(\"trunc\", \"f64\"),\n  0x9e: createSymbolObject(\"nearest\", \"f64\"),\n  0x9f: createSymbolObject(\"sqrt\", \"f64\"),\n  0xa0: createSymbolObject(\"add\", \"f64\"),\n  0xa1: createSymbolObject(\"sub\", \"f64\"),\n  0xa2: createSymbolObject(\"mul\", \"f64\"),\n  0xa3: createSymbolObject(\"div\", \"f64\"),\n  0xa4: createSymbolObject(\"min\", \"f64\"),\n  0xa5: createSymbolObject(\"max\", \"f64\"),\n  0xa6: createSymbolObject(\"copysign\", \"f64\"),\n  0xa7: createSymbolObject(\"wrap/i64\", \"i32\"),\n  0xa8: createSymbolObject(\"trunc_s/f32\", \"i32\"),\n  0xa9: createSymbolObject(\"trunc_u/f32\", \"i32\"),\n  0xaa: createSymbolObject(\"trunc_s/f64\", \"i32\"),\n  0xab: createSymbolObject(\"trunc_u/f64\", \"i32\"),\n  0xac: createSymbolObject(\"extend_s/i32\", \"i64\"),\n  0xad: createSymbolObject(\"extend_u/i32\", \"i64\"),\n  0xae: createSymbolObject(\"trunc_s/f32\", \"i64\"),\n  0xaf: createSymbolObject(\"trunc_u/f32\", \"i64\"),\n  0xb0: createSymbolObject(\"trunc_s/f64\", \"i64\"),\n  0xb1: createSymbolObject(\"trunc_u/f64\", \"i64\"),\n  0xb2: createSymbolObject(\"convert_s/i32\", \"f32\"),\n  0xb3: createSymbolObject(\"convert_u/i32\", \"f32\"),\n  0xb4: createSymbolObject(\"convert_s/i64\", \"f32\"),\n  0xb5: createSymbolObject(\"convert_u/i64\", \"f32\"),\n  0xb6: createSymbolObject(\"demote/f64\", \"f32\"),\n  0xb7: createSymbolObject(\"convert_s/i32\", \"f64\"),\n  0xb8: createSymbolObject(\"convert_u/i32\", \"f64\"),\n  0xb9: createSymbolObject(\"convert_s/i64\", \"f64\"),\n  0xba: createSymbolObject(\"convert_u/i64\", \"f64\"),\n  0xbb: createSymbolObject(\"promote/f32\", \"f64\"),\n  0xbc: createSymbolObject(\"reinterpret/f32\", \"i32\"),\n  0xbd: createSymbolObject(\"reinterpret/f64\", \"i64\"),\n  0xbe: createSymbolObject(\"reinterpret/i32\", \"f32\"),\n  0xbf: createSymbolObject(\"reinterpret/i64\", \"f64\"),\n  // Atomic Memory Instructions\n  0xfe00: createSymbol(\"memory.atomic.notify\", 1),\n  0xfe01: createSymbol(\"memory.atomic.wait32\", 1),\n  0xfe02: createSymbol(\"memory.atomic.wait64\", 1),\n  0xfe10: createSymbolObject(\"atomic.load\", \"i32\", 1),\n  0xfe11: createSymbolObject(\"atomic.load\", \"i64\", 1),\n  0xfe12: createSymbolObject(\"atomic.load8_u\", \"i32\", 1),\n  0xfe13: createSymbolObject(\"atomic.load16_u\", \"i32\", 1),\n  0xfe14: createSymbolObject(\"atomic.load8_u\", \"i64\", 1),\n  0xfe15: createSymbolObject(\"atomic.load16_u\", \"i64\", 1),\n  0xfe16: createSymbolObject(\"atomic.load32_u\", \"i64\", 1),\n  0xfe17: createSymbolObject(\"atomic.store\", \"i32\", 1),\n  0xfe18: createSymbolObject(\"atomic.store\", \"i64\", 1),\n  0xfe19: createSymbolObject(\"atomic.store8_u\", \"i32\", 1),\n  0xfe1a: createSymbolObject(\"atomic.store16_u\", \"i32\", 1),\n  0xfe1b: createSymbolObject(\"atomic.store8_u\", \"i64\", 1),\n  0xfe1c: createSymbolObject(\"atomic.store16_u\", \"i64\", 1),\n  0xfe1d: createSymbolObject(\"atomic.store32_u\", \"i64\", 1),\n  0xfe1e: createSymbolObject(\"atomic.rmw.add\", \"i32\", 1),\n  0xfe1f: createSymbolObject(\"atomic.rmw.add\", \"i64\", 1),\n  0xfe20: createSymbolObject(\"atomic.rmw8_u.add_u\", \"i32\", 1),\n  0xfe21: createSymbolObject(\"atomic.rmw16_u.add_u\", \"i32\", 1),\n  0xfe22: createSymbolObject(\"atomic.rmw8_u.add_u\", \"i64\", 1),\n  0xfe23: createSymbolObject(\"atomic.rmw16_u.add_u\", \"i64\", 1),\n  0xfe24: createSymbolObject(\"atomic.rmw32_u.add_u\", \"i64\", 1),\n  0xfe25: createSymbolObject(\"atomic.rmw.sub\", \"i32\", 1),\n  0xfe26: createSymbolObject(\"atomic.rmw.sub\", \"i64\", 1),\n  0xfe27: createSymbolObject(\"atomic.rmw8_u.sub_u\", \"i32\", 1),\n  0xfe28: createSymbolObject(\"atomic.rmw16_u.sub_u\", \"i32\", 1),\n  0xfe29: createSymbolObject(\"atomic.rmw8_u.sub_u\", \"i64\", 1),\n  0xfe2a: createSymbolObject(\"atomic.rmw16_u.sub_u\", \"i64\", 1),\n  0xfe2b: createSymbolObject(\"atomic.rmw32_u.sub_u\", \"i64\", 1),\n  0xfe2c: createSymbolObject(\"atomic.rmw.and\", \"i32\", 1),\n  0xfe2d: createSymbolObject(\"atomic.rmw.and\", \"i64\", 1),\n  0xfe2e: createSymbolObject(\"atomic.rmw8_u.and_u\", \"i32\", 1),\n  0xfe2f: createSymbolObject(\"atomic.rmw16_u.and_u\", \"i32\", 1),\n  0xfe30: createSymbolObject(\"atomic.rmw8_u.and_u\", \"i64\", 1),\n  0xfe31: createSymbolObject(\"atomic.rmw16_u.and_u\", \"i64\", 1),\n  0xfe32: createSymbolObject(\"atomic.rmw32_u.and_u\", \"i64\", 1),\n  0xfe33: createSymbolObject(\"atomic.rmw.or\", \"i32\", 1),\n  0xfe34: createSymbolObject(\"atomic.rmw.or\", \"i64\", 1),\n  0xfe35: createSymbolObject(\"atomic.rmw8_u.or_u\", \"i32\", 1),\n  0xfe36: createSymbolObject(\"atomic.rmw16_u.or_u\", \"i32\", 1),\n  0xfe37: createSymbolObject(\"atomic.rmw8_u.or_u\", \"i64\", 1),\n  0xfe38: createSymbolObject(\"atomic.rmw16_u.or_u\", \"i64\", 1),\n  0xfe39: createSymbolObject(\"atomic.rmw32_u.or_u\", \"i64\", 1),\n  0xfe3a: createSymbolObject(\"atomic.rmw.xor\", \"i32\", 1),\n  0xfe3b: createSymbolObject(\"atomic.rmw.xor\", \"i64\", 1),\n  0xfe3c: createSymbolObject(\"atomic.rmw8_u.xor_u\", \"i32\", 1),\n  0xfe3d: createSymbolObject(\"atomic.rmw16_u.xor_u\", \"i32\", 1),\n  0xfe3e: createSymbolObject(\"atomic.rmw8_u.xor_u\", \"i64\", 1),\n  0xfe3f: createSymbolObject(\"atomic.rmw16_u.xor_u\", \"i64\", 1),\n  0xfe40: createSymbolObject(\"atomic.rmw32_u.xor_u\", \"i64\", 1),\n  0xfe41: createSymbolObject(\"atomic.rmw.xchg\", \"i32\", 1),\n  0xfe42: createSymbolObject(\"atomic.rmw.xchg\", \"i64\", 1),\n  0xfe43: createSymbolObject(\"atomic.rmw8_u.xchg_u\", \"i32\", 1),\n  0xfe44: createSymbolObject(\"atomic.rmw16_u.xchg_u\", \"i32\", 1),\n  0xfe45: createSymbolObject(\"atomic.rmw8_u.xchg_u\", \"i64\", 1),\n  0xfe46: createSymbolObject(\"atomic.rmw16_u.xchg_u\", \"i64\", 1),\n  0xfe47: createSymbolObject(\"atomic.rmw32_u.xchg_u\", \"i64\", 1),\n  0xfe48: createSymbolObject(\"atomic.rmw.cmpxchg\", \"i32\", 1),\n  0xfe49: createSymbolObject(\"atomic.rmw.cmpxchg\", \"i64\", 1),\n  0xfe4a: createSymbolObject(\"atomic.rmw8_u.cmpxchg_u\", \"i32\", 1),\n  0xfe4b: createSymbolObject(\"atomic.rmw16_u.cmpxchg_u\", \"i32\", 1),\n  0xfe4c: createSymbolObject(\"atomic.rmw8_u.cmpxchg_u\", \"i64\", 1),\n  0xfe4d: createSymbolObject(\"atomic.rmw16_u.cmpxchg_u\", \"i64\", 1),\n  0xfe4e: createSymbolObject(\"atomic.rmw32_u.cmpxchg_u\", \"i64\", 1)\n};\nvar symbolsByName = invertMap(symbolsByByte, function (obj) {\n  if (typeof obj.object === \"string\") {\n    return \"\".concat(obj.object, \".\").concat(obj.name);\n  }\n\n  return obj.name;\n});\nexport default {\n  symbolsByByte: symbolsByByte,\n  sections: sections,\n  magicModuleHeader: magicModuleHeader,\n  moduleVersion: moduleVersion,\n  types: types,\n  valtypes: valtypes,\n  exportTypes: exportTypes,\n  blockTypes: blockTypes,\n  tableTypes: tableTypes,\n  globalTypes: globalTypes,\n  importTypes: importTypes,\n  valtypesByString: valtypesByString,\n  globalTypesByString: globalTypesByString,\n  exportTypesByName: exportTypesByName,\n  symbolsByName: symbolsByName\n};\nexport { getSectionForNode } from \"./section\";","export function getSectionForNode(n) {\n  switch (n.type) {\n    case \"ModuleImport\":\n      return \"import\";\n\n    case \"CallInstruction\":\n    case \"CallIndirectInstruction\":\n    case \"Func\":\n    case \"Instr\":\n      return \"code\";\n\n    case \"ModuleExport\":\n      return \"export\";\n\n    case \"Start\":\n      return \"start\";\n\n    case \"TypeInstruction\":\n      return \"type\";\n\n    case \"IndexInFuncSection\":\n      return \"func\";\n\n    case \"Global\":\n      return \"global\";\n    // No section\n\n    default:\n      return;\n  }\n}","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { encodeNode } from \"@webassemblyjs/wasm-gen\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport * as t from \"@webassemblyjs/ast\";\n\nfunction findLastSection(ast, forSection) {\n  var targetSectionId = constants.sections[forSection]; // $FlowIgnore: metadata can not be empty\n\n  var moduleSections = ast.body[0].metadata.sections;\n  var lastSection;\n  var lastId = 0;\n\n  for (var i = 0, len = moduleSections.length; i < len; i++) {\n    var section = moduleSections[i]; // Ignore custom section since they can actually occur everywhere\n\n    if (section.section === \"custom\") {\n      continue;\n    }\n\n    var sectionId = constants.sections[section.section];\n\n    if (targetSectionId > lastId && targetSectionId < sectionId) {\n      return lastSection;\n    }\n\n    lastId = sectionId;\n    lastSection = section;\n  }\n\n  return lastSection;\n}\n\nexport function createEmptySection(ast, uint8Buffer, section) {\n  // previous section after which we are going to insert our section\n  var lastSection = findLastSection(ast, section);\n  var start, end;\n  /**\n   * It's the first section\n   */\n\n  if (lastSection == null || lastSection.section === \"custom\") {\n    start = 8\n    /* wasm header size */\n    ;\n    end = start;\n  } else {\n    start = lastSection.startOffset + lastSection.size.value + 1;\n    end = start;\n  } // section id\n\n\n  start += 1;\n  var sizeStartLoc = {\n    line: -1,\n    column: start\n  };\n  var sizeEndLoc = {\n    line: -1,\n    column: start + 1\n  }; // 1 byte for the empty vector\n\n  var size = t.withLoc(t.numberLiteralFromRaw(1), sizeEndLoc, sizeStartLoc);\n  var vectorOfSizeStartLoc = {\n    line: -1,\n    column: sizeEndLoc.column\n  };\n  var vectorOfSizeEndLoc = {\n    line: -1,\n    column: sizeEndLoc.column + 1\n  };\n  var vectorOfSize = t.withLoc(t.numberLiteralFromRaw(0), vectorOfSizeEndLoc, vectorOfSizeStartLoc);\n  var sectionMetadata = t.sectionMetadata(section, start, size, vectorOfSize);\n  var sectionBytes = encodeNode(sectionMetadata);\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, start - 1, end, sectionBytes); // Add section into the AST for later lookups\n\n  if (_typeof(ast.body[0].metadata) === \"object\") {\n    // $FlowIgnore: metadata can not be empty\n    ast.body[0].metadata.sections.push(sectionMetadata);\n    t.sortSectionMetadata(ast.body[0]);\n  }\n  /**\n   * Update AST\n   */\n  // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var deltaBytes = +sectionBytes.length;\n  var encounteredSection = false;\n  t.traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        t.shiftSection(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return {\n    uint8Buffer: uint8Buffer,\n    sectionMetadata: sectionMetadata\n  };\n}","export { resizeSectionByteSize, resizeSectionVecSize } from \"./resize\";\nexport { createEmptySection } from \"./create\";\nexport { removeSections } from \"./remove\";","import { traverse, getSectionMetadatas, shiftSection } from \"@webassemblyjs/ast\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nexport function removeSections(ast, uint8Buffer, section) {\n  var sectionMetadatas = getSectionMetadatas(ast, section);\n\n  if (sectionMetadatas.length === 0) {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  return sectionMetadatas.reverse().reduce(function (uint8Buffer, sectionMetadata) {\n    var startsIncludingId = sectionMetadata.startOffset - 1;\n    var ends = section === \"start\" ? sectionMetadata.size.loc.end.column + 1 : sectionMetadata.startOffset + sectionMetadata.size.value + 1;\n    var delta = -(ends - startsIncludingId);\n    /**\n     * update AST\n     */\n    // Once we hit our section every that is after needs to be shifted by the delta\n\n    var encounteredSection = false;\n    traverse(ast, {\n      SectionMetadata: function SectionMetadata(path) {\n        if (path.node.section === section) {\n          encounteredSection = true;\n          return path.remove();\n        }\n\n        if (encounteredSection === true) {\n          shiftSection(ast, path.node, delta);\n        }\n      }\n    }); // replacement is nothing\n\n    var replacement = [];\n    return overrideBytesInBuffer(uint8Buffer, startsIncludingId, ends, replacement);\n  }, uint8Buffer);\n}","import { encodeU32 } from \"@webassemblyjs/wasm-gen\";\nimport { getSectionMetadata, traverse, shiftSection } from \"@webassemblyjs/ast\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nexport function resizeSectionByteSize(ast, uint8Buffer, section, deltaBytes) {\n  var sectionMetadata = getSectionMetadata(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.size.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.size.loc.start.column;\n  var end = sectionMetadata.size.loc.end.column;\n  var newSectionSize = sectionMetadata.size.value + deltaBytes;\n  var newBytes = encodeU32(newSectionSize);\n  /**\n   * update AST\n   */\n\n  sectionMetadata.size.value = newSectionSize;\n  var oldu32EncodedLen = end - start;\n  var newu32EncodedLen = newBytes.length; // the new u32 has a different encoded length\n\n  if (newu32EncodedLen !== oldu32EncodedLen) {\n    var deltaInSizeEncoding = newu32EncodedLen - oldu32EncodedLen;\n    sectionMetadata.size.loc.end.column = start + newu32EncodedLen;\n    deltaBytes += deltaInSizeEncoding; // move the vec size pointer size the section size is now smaller\n\n    sectionMetadata.vectorOfSize.loc.start.column += deltaInSizeEncoding;\n    sectionMetadata.vectorOfSize.loc.end.column += deltaInSizeEncoding;\n  } // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var encounteredSection = false;\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        shiftSection(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return overrideBytesInBuffer(uint8Buffer, start, end, newBytes);\n}\nexport function resizeSectionVecSize(ast, uint8Buffer, section, deltaElements) {\n  var sectionMetadata = getSectionMetadata(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.vectorOfSize.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // Section has no vector\n\n\n  if (sectionMetadata.vectorOfSize.value === -1) {\n    return uint8Buffer;\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.vectorOfSize.loc.start.column;\n  var end = sectionMetadata.vectorOfSize.loc.end.column;\n  var newValue = sectionMetadata.vectorOfSize.value + deltaElements;\n  var newBytes = encodeU32(newValue); // Update AST\n\n  sectionMetadata.vectorOfSize.value = newValue;\n  sectionMetadata.vectorOfSize.loc.end.column = start + newBytes.length;\n  return overrideBytesInBuffer(uint8Buffer, start, end, newBytes);\n}","import { write, read } from \"@xtuc/ieee754\";\n/**\n * According to https://webassembly.github.io/spec/binary/values.html#binary-float\n * n = 32/8\n */\n\nexport var NUMBER_OF_BYTE_F32 = 4;\n/**\n * According to https://webassembly.github.io/spec/binary/values.html#binary-float\n * n = 64/8\n */\n\nexport var NUMBER_OF_BYTE_F64 = 8;\nexport var SINGLE_PRECISION_MANTISSA = 23;\nexport var DOUBLE_PRECISION_MANTISSA = 52;\nexport function encodeF32(v) {\n  var buffer = [];\n  write(buffer, v, 0, true, SINGLE_PRECISION_MANTISSA, NUMBER_OF_BYTE_F32);\n  return buffer;\n}\nexport function encodeF64(v) {\n  var buffer = [];\n  write(buffer, v, 0, true, DOUBLE_PRECISION_MANTISSA, NUMBER_OF_BYTE_F64);\n  return buffer;\n}\nexport function decodeF32(bytes) {\n  var buffer = Buffer.from(bytes);\n  return read(buffer, 0, true, SINGLE_PRECISION_MANTISSA, NUMBER_OF_BYTE_F32);\n}\nexport function decodeF64(bytes) {\n  var buffer = Buffer.from(bytes);\n  return read(buffer, 0, true, DOUBLE_PRECISION_MANTISSA, NUMBER_OF_BYTE_F64);\n}","// Copyright 2012 The Obvious Corporation.\n\n/*\n * bits: Bitwise buffer utilities. The utilities here treat a buffer\n * as a little-endian bigint, so the lowest-order bit is bit #0 of\n * `buffer[0]`, and the highest-order bit is bit #7 of\n * `buffer[buffer.length - 1]`.\n */\n\n/*\n * Modules used\n */\n\"use strict\";\n/*\n * Exported bindings\n */\n\n/**\n * Extracts the given number of bits from the buffer at the indicated\n * index, returning a simple number as the result. If bits are requested\n * that aren't covered by the buffer, the `defaultBit` is used as their\n * value.\n *\n * The `bitLength` must be no more than 32. The `defaultBit` if not\n * specified is taken to be `0`.\n */\n\nexport function extract(buffer, bitIndex, bitLength, defaultBit) {\n  if (bitLength < 0 || bitLength > 32) {\n    throw new Error(\"Bad value for bitLength.\");\n  }\n\n  if (defaultBit === undefined) {\n    defaultBit = 0;\n  } else if (defaultBit !== 0 && defaultBit !== 1) {\n    throw new Error(\"Bad value for defaultBit.\");\n  }\n\n  var defaultByte = defaultBit * 0xff;\n  var result = 0; // All starts are inclusive. The {endByte, endBit} pair is exclusive, but\n  // if endBit !== 0, then endByte is inclusive.\n\n  var lastBit = bitIndex + bitLength;\n  var startByte = Math.floor(bitIndex / 8);\n  var startBit = bitIndex % 8;\n  var endByte = Math.floor(lastBit / 8);\n  var endBit = lastBit % 8;\n\n  if (endBit !== 0) {\n    // `(1 << endBit) - 1` is the mask of all bits up to but not including\n    // the endBit.\n    result = get(endByte) & (1 << endBit) - 1;\n  }\n\n  while (endByte > startByte) {\n    endByte--;\n    result = result << 8 | get(endByte);\n  }\n\n  result >>>= startBit;\n  return result;\n\n  function get(index) {\n    var result = buffer[index];\n    return result === undefined ? defaultByte : result;\n  }\n}\n/**\n * Injects the given bits into the given buffer at the given index. Any\n * bits in the value beyond the length to set are ignored.\n */\n\nexport function inject(buffer, bitIndex, bitLength, value) {\n  if (bitLength < 0 || bitLength > 32) {\n    throw new Error(\"Bad value for bitLength.\");\n  }\n\n  var lastByte = Math.floor((bitIndex + bitLength - 1) / 8);\n\n  if (bitIndex < 0 || lastByte >= buffer.length) {\n    throw new Error(\"Index out of range.\");\n  } // Just keeping it simple, until / unless profiling shows that this\n  // is a problem.\n\n\n  var atByte = Math.floor(bitIndex / 8);\n  var atBit = bitIndex % 8;\n\n  while (bitLength > 0) {\n    if (value & 1) {\n      buffer[atByte] |= 1 << atBit;\n    } else {\n      buffer[atByte] &= ~(1 << atBit);\n    }\n\n    value >>= 1;\n    bitLength--;\n    atBit = (atBit + 1) % 8;\n\n    if (atBit === 0) {\n      atByte++;\n    }\n  }\n}\n/**\n * Gets the sign bit of the given buffer.\n */\n\nexport function getSign(buffer) {\n  return buffer[buffer.length - 1] >>> 7;\n}\n/**\n * Gets the zero-based bit number of the highest-order bit with the\n * given value in the given buffer.\n *\n * If the buffer consists entirely of the other bit value, then this returns\n * `-1`.\n */\n\nexport function highOrder(bit, buffer) {\n  var length = buffer.length;\n  var fullyWrongByte = (bit ^ 1) * 0xff; // the other-bit extended to a full byte\n\n  while (length > 0 && buffer[length - 1] === fullyWrongByte) {\n    length--;\n  }\n\n  if (length === 0) {\n    // Degenerate case. The buffer consists entirely of ~bit.\n    return -1;\n  }\n\n  var byteToCheck = buffer[length - 1];\n  var result = length * 8 - 1;\n\n  for (var i = 7; i > 0; i--) {\n    if ((byteToCheck >> i & 1) === bit) {\n      break;\n    }\n\n    result--;\n  }\n\n  return result;\n}","// Copyright 2012 The Obvious Corporation.\n\n/*\n * bufs: Buffer utilities.\n */\n\n/*\n * Module variables\n */\n\n/** Pool of buffers, where `bufPool[x].length === x`. */\nvar bufPool = [];\n/** Maximum length of kept temporary buffers. */\n\nvar TEMP_BUF_MAXIMUM_LENGTH = 20;\n/** Minimum exactly-representable 64-bit int. */\n\nvar MIN_EXACT_INT64 = -0x8000000000000000;\n/** Maximum exactly-representable 64-bit int. */\n\nvar MAX_EXACT_INT64 = 0x7ffffffffffffc00;\n/** Maximum exactly-representable 64-bit uint. */\n\nvar MAX_EXACT_UINT64 = 0xfffffffffffff800;\n/**\n * The int value consisting just of a 1 in bit #32 (that is, one more\n * than the maximum 32-bit unsigned value).\n */\n\nvar BIT_32 = 0x100000000;\n/**\n * The int value consisting just of a 1 in bit #64 (that is, one more\n * than the maximum 64-bit unsigned value).\n */\n\nvar BIT_64 = 0x10000000000000000;\n/*\n * Helper functions\n */\n\n/**\n * Masks off all but the lowest bit set of the given number.\n */\n\nfunction lowestBit(num) {\n  return num & -num;\n}\n/**\n * Gets whether trying to add the second number to the first is lossy\n * (inexact). The first number is meant to be an accumulated result.\n */\n\n\nfunction isLossyToAdd(accum, num) {\n  if (num === 0) {\n    return false;\n  }\n\n  var lowBit = lowestBit(num);\n  var added = accum + lowBit;\n\n  if (added === accum) {\n    return true;\n  }\n\n  if (added - lowBit !== accum) {\n    return true;\n  }\n\n  return false;\n}\n/*\n * Exported functions\n */\n\n/**\n * Allocates a buffer of the given length, which is initialized\n * with all zeroes. This returns a buffer from the pool if it is\n * available, or a freshly-allocated buffer if not.\n */\n\n\nexport function alloc(length) {\n  var result = bufPool[length];\n\n  if (result) {\n    bufPool[length] = undefined;\n  } else {\n    result = new Buffer(length);\n  }\n\n  result.fill(0);\n  return result;\n}\n/**\n * Releases a buffer back to the pool.\n */\n\nexport function free(buffer) {\n  var length = buffer.length;\n\n  if (length < TEMP_BUF_MAXIMUM_LENGTH) {\n    bufPool[length] = buffer;\n  }\n}\n/**\n * Resizes a buffer, returning a new buffer. Returns the argument if\n * the length wouldn't actually change. This function is only safe to\n * use if the given buffer was allocated within this module (since\n * otherwise the buffer might possibly be shared externally).\n */\n\nexport function resize(buffer, length) {\n  if (length === buffer.length) {\n    return buffer;\n  }\n\n  var newBuf = alloc(length);\n  buffer.copy(newBuf);\n  free(buffer);\n  return newBuf;\n}\n/**\n * Reads an arbitrary signed int from a buffer.\n */\n\nexport function readInt(buffer) {\n  var length = buffer.length;\n  var positive = buffer[length - 1] < 0x80;\n  var result = positive ? 0 : -1;\n  var lossy = false; // Note: We can't use bit manipulation here, since that stops\n  // working if the result won't fit in a 32-bit int.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (because the result has\n    // no more than 48 bits, and loss only happens with 54 or more).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i = length - 1; _i >= 0; _i--) {\n      var one = buffer[_i];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Reads an arbitrary unsigned int from a buffer.\n */\n\nexport function readUInt(buffer) {\n  var length = buffer.length;\n  var result = 0;\n  var lossy = false; // Note: See above in re bit manipulation.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (see above).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i2 = length - 1; _i2 >= 0; _i2--) {\n      var one = buffer[_i2];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Writes a little-endian 64-bit signed int into a buffer.\n */\n\nexport function writeInt64(value, buffer) {\n  if (value < MIN_EXACT_INT64 || value > MAX_EXACT_INT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  if (value < 0) {\n    value += BIT_64;\n  }\n\n  writeUInt64(value, buffer);\n}\n/**\n * Writes a little-endian 64-bit unsigned int into a buffer.\n */\n\nexport function writeUInt64(value, buffer) {\n  if (value < 0 || value > MAX_EXACT_UINT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  var lowWord = value % BIT_32;\n  var highWord = Math.floor(value / BIT_32);\n  buffer.writeUInt32LE(lowWord, 0);\n  buffer.writeUInt32LE(highWord, 4);\n}","import leb from \"./leb\";\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(32/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U32 = 5;\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(64/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U64 = 10;\nexport function decodeInt64(encodedBuffer, index) {\n  return leb.decodeInt64(encodedBuffer, index);\n}\nexport function decodeUInt64(encodedBuffer, index) {\n  return leb.decodeUInt64(encodedBuffer, index);\n}\nexport function decodeInt32(encodedBuffer, index) {\n  return leb.decodeInt32(encodedBuffer, index);\n}\nexport function decodeUInt32(encodedBuffer, index) {\n  return leb.decodeUInt32(encodedBuffer, index);\n}\nexport function encodeU32(v) {\n  return leb.encodeUInt32(v);\n}\nexport function encodeI32(v) {\n  return leb.encodeInt32(v);\n}\nexport function encodeI64(v) {\n  return leb.encodeInt64(v);\n}","// Copyright 2012 The Obvious Corporation.\n\n/*\n * leb: LEB128 utilities.\n */\n\n/*\n * Modules used\n */\n\"use strict\";\n\nimport Long from \"@xtuc/long\";\nimport * as bits from \"./bits\";\nimport * as bufs from \"./bufs\";\n/*\n * Module variables\n */\n\n/** The minimum possible 32-bit signed int. */\n\nvar MIN_INT32 = -0x80000000;\n/** The maximum possible 32-bit signed int. */\n\nvar MAX_INT32 = 0x7fffffff;\n/** The maximum possible 32-bit unsigned int. */\n\nvar MAX_UINT32 = 0xffffffff;\n/** The minimum possible 64-bit signed int. */\n// const MIN_INT64 = -0x8000000000000000;\n\n/**\n * The maximum possible 64-bit signed int that is representable as a\n * JavaScript number.\n */\n// const MAX_INT64 = 0x7ffffffffffffc00;\n\n/**\n * The maximum possible 64-bit unsigned int that is representable as a\n * JavaScript number.\n */\n// const MAX_UINT64 = 0xfffffffffffff800;\n\n/*\n * Helper functions\n */\n\n/**\n * Determines the number of bits required to encode the number\n * represented in the given buffer as a signed value. The buffer is\n * taken to represent a signed number in little-endian form.\n *\n * The number of bits to encode is the (zero-based) bit number of the\n * highest-order non-sign-matching bit, plus two. For example:\n *\n *   11111011 01110101\n *   high          low\n *\n * The sign bit here is 1 (that is, it's a negative number). The highest\n * bit number that doesn't match the sign is bit #10 (where the lowest-order\n * bit is bit #0). So, we have to encode at least 12 bits total.\n *\n * As a special degenerate case, the numbers 0 and -1 each require just one bit.\n */\n\nfunction signedBitCount(buffer) {\n  return bits.highOrder(bits.getSign(buffer) ^ 1, buffer) + 2;\n}\n/**\n * Determines the number of bits required to encode the number\n * represented in the given buffer as an unsigned value. The buffer is\n * taken to represent an unsigned number in little-endian form.\n *\n * The number of bits to encode is the (zero-based) bit number of the\n * highest-order 1 bit, plus one. For example:\n *\n *   00011000 01010011\n *   high          low\n *\n * The highest-order 1 bit here is bit #12 (where the lowest-order bit\n * is bit #0). So, we have to encode at least 13 bits total.\n *\n * As a special degenerate case, the number 0 requires 1 bit.\n */\n\n\nfunction unsignedBitCount(buffer) {\n  var result = bits.highOrder(1, buffer) + 1;\n  return result ? result : 1;\n}\n/**\n * Common encoder for both signed and unsigned ints. This takes a\n * bigint-ish buffer, returning an LEB128-encoded buffer.\n */\n\n\nfunction encodeBufferCommon(buffer, signed) {\n  var signBit;\n  var bitCount;\n\n  if (signed) {\n    signBit = bits.getSign(buffer);\n    bitCount = signedBitCount(buffer);\n  } else {\n    signBit = 0;\n    bitCount = unsignedBitCount(buffer);\n  }\n\n  var byteCount = Math.ceil(bitCount / 7);\n  var result = bufs.alloc(byteCount);\n\n  for (var i = 0; i < byteCount; i++) {\n    var payload = bits.extract(buffer, i * 7, 7, signBit);\n    result[i] = payload | 0x80;\n  } // Mask off the top bit of the last byte, to indicate the end of the\n  // encoding.\n\n\n  result[byteCount - 1] &= 0x7f;\n  return result;\n}\n/**\n * Gets the byte-length of the value encoded in the given buffer at\n * the given index.\n */\n\n\nfunction encodedLength(encodedBuffer, index) {\n  var result = 0;\n\n  while (encodedBuffer[index + result] >= 0x80) {\n    result++;\n  }\n\n  result++; // to account for the last byte\n\n  if (index + result > encodedBuffer.length) {// FIXME(sven): seems to cause false positives\n    // throw new Error(\"integer representation too long\");\n  }\n\n  return result;\n}\n/**\n * Common decoder for both signed and unsigned ints. This takes an\n * LEB128-encoded buffer, returning a bigint-ish buffer.\n */\n\n\nfunction decodeBufferCommon(encodedBuffer, index, signed) {\n  index = index === undefined ? 0 : index;\n  var length = encodedLength(encodedBuffer, index);\n  var bitLength = length * 7;\n  var byteLength = Math.ceil(bitLength / 8);\n  var result = bufs.alloc(byteLength);\n  var outIndex = 0;\n\n  while (length > 0) {\n    bits.inject(result, outIndex, 7, encodedBuffer[index]);\n    outIndex += 7;\n    index++;\n    length--;\n  }\n\n  var signBit;\n  var signByte;\n\n  if (signed) {\n    // Sign-extend the last byte.\n    var lastByte = result[byteLength - 1];\n    var endBit = outIndex % 8;\n\n    if (endBit !== 0) {\n      var shift = 32 - endBit; // 32 because JS bit ops work on 32-bit ints.\n\n      lastByte = result[byteLength - 1] = lastByte << shift >> shift & 0xff;\n    }\n\n    signBit = lastByte >> 7;\n    signByte = signBit * 0xff;\n  } else {\n    signBit = 0;\n    signByte = 0;\n  } // Slice off any superfluous bytes, that is, ones that add no meaningful\n  // bits (because the value would be the same if they were removed).\n\n\n  while (byteLength > 1 && result[byteLength - 1] === signByte && (!signed || result[byteLength - 2] >> 7 === signBit)) {\n    byteLength--;\n  }\n\n  result = bufs.resize(result, byteLength);\n  return {\n    value: result,\n    nextIndex: index\n  };\n}\n/*\n * Exported bindings\n */\n\n\nfunction encodeIntBuffer(buffer) {\n  return encodeBufferCommon(buffer, true);\n}\n\nfunction decodeIntBuffer(encodedBuffer, index) {\n  return decodeBufferCommon(encodedBuffer, index, true);\n}\n\nfunction encodeInt32(num) {\n  var buf = bufs.alloc(4);\n  buf.writeInt32LE(num, 0);\n  var result = encodeIntBuffer(buf);\n  bufs.free(buf);\n  return result;\n}\n\nfunction decodeInt32(encodedBuffer, index) {\n  var result = decodeIntBuffer(encodedBuffer, index);\n  var parsed = bufs.readInt(result.value);\n  var value = parsed.value;\n  bufs.free(result.value);\n\n  if (value < MIN_INT32 || value > MAX_INT32) {\n    throw new Error(\"integer too large\");\n  }\n\n  return {\n    value: value,\n    nextIndex: result.nextIndex\n  };\n}\n\nfunction encodeInt64(num) {\n  var buf = bufs.alloc(8);\n  bufs.writeInt64(num, buf);\n  var result = encodeIntBuffer(buf);\n  bufs.free(buf);\n  return result;\n}\n\nfunction decodeInt64(encodedBuffer, index) {\n  var result = decodeIntBuffer(encodedBuffer, index);\n  var value = Long.fromBytesLE(result.value, false);\n  bufs.free(result.value);\n  return {\n    value: value,\n    nextIndex: result.nextIndex,\n    lossy: false\n  };\n}\n\nfunction encodeUIntBuffer(buffer) {\n  return encodeBufferCommon(buffer, false);\n}\n\nfunction decodeUIntBuffer(encodedBuffer, index) {\n  return decodeBufferCommon(encodedBuffer, index, false);\n}\n\nfunction encodeUInt32(num) {\n  var buf = bufs.alloc(4);\n  buf.writeUInt32LE(num, 0);\n  var result = encodeUIntBuffer(buf);\n  bufs.free(buf);\n  return result;\n}\n\nfunction decodeUInt32(encodedBuffer, index) {\n  var result = decodeUIntBuffer(encodedBuffer, index);\n  var parsed = bufs.readUInt(result.value);\n  var value = parsed.value;\n  bufs.free(result.value);\n\n  if (value > MAX_UINT32) {\n    throw new Error(\"integer too large\");\n  }\n\n  return {\n    value: value,\n    nextIndex: result.nextIndex\n  };\n}\n\nfunction encodeUInt64(num) {\n  var buf = bufs.alloc(8);\n  bufs.writeUInt64(num, buf);\n  var result = encodeUIntBuffer(buf);\n  bufs.free(buf);\n  return result;\n}\n\nfunction decodeUInt64(encodedBuffer, index) {\n  var result = decodeUIntBuffer(encodedBuffer, index);\n  var value = Long.fromBytesLE(result.value, true);\n  bufs.free(result.value);\n  return {\n    value: value,\n    nextIndex: result.nextIndex,\n    lossy: false\n  };\n}\n\nexport default {\n  decodeInt32: decodeInt32,\n  decodeInt64: decodeInt64,\n  decodeIntBuffer: decodeIntBuffer,\n  decodeUInt32: decodeUInt32,\n  decodeUInt64: decodeUInt64,\n  decodeUIntBuffer: decodeUIntBuffer,\n  encodeInt32: encodeInt32,\n  encodeInt64: encodeInt64,\n  encodeIntBuffer: encodeIntBuffer,\n  encodeUInt32: encodeUInt32,\n  encodeUInt64: encodeUInt64,\n  encodeUIntBuffer: encodeUIntBuffer\n};","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction con(b) {\n  if ((b & 0xc0) === 0x80) {\n    return b & 0x3f;\n  } else {\n    throw new Error(\"invalid UTF-8 encoding\");\n  }\n}\n\nfunction code(min, n) {\n  if (n < min || 0xd800 <= n && n < 0xe000 || n >= 0x10000) {\n    throw new Error(\"invalid UTF-8 encoding\");\n  } else {\n    return n;\n  }\n}\n\nexport function decode(bytes) {\n  return _decode(bytes).map(function (x) {\n    return String.fromCharCode(x);\n  }).join(\"\");\n}\n\nfunction _decode(bytes) {\n  if (bytes.length === 0) {\n    return [];\n  }\n  /**\n   * 1 byte\n   */\n\n\n  {\n    var _bytes = _toArray(bytes),\n        b1 = _bytes[0],\n        bs = _bytes.slice(1);\n\n    if (b1 < 0x80) {\n      return [code(0x0, b1)].concat(_toConsumableArray(_decode(bs)));\n    }\n\n    if (b1 < 0xc0) {\n      throw new Error(\"invalid UTF-8 encoding\");\n    }\n  }\n  /**\n   * 2 bytes\n   */\n\n  {\n    var _bytes2 = _toArray(bytes),\n        _b = _bytes2[0],\n        b2 = _bytes2[1],\n        _bs = _bytes2.slice(2);\n\n    if (_b < 0xe0) {\n      return [code(0x80, ((_b & 0x1f) << 6) + con(b2))].concat(_toConsumableArray(_decode(_bs)));\n    }\n  }\n  /**\n   * 3 bytes\n   */\n\n  {\n    var _bytes3 = _toArray(bytes),\n        _b2 = _bytes3[0],\n        _b3 = _bytes3[1],\n        b3 = _bytes3[2],\n        _bs2 = _bytes3.slice(3);\n\n    if (_b2 < 0xf0) {\n      return [code(0x800, ((_b2 & 0x0f) << 12) + (con(_b3) << 6) + con(b3))].concat(_toConsumableArray(_decode(_bs2)));\n    }\n  }\n  /**\n   * 4 bytes\n   */\n\n  {\n    var _bytes4 = _toArray(bytes),\n        _b4 = _bytes4[0],\n        _b5 = _bytes4[1],\n        _b6 = _bytes4[2],\n        b4 = _bytes4[3],\n        _bs3 = _bytes4.slice(4);\n\n    if (_b4 < 0xf8) {\n      return [code(0x10000, (((_b4 & 0x07) << 18) + con(_b5) << 12) + (con(_b6) << 6) + con(b4))].concat(_toConsumableArray(_decode(_bs3)));\n    }\n  }\n  throw new Error(\"invalid UTF-8 encoding\");\n}","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction con(n) {\n  return 0x80 | n & 0x3f;\n}\n\nexport function encode(str) {\n  var arr = str.split(\"\").map(function (x) {\n    return x.charCodeAt(0);\n  });\n  return _encode(arr);\n}\n\nfunction _encode(arr) {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  var _arr = _toArray(arr),\n      n = _arr[0],\n      ns = _arr.slice(1);\n\n  if (n < 0) {\n    throw new Error(\"utf8\");\n  }\n\n  if (n < 0x80) {\n    return [n].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  if (n < 0x800) {\n    return [0xc0 | n >>> 6, con(n)].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  if (n < 0x10000) {\n    return [0xe0 | n >>> 12, con(n >>> 6), con(n)].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  if (n < 0x110000) {\n    return [0xf0 | n >>> 18, con(n >>> 12), con(n >>> 6), con(n)].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  throw new Error(\"utf8\");\n}","export { decode } from \"./decoder\";\nexport { encode } from \"./encoder\";","function _sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return _sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }\n\nimport { encodeNode } from \"@webassemblyjs/wasm-gen\";\nimport { encodeU32 } from \"@webassemblyjs/wasm-gen/lib/encoder\";\nimport { isFunc, isGlobal, assertHasLoc, orderedInsertNode, getSectionMetadata, traverse, getEndOfSection } from \"@webassemblyjs/ast\";\nimport { resizeSectionByteSize, resizeSectionVecSize, createEmptySection, removeSections } from \"@webassemblyjs/helper-wasm-section\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\n\nfunction shiftLocNodeByDelta(node, delta) {\n  assertHasLoc(node); // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.start.column += delta; // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.end.column += delta;\n}\n\nfunction applyUpdate(ast, uint8Buffer, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      oldNode = _ref2[0],\n      newNode = _ref2[1];\n\n  var deltaElements = 0;\n  assertHasLoc(oldNode);\n  var sectionName = getSectionForNode(newNode);\n  var replacementByteArray = encodeNode(newNode);\n  /**\n   * Replace new node as bytes\n   */\n\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column, // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.end.column, replacementByteArray);\n  /**\n   * Update function body size if needed\n   */\n\n  if (sectionName === \"code\") {\n    // Find the parent func\n    traverse(ast, {\n      Func: function Func(_ref3) {\n        var node = _ref3.node;\n        var funcHasThisIntr = node.body.find(function (n) {\n          return n === newNode;\n        }) !== undefined; // Update func's body size if needed\n\n        if (funcHasThisIntr === true) {\n          // These are the old functions locations informations\n          assertHasLoc(node);\n          var oldNodeSize = encodeNode(oldNode).length;\n          var bodySizeDeltaBytes = replacementByteArray.length - oldNodeSize;\n\n          if (bodySizeDeltaBytes !== 0) {\n            var newValue = node.metadata.bodySize + bodySizeDeltaBytes;\n            var newByteArray = encodeU32(newValue); // function body size byte\n            // FIXME(sven): only handles one byte u32\n\n            var start = node.loc.start.column;\n            var end = start + 1;\n            uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newByteArray);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Update section size\n   */\n\n\n  var deltaBytes = replacementByteArray.length - ( // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.end.column - oldNode.loc.start.column); // Init location informations\n\n  newNode.loc = {\n    start: {\n      line: -1,\n      column: -1\n    },\n    end: {\n      line: -1,\n      column: -1\n    }\n  }; // Update new node end position\n  // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.start.column = oldNode.loc.start.column; // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.end.column = // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column + replacementByteArray.length;\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyDelete(ast, uint8Buffer, node) {\n  var deltaElements = -1; // since we removed an element\n\n  assertHasLoc(node);\n  var sectionName = getSectionForNode(node);\n\n  if (sectionName === \"start\") {\n    var sectionMetadata = getSectionMetadata(ast, \"start\");\n    /**\n     * The start section only contains one element,\n     * we need to remove the whole section\n     */\n\n    uint8Buffer = removeSections(ast, uint8Buffer, \"start\");\n\n    var _deltaBytes = -(sectionMetadata.size.value + 1);\n    /* section id */\n\n\n    return {\n      uint8Buffer: uint8Buffer,\n      deltaBytes: _deltaBytes,\n      deltaElements: deltaElements\n    };\n  } // replacement is nothing\n\n\n  var replacement = [];\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, // $FlowIgnore: assertHasLoc ensures that\n  node.loc.start.column, // $FlowIgnore: assertHasLoc ensures that\n  node.loc.end.column, replacement);\n  /**\n   * Update section\n   */\n  // $FlowIgnore: assertHasLoc ensures that\n\n  var deltaBytes = -(node.loc.end.column - node.loc.start.column);\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyAdd(ast, uint8Buffer, node) {\n  var deltaElements = +1; // since we added an element\n\n  var sectionName = getSectionForNode(node);\n  var sectionMetadata = getSectionMetadata(ast, sectionName); // Section doesn't exists, we create an empty one\n\n  if (typeof sectionMetadata === \"undefined\") {\n    var res = createEmptySection(ast, uint8Buffer, sectionName);\n    uint8Buffer = res.uint8Buffer;\n    sectionMetadata = res.sectionMetadata;\n  }\n  /**\n   * check that the expressions were ended\n   */\n\n\n  if (isFunc(node)) {\n    // $FlowIgnore\n    var body = node.body;\n\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n\n  if (isGlobal(node)) {\n    // $FlowIgnore\n    var body = node.init;\n\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n  /**\n   * Add nodes\n   */\n\n\n  var newByteArray = encodeNode(node); // The size of the section doesn't include the storage of the size itself\n  // we need to manually add it here\n\n  var start = getEndOfSection(sectionMetadata);\n  var end = start;\n  /**\n   * Update section\n   */\n\n  var deltaBytes = newByteArray.length;\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newByteArray);\n  node.loc = {\n    start: {\n      line: -1,\n      column: start\n    },\n    end: {\n      line: -1,\n      column: start + deltaBytes\n    }\n  }; // for func add the additional metadata in the AST\n\n  if (node.type === \"Func\") {\n    // the size is the first byte\n    // FIXME(sven): handle LEB128 correctly here\n    var bodySize = newByteArray[0];\n    node.metadata = {\n      bodySize: bodySize\n    };\n  }\n\n  if (node.type !== \"IndexInFuncSection\") {\n    orderedInsertNode(ast.body[0], node);\n  }\n\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nexport function applyOperations(ast, uint8Buffer, ops) {\n  ops.forEach(function (op) {\n    var state;\n    var sectionName;\n\n    switch (op.kind) {\n      case \"update\":\n        state = applyUpdate(ast, uint8Buffer, [op.oldNode, op.node]);\n        sectionName = getSectionForNode(op.node);\n        break;\n\n      case \"delete\":\n        state = applyDelete(ast, uint8Buffer, op.node);\n        sectionName = getSectionForNode(op.node);\n        break;\n\n      case \"add\":\n        state = applyAdd(ast, uint8Buffer, op.node);\n        sectionName = getSectionForNode(op.node);\n        break;\n\n      default:\n        throw new Error(\"Unknown operation\");\n    }\n    /**\n     * Resize section vec size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the byte length of the section and the offset for nodes in the\n     * section. So we do this first before resizing section byte size\n     * or shifting following operations' nodes.\n     */\n\n\n    if (state.deltaElements !== 0 && sectionName !== \"start\") {\n      var oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = resizeSectionVecSize(ast, state.uint8Buffer, sectionName, state.deltaElements); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - oldBufferLength;\n    }\n    /**\n     * Resize section byte size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the offset for nodes in the section. So we do this before\n     * shifting following operations' nodes.\n     */\n\n\n    if (state.deltaBytes !== 0 && sectionName !== \"start\") {\n      var _oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = resizeSectionByteSize(ast, state.uint8Buffer, sectionName, state.deltaBytes); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - _oldBufferLength;\n    }\n    /**\n     * Shift following operation's nodes\n     */\n\n\n    if (state.deltaBytes !== 0) {\n      ops.forEach(function (op) {\n        // We don't need to handle add ops, they are positioning independent\n        switch (op.kind) {\n          case \"update\":\n            shiftLocNodeByDelta(op.oldNode, state.deltaBytes);\n            break;\n\n          case \"delete\":\n            shiftLocNodeByDelta(op.node, state.deltaBytes);\n            break;\n        }\n      });\n    }\n\n    uint8Buffer = state.uint8Buffer;\n  });\n  return uint8Buffer;\n}","import { decode } from \"@webassemblyjs/wasm-parser\";\nimport { traverse } from \"@webassemblyjs/ast\";\nimport { cloneNode } from \"@webassemblyjs/ast/lib/clone\";\nimport { shrinkPaddedLEB128 } from \"@webassemblyjs/wasm-opt\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport { applyOperations } from \"./apply\";\n\nfunction hashNode(node) {\n  return JSON.stringify(node);\n}\n\nfunction preprocess(ab) {\n  var optBin = shrinkPaddedLEB128(new Uint8Array(ab));\n  return optBin.buffer;\n}\n\nfunction sortBySectionOrder(nodes) {\n  var originalOrder = new Map();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _node = _step.value;\n      originalOrder.set(_node, originalOrder.size);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  nodes.sort(function (a, b) {\n    var sectionA = getSectionForNode(a);\n    var sectionB = getSectionForNode(b);\n    var aId = constants.sections[sectionA];\n    var bId = constants.sections[sectionB];\n\n    if (typeof aId !== \"number\" || typeof bId !== \"number\") {\n      throw new Error(\"Section id not found\");\n    }\n\n    if (aId === bId) {\n      // $FlowIgnore originalOrder is filled for all nodes\n      return originalOrder.get(a) - originalOrder.get(b);\n    }\n\n    return aId - bId;\n  });\n}\n\nexport function edit(ab, visitors) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return editWithAST(ast, ab, visitors);\n}\nexport function editWithAST(ast, ab, visitors) {\n  var operations = [];\n  var uint8Buffer = new Uint8Array(ab);\n  var nodeBefore;\n\n  function before(type, path) {\n    nodeBefore = cloneNode(path.node);\n  }\n\n  function after(type, path) {\n    if (path.node._deleted === true) {\n      operations.push({\n        kind: \"delete\",\n        node: path.node\n      }); // $FlowIgnore\n    } else if (hashNode(nodeBefore) !== hashNode(path.node)) {\n      operations.push({\n        kind: \"update\",\n        oldNode: nodeBefore,\n        node: path.node\n      });\n    }\n  }\n\n  traverse(ast, visitors, before, after);\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}\nexport function add(ab, newNodes) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return addWithAST(ast, ab, newNodes);\n}\nexport function addWithAST(ast, ab, newNodes) {\n  // Sort nodes by insertion order\n  sortBySectionOrder(newNodes);\n  var uint8Buffer = new Uint8Array(ab); // Map node into operations\n\n  var operations = newNodes.map(function (n) {\n    return {\n      kind: \"add\",\n      node: n\n    };\n  });\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport * as leb from \"@webassemblyjs/leb128\";\nimport * as ieee754 from \"@webassemblyjs/ieee754\";\nimport * as utf8 from \"@webassemblyjs/utf8\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport { encodeNode } from \"../index\";\n\nfunction assertNotIdentifierNode(n) {\n  if (n.type === \"Identifier\") {\n    throw new Error(\"Unsupported node Identifier\");\n  }\n}\n\nexport function encodeVersion(v) {\n  var bytes = constants.moduleVersion;\n  bytes[0] = v;\n  return bytes;\n}\nexport function encodeHeader() {\n  return constants.magicModuleHeader;\n}\nexport function encodeU32(v) {\n  var uint8view = new Uint8Array(leb.encodeU32(v));\n\n  var array = _toConsumableArray(uint8view);\n\n  return array;\n}\nexport function encodeI32(v) {\n  var uint8view = new Uint8Array(leb.encodeI32(v));\n\n  var array = _toConsumableArray(uint8view);\n\n  return array;\n}\nexport function encodeI64(v) {\n  var uint8view = new Uint8Array(leb.encodeI64(v));\n\n  var array = _toConsumableArray(uint8view);\n\n  return array;\n}\nexport function encodeVec(elements) {\n  var size = encodeU32(elements.length);\n  return _toConsumableArray(size).concat(_toConsumableArray(elements));\n}\nexport function encodeValtype(v) {\n  var byte = constants.valtypesByString[v];\n\n  if (typeof byte === \"undefined\") {\n    throw new Error(\"Unknown valtype: \" + v);\n  }\n\n  return parseInt(byte, 10);\n}\nexport function encodeMutability(v) {\n  var byte = constants.globalTypesByString[v];\n\n  if (typeof byte === \"undefined\") {\n    throw new Error(\"Unknown mutability: \" + v);\n  }\n\n  return parseInt(byte, 10);\n}\nexport function encodeUTF8Vec(str) {\n  return encodeVec(utf8.encode(str));\n}\nexport function encodeLimits(n) {\n  var out = [];\n\n  if (typeof n.max === \"number\") {\n    out.push(0x01);\n    out.push.apply(out, _toConsumableArray(encodeU32(n.min))); // $FlowIgnore: ensured by the typeof\n\n    out.push.apply(out, _toConsumableArray(encodeU32(n.max)));\n  } else {\n    out.push(0x00);\n    out.push.apply(out, _toConsumableArray(encodeU32(n.min)));\n  }\n\n  return out;\n}\nexport function encodeModuleImport(n) {\n  var out = [];\n  out.push.apply(out, _toConsumableArray(encodeUTF8Vec(n.module)));\n  out.push.apply(out, _toConsumableArray(encodeUTF8Vec(n.name)));\n\n  switch (n.descr.type) {\n    case \"GlobalType\":\n      {\n        out.push(0x03); // $FlowIgnore: GlobalType ensure that these props exists\n\n        out.push(encodeValtype(n.descr.valtype)); // $FlowIgnore: GlobalType ensure that these props exists\n\n        out.push(encodeMutability(n.descr.mutability));\n        break;\n      }\n\n    case \"Memory\":\n      {\n        out.push(0x02); // $FlowIgnore\n\n        out.push.apply(out, _toConsumableArray(encodeLimits(n.descr.limits)));\n        break;\n      }\n\n    case \"Table\":\n      {\n        out.push(0x01);\n        out.push(0x70); // element type\n        // $FlowIgnore\n\n        out.push.apply(out, _toConsumableArray(encodeLimits(n.descr.limits)));\n        break;\n      }\n\n    case \"FuncImportDescr\":\n      {\n        out.push(0x00); // $FlowIgnore\n\n        assertNotIdentifierNode(n.descr.id); // $FlowIgnore\n\n        out.push.apply(out, _toConsumableArray(encodeU32(n.descr.id.value)));\n        break;\n      }\n\n    default:\n      throw new Error(\"Unsupport operation: encode module import of type: \" + n.descr.type);\n  }\n\n  return out;\n}\nexport function encodeSectionMetadata(n) {\n  var out = [];\n  var sectionId = constants.sections[n.section];\n\n  if (typeof sectionId === \"undefined\") {\n    throw new Error(\"Unknown section: \" + n.section);\n  }\n\n  if (n.section === \"start\") {\n    /**\n     * This is not implemented yet because it's a special case which\n     * doesn't have a vector in its section.\n     */\n    throw new Error(\"Unsupported section encoding of type start\");\n  }\n\n  out.push(sectionId);\n  out.push.apply(out, _toConsumableArray(encodeU32(n.size.value)));\n  out.push.apply(out, _toConsumableArray(encodeU32(n.vectorOfSize.value)));\n  return out;\n}\nexport function encodeCallInstruction(n) {\n  var out = [];\n  assertNotIdentifierNode(n.index);\n  out.push(0x10); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.index.value)));\n  return out;\n}\nexport function encodeCallIndirectInstruction(n) {\n  var out = []; // $FlowIgnore\n\n  assertNotIdentifierNode(n.index);\n  out.push(0x11); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.index.value))); // add a reserved byte\n\n  out.push(0x00);\n  return out;\n}\nexport function encodeModuleExport(n) {\n  var out = [];\n  assertNotIdentifierNode(n.descr.id);\n  var exportTypeByteString = constants.exportTypesByName[n.descr.exportType];\n\n  if (typeof exportTypeByteString === \"undefined\") {\n    throw new Error(\"Unknown export of type: \" + n.descr.exportType);\n  }\n\n  var exportTypeByte = parseInt(exportTypeByteString, 10);\n  out.push.apply(out, _toConsumableArray(encodeUTF8Vec(n.name)));\n  out.push(exportTypeByte); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.descr.id.value)));\n  return out;\n}\nexport function encodeTypeInstruction(n) {\n  var out = [0x60];\n  var params = n.functype.params.map(function (x) {\n    return x.valtype;\n  }).map(encodeValtype);\n  var results = n.functype.results.map(encodeValtype);\n  out.push.apply(out, _toConsumableArray(encodeVec(params)));\n  out.push.apply(out, _toConsumableArray(encodeVec(results)));\n  return out;\n}\nexport function encodeInstr(n) {\n  var out = [];\n  var instructionName = n.id;\n\n  if (typeof n.object === \"string\") {\n    instructionName = \"\".concat(n.object, \".\").concat(String(n.id));\n  }\n\n  var byteString = constants.symbolsByName[instructionName];\n\n  if (typeof byteString === \"undefined\") {\n    throw new Error(\"encodeInstr: unknown instruction \" + JSON.stringify(instructionName));\n  }\n\n  var byte = parseInt(byteString, 10);\n  out.push(byte);\n\n  if (n.args) {\n    n.args.forEach(function (arg) {\n      var encoder = encodeU32; // find correct encoder\n\n      if (n.object === \"i32\") {\n        encoder = encodeI32;\n      }\n\n      if (n.object === \"i64\") {\n        encoder = encodeI64;\n      }\n\n      if (n.object === \"f32\") {\n        encoder = ieee754.encodeF32;\n      }\n\n      if (n.object === \"f64\") {\n        encoder = ieee754.encodeF64;\n      }\n\n      if (arg.type === \"NumberLiteral\" || arg.type === \"FloatLiteral\" || arg.type === \"LongNumberLiteral\") {\n        // $FlowIgnore\n        out.push.apply(out, _toConsumableArray(encoder(arg.value)));\n      } else {\n        throw new Error(\"Unsupported instruction argument encoding \" + JSON.stringify(arg.type));\n      }\n    });\n  }\n\n  return out;\n}\n\nfunction encodeExpr(instrs) {\n  var out = [];\n  instrs.forEach(function (instr) {\n    // $FlowIgnore\n    var n = encodeNode(instr);\n    out.push.apply(out, _toConsumableArray(n));\n  });\n  return out;\n}\n\nexport function encodeStringLiteral(n) {\n  return encodeUTF8Vec(n.value);\n}\nexport function encodeGlobal(n) {\n  var out = [];\n  var _n$globalType = n.globalType,\n      valtype = _n$globalType.valtype,\n      mutability = _n$globalType.mutability;\n  out.push(encodeValtype(valtype));\n  out.push(encodeMutability(mutability));\n  out.push.apply(out, _toConsumableArray(encodeExpr(n.init)));\n  return out;\n}\nexport function encodeFuncBody(n) {\n  var out = [];\n  out.push(-1); // temporary function body size\n  // FIXME(sven): get the func locals?\n\n  var localBytes = encodeVec([]);\n  out.push.apply(out, _toConsumableArray(localBytes));\n  var funcBodyBytes = encodeExpr(n.body);\n  out[0] = funcBodyBytes.length + localBytes.length;\n  out.push.apply(out, _toConsumableArray(funcBodyBytes));\n  return out;\n}\nexport function encodeIndexInFuncSection(n) {\n  assertNotIdentifierNode(n.index); // $FlowIgnore\n\n  return encodeU32(n.index.value);\n}\nexport function encodeElem(n) {\n  var out = [];\n  assertNotIdentifierNode(n.table); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.table.value)));\n  out.push.apply(out, _toConsumableArray(encodeExpr(n.offset))); // $FlowIgnore\n\n  var funcs = n.funcs.reduce(function (acc, x) {\n    return _toConsumableArray(acc).concat(_toConsumableArray(encodeU32(x.value)));\n  }, []);\n  out.push.apply(out, _toConsumableArray(encodeVec(funcs)));\n  return out;\n}","import * as encoder from \"./encoder\";\nexport function encodeNode(n) {\n  switch (n.type) {\n    case \"ModuleImport\":\n      // $FlowIgnore: ModuleImport ensure that the node is well formated\n      return encoder.encodeModuleImport(n);\n\n    case \"SectionMetadata\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeSectionMetadata(n);\n\n    case \"CallInstruction\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeCallInstruction(n);\n\n    case \"CallIndirectInstruction\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeCallIndirectInstruction(n);\n\n    case \"TypeInstruction\":\n      return encoder.encodeTypeInstruction(n);\n\n    case \"Instr\":\n      // $FlowIgnore\n      return encoder.encodeInstr(n);\n\n    case \"ModuleExport\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeModuleExport(n);\n\n    case \"Global\":\n      // $FlowIgnore\n      return encoder.encodeGlobal(n);\n\n    case \"Func\":\n      return encoder.encodeFuncBody(n);\n\n    case \"IndexInFuncSection\":\n      return encoder.encodeIndexInFuncSection(n);\n\n    case \"StringLiteral\":\n      return encoder.encodeStringLiteral(n);\n\n    case \"Elem\":\n      return encoder.encodeElem(n);\n\n    default:\n      throw new Error(\"Unsupported encoding for node of type: \" + JSON.stringify(n.type));\n  }\n}\nexport var encodeU32 = encoder.encodeU32;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeVersion = encodeVersion;\nexports.encodeHeader = encodeHeader;\nexports.encodeU32 = encodeU32;\nexports.encodeI32 = encodeI32;\nexports.encodeI64 = encodeI64;\nexports.encodeVec = encodeVec;\nexports.encodeValtype = encodeValtype;\nexports.encodeMutability = encodeMutability;\nexports.encodeUTF8Vec = encodeUTF8Vec;\nexports.encodeLimits = encodeLimits;\nexports.encodeModuleImport = encodeModuleImport;\nexports.encodeSectionMetadata = encodeSectionMetadata;\nexports.encodeCallInstruction = encodeCallInstruction;\nexports.encodeCallIndirectInstruction = encodeCallIndirectInstruction;\nexports.encodeModuleExport = encodeModuleExport;\nexports.encodeTypeInstruction = encodeTypeInstruction;\nexports.encodeInstr = encodeInstr;\nexports.encodeStringLiteral = encodeStringLiteral;\nexports.encodeGlobal = encodeGlobal;\nexports.encodeFuncBody = encodeFuncBody;\nexports.encodeIndexInFuncSection = encodeIndexInFuncSection;\nexports.encodeElem = encodeElem;\n\nvar leb = _interopRequireWildcard(require(\"@webassemblyjs/leb128\"));\n\nvar ieee754 = _interopRequireWildcard(require(\"@webassemblyjs/ieee754\"));\n\nvar utf8 = _interopRequireWildcard(require(\"@webassemblyjs/utf8\"));\n\nvar _helperWasmBytecode = _interopRequireDefault(require(\"@webassemblyjs/helper-wasm-bytecode\"));\n\nvar _index = require(\"../index\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction assertNotIdentifierNode(n) {\n  if (n.type === \"Identifier\") {\n    throw new Error(\"Unsupported node Identifier\");\n  }\n}\n\nfunction encodeVersion(v) {\n  var bytes = _helperWasmBytecode.default.moduleVersion;\n  bytes[0] = v;\n  return bytes;\n}\n\nfunction encodeHeader() {\n  return _helperWasmBytecode.default.magicModuleHeader;\n}\n\nfunction encodeU32(v) {\n  var uint8view = new Uint8Array(leb.encodeU32(v));\n\n  var array = _toConsumableArray(uint8view);\n\n  return array;\n}\n\nfunction encodeI32(v) {\n  var uint8view = new Uint8Array(leb.encodeI32(v));\n\n  var array = _toConsumableArray(uint8view);\n\n  return array;\n}\n\nfunction encodeI64(v) {\n  var uint8view = new Uint8Array(leb.encodeI64(v));\n\n  var array = _toConsumableArray(uint8view);\n\n  return array;\n}\n\nfunction encodeVec(elements) {\n  var size = encodeU32(elements.length);\n  return _toConsumableArray(size).concat(_toConsumableArray(elements));\n}\n\nfunction encodeValtype(v) {\n  var byte = _helperWasmBytecode.default.valtypesByString[v];\n\n  if (typeof byte === \"undefined\") {\n    throw new Error(\"Unknown valtype: \" + v);\n  }\n\n  return parseInt(byte, 10);\n}\n\nfunction encodeMutability(v) {\n  var byte = _helperWasmBytecode.default.globalTypesByString[v];\n\n  if (typeof byte === \"undefined\") {\n    throw new Error(\"Unknown mutability: \" + v);\n  }\n\n  return parseInt(byte, 10);\n}\n\nfunction encodeUTF8Vec(str) {\n  return encodeVec(utf8.encode(str));\n}\n\nfunction encodeLimits(n) {\n  var out = [];\n\n  if (typeof n.max === \"number\") {\n    out.push(0x01);\n    out.push.apply(out, _toConsumableArray(encodeU32(n.min))); // $FlowIgnore: ensured by the typeof\n\n    out.push.apply(out, _toConsumableArray(encodeU32(n.max)));\n  } else {\n    out.push(0x00);\n    out.push.apply(out, _toConsumableArray(encodeU32(n.min)));\n  }\n\n  return out;\n}\n\nfunction encodeModuleImport(n) {\n  var out = [];\n  out.push.apply(out, _toConsumableArray(encodeUTF8Vec(n.module)));\n  out.push.apply(out, _toConsumableArray(encodeUTF8Vec(n.name)));\n\n  switch (n.descr.type) {\n    case \"GlobalType\":\n      {\n        out.push(0x03); // $FlowIgnore: GlobalType ensure that these props exists\n\n        out.push(encodeValtype(n.descr.valtype)); // $FlowIgnore: GlobalType ensure that these props exists\n\n        out.push(encodeMutability(n.descr.mutability));\n        break;\n      }\n\n    case \"Memory\":\n      {\n        out.push(0x02); // $FlowIgnore\n\n        out.push.apply(out, _toConsumableArray(encodeLimits(n.descr.limits)));\n        break;\n      }\n\n    case \"Table\":\n      {\n        out.push(0x01);\n        out.push(0x70); // element type\n        // $FlowIgnore\n\n        out.push.apply(out, _toConsumableArray(encodeLimits(n.descr.limits)));\n        break;\n      }\n\n    case \"FuncImportDescr\":\n      {\n        out.push(0x00); // $FlowIgnore\n\n        assertNotIdentifierNode(n.descr.id); // $FlowIgnore\n\n        out.push.apply(out, _toConsumableArray(encodeU32(n.descr.id.value)));\n        break;\n      }\n\n    default:\n      throw new Error(\"Unsupport operation: encode module import of type: \" + n.descr.type);\n  }\n\n  return out;\n}\n\nfunction encodeSectionMetadata(n) {\n  var out = [];\n  var sectionId = _helperWasmBytecode.default.sections[n.section];\n\n  if (typeof sectionId === \"undefined\") {\n    throw new Error(\"Unknown section: \" + n.section);\n  }\n\n  if (n.section === \"start\") {\n    /**\n     * This is not implemented yet because it's a special case which\n     * doesn't have a vector in its section.\n     */\n    throw new Error(\"Unsupported section encoding of type start\");\n  }\n\n  out.push(sectionId);\n  out.push.apply(out, _toConsumableArray(encodeU32(n.size.value)));\n  out.push.apply(out, _toConsumableArray(encodeU32(n.vectorOfSize.value)));\n  return out;\n}\n\nfunction encodeCallInstruction(n) {\n  var out = [];\n  assertNotIdentifierNode(n.index);\n  out.push(0x10); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.index.value)));\n  return out;\n}\n\nfunction encodeCallIndirectInstruction(n) {\n  var out = []; // $FlowIgnore\n\n  assertNotIdentifierNode(n.index);\n  out.push(0x11); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.index.value))); // add a reserved byte\n\n  out.push(0x00);\n  return out;\n}\n\nfunction encodeModuleExport(n) {\n  var out = [];\n  assertNotIdentifierNode(n.descr.id);\n  var exportTypeByteString = _helperWasmBytecode.default.exportTypesByName[n.descr.exportType];\n\n  if (typeof exportTypeByteString === \"undefined\") {\n    throw new Error(\"Unknown export of type: \" + n.descr.exportType);\n  }\n\n  var exportTypeByte = parseInt(exportTypeByteString, 10);\n  out.push.apply(out, _toConsumableArray(encodeUTF8Vec(n.name)));\n  out.push(exportTypeByte); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.descr.id.value)));\n  return out;\n}\n\nfunction encodeTypeInstruction(n) {\n  var out = [0x60];\n  var params = n.functype.params.map(function (x) {\n    return x.valtype;\n  }).map(encodeValtype);\n  var results = n.functype.results.map(encodeValtype);\n  out.push.apply(out, _toConsumableArray(encodeVec(params)));\n  out.push.apply(out, _toConsumableArray(encodeVec(results)));\n  return out;\n}\n\nfunction encodeInstr(n) {\n  var out = [];\n  var instructionName = n.id;\n\n  if (typeof n.object === \"string\") {\n    instructionName = \"\".concat(n.object, \".\").concat(String(n.id));\n  }\n\n  var byteString = _helperWasmBytecode.default.symbolsByName[instructionName];\n\n  if (typeof byteString === \"undefined\") {\n    throw new Error(\"encodeInstr: unknown instruction \" + JSON.stringify(instructionName));\n  }\n\n  var byte = parseInt(byteString, 10);\n  out.push(byte);\n\n  if (n.args) {\n    n.args.forEach(function (arg) {\n      var encoder = encodeU32; // find correct encoder\n\n      if (n.object === \"i32\") {\n        encoder = encodeI32;\n      }\n\n      if (n.object === \"i64\") {\n        encoder = encodeI64;\n      }\n\n      if (n.object === \"f32\") {\n        encoder = ieee754.encodeF32;\n      }\n\n      if (n.object === \"f64\") {\n        encoder = ieee754.encodeF64;\n      }\n\n      if (arg.type === \"NumberLiteral\" || arg.type === \"FloatLiteral\" || arg.type === \"LongNumberLiteral\") {\n        // $FlowIgnore\n        out.push.apply(out, _toConsumableArray(encoder(arg.value)));\n      } else {\n        throw new Error(\"Unsupported instruction argument encoding \" + JSON.stringify(arg.type));\n      }\n    });\n  }\n\n  return out;\n}\n\nfunction encodeExpr(instrs) {\n  var out = [];\n  instrs.forEach(function (instr) {\n    // $FlowIgnore\n    var n = (0, _index.encodeNode)(instr);\n    out.push.apply(out, _toConsumableArray(n));\n  });\n  return out;\n}\n\nfunction encodeStringLiteral(n) {\n  return encodeUTF8Vec(n.value);\n}\n\nfunction encodeGlobal(n) {\n  var out = [];\n  var _n$globalType = n.globalType,\n      valtype = _n$globalType.valtype,\n      mutability = _n$globalType.mutability;\n  out.push(encodeValtype(valtype));\n  out.push(encodeMutability(mutability));\n  out.push.apply(out, _toConsumableArray(encodeExpr(n.init)));\n  return out;\n}\n\nfunction encodeFuncBody(n) {\n  var out = [];\n  out.push(-1); // temporary function body size\n  // FIXME(sven): get the func locals?\n\n  var localBytes = encodeVec([]);\n  out.push.apply(out, _toConsumableArray(localBytes));\n  var funcBodyBytes = encodeExpr(n.body);\n  out[0] = funcBodyBytes.length + localBytes.length;\n  out.push.apply(out, _toConsumableArray(funcBodyBytes));\n  return out;\n}\n\nfunction encodeIndexInFuncSection(n) {\n  assertNotIdentifierNode(n.index); // $FlowIgnore\n\n  return encodeU32(n.index.value);\n}\n\nfunction encodeElem(n) {\n  var out = [];\n  assertNotIdentifierNode(n.table); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.table.value)));\n  out.push.apply(out, _toConsumableArray(encodeExpr(n.offset))); // $FlowIgnore\n\n  var funcs = n.funcs.reduce(function (acc, x) {\n    return _toConsumableArray(acc).concat(_toConsumableArray(encodeU32(x.value)));\n  }, []);\n  out.push.apply(out, _toConsumableArray(encodeVec(funcs)));\n  return out;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeNode = encodeNode;\nexports.encodeU32 = void 0;\n\nvar encoder = _interopRequireWildcard(require(\"./encoder\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction encodeNode(n) {\n  switch (n.type) {\n    case \"ModuleImport\":\n      // $FlowIgnore: ModuleImport ensure that the node is well formated\n      return encoder.encodeModuleImport(n);\n\n    case \"SectionMetadata\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeSectionMetadata(n);\n\n    case \"CallInstruction\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeCallInstruction(n);\n\n    case \"CallIndirectInstruction\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeCallIndirectInstruction(n);\n\n    case \"TypeInstruction\":\n      return encoder.encodeTypeInstruction(n);\n\n    case \"Instr\":\n      // $FlowIgnore\n      return encoder.encodeInstr(n);\n\n    case \"ModuleExport\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeModuleExport(n);\n\n    case \"Global\":\n      // $FlowIgnore\n      return encoder.encodeGlobal(n);\n\n    case \"Func\":\n      return encoder.encodeFuncBody(n);\n\n    case \"IndexInFuncSection\":\n      return encoder.encodeIndexInFuncSection(n);\n\n    case \"StringLiteral\":\n      return encoder.encodeStringLiteral(n);\n\n    case \"Elem\":\n      return encoder.encodeElem(n);\n\n    default:\n      throw new Error(\"Unsupported encoding for node of type: \" + JSON.stringify(n.type));\n  }\n}\n\nvar encodeU32 = encoder.encodeU32;\nexports.encodeU32 = encodeU32;","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport { decode } from \"@webassemblyjs/wasm-parser\";\nimport { shrinkPaddedLEB128 as makeShrinkPaddedLEB128 } from \"./leb128.js\";\n\nvar OptimizerError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(OptimizerError, _Error);\n\n  function OptimizerError(name, initalError) {\n    var _this;\n\n    _classCallCheck(this, OptimizerError);\n\n    _this = _possibleConstructorReturn(this, (OptimizerError.__proto__ || Object.getPrototypeOf(OptimizerError)).call(this, \"Error while optimizing: \" + name + \": \" + initalError.message));\n    _this.stack = initalError.stack;\n    return _this;\n  }\n\n  return OptimizerError;\n}(Error);\n\nvar decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true\n};\nexport function shrinkPaddedLEB128(uint8Buffer) {\n  try {\n    var ast = decode(uint8Buffer.buffer, decoderOpts);\n    return makeShrinkPaddedLEB128(ast, uint8Buffer);\n  } catch (e) {\n    throw new OptimizerError(\"shrinkPaddedLEB128\", e);\n  }\n}","import { traverse, shiftSection } from \"@webassemblyjs/ast\";\nimport { encodeU32 } from \"@webassemblyjs/wasm-gen/lib/encoder\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\n\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section;\n  // Once we hit our section every that is after needs to be shifted by the delta\n  var encounteredSection = false;\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        shiftSection(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\n\nexport function shrinkPaddedLEB128(ast, uint8Buffer) {\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n\n      /**\n       * Section size\n       */\n      {\n        var newu32Encoded = encodeU32(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\nimport * as ieee754 from \"@webassemblyjs/ieee754\";\nimport * as utf8 from \"@webassemblyjs/utf8\";\nimport * as t from \"@webassemblyjs/ast\";\nimport { decodeInt32, decodeUInt32, MAX_NUMBER_OF_BYTE_U32, decodeInt64, decodeUInt64, MAX_NUMBER_OF_BYTE_U64 } from \"@webassemblyjs/leb128\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\n\nfunction toHex(n) {\n  return \"0x\" + Number(n).toString(16);\n}\n\nfunction byteArrayEq(l, r) {\n  if (l.length !== r.length) {\n    return false;\n  }\n\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] !== r[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function decode(ab, opts) {\n  var buf = new Uint8Array(ab);\n  var getUniqueName = t.getUniqueNameGenerator();\n  var offset = 0;\n\n  function getPosition() {\n    return {\n      line: -1,\n      column: offset\n    };\n  }\n\n  function dump(b, msg) {\n    if (opts.dump === false) return;\n    var pad = \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\";\n    var str = \"\";\n\n    if (b.length < 5) {\n      str = b.map(toHex).join(\" \");\n    } else {\n      str = \"...\";\n    }\n\n    console.log(toHex(offset) + \":\\t\", str, pad, \";\", msg);\n  }\n\n  function dumpSep(msg) {\n    if (opts.dump === false) return;\n    console.log(\";\", msg);\n  }\n  /**\n   * TODO(sven): we can atually use a same structure\n   * we are adding incrementally new features\n   */\n\n\n  var state = {\n    elementsInFuncSection: [],\n    elementsInExportSection: [],\n    elementsInCodeSection: [],\n\n    /**\n     * Decode memory from:\n     * - Memory section\n     */\n    memoriesInModule: [],\n\n    /**\n     * Decoded types from:\n     * - Type section\n     */\n    typesInModule: [],\n\n    /**\n     * Decoded functions from:\n     * - Function section\n     * - Import section\n     */\n    functionsInModule: [],\n\n    /**\n     * Decoded tables from:\n     * - Table section\n     */\n    tablesInModule: [],\n\n    /**\n     * Decoded globals from:\n     * - Global section\n     */\n    globalsInModule: []\n  };\n\n  function isEOF() {\n    return offset >= buf.length;\n  }\n\n  function eatBytes(n) {\n    offset = offset + n;\n  }\n\n  function readBytesAtOffset(_offset, numberOfBytes) {\n    var arr = [];\n\n    for (var i = 0; i < numberOfBytes; i++) {\n      arr.push(buf[_offset + i]);\n    }\n\n    return arr;\n  }\n\n  function readBytes(numberOfBytes) {\n    return readBytesAtOffset(offset, numberOfBytes);\n  }\n\n  function readF64() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F64);\n    var value = ieee754.decodeF64(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 16 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F64\n    };\n  }\n\n  function readF32() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F32);\n    var value = ieee754.decodeF32(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 128 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F32\n    };\n  }\n\n  function readUTF8String() {\n    var lenu32 = readU32(); // Don't eat any bytes. Instead, peek ahead of the current offset using\n    // readBytesAtOffset below. This keeps readUTF8String neutral with respect\n    // to the current offset, just like the other readX functions.\n\n    var strlen = lenu32.value;\n    dump([strlen], \"string length\");\n    var bytes = readBytesAtOffset(offset + lenu32.nextIndex, strlen);\n    var value = utf8.decode(bytes);\n    return {\n      value: value,\n      nextIndex: strlen + lenu32.nextIndex\n    };\n  }\n  /**\n   * Decode an unsigned 32bits integer\n   *\n   * The length will be handled by the leb librairy, we pass the max number of\n   * byte.\n   */\n\n\n  function readU32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n\n  function readVaruint32() {\n    // where 32 bits = max 4 bytes\n    var bytes = readBytes(4);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n\n  function readVaruint7() {\n    // where 7 bits = max 1 bytes\n    var bytes = readBytes(1);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n  /**\n   * Decode a signed 32bits interger\n   */\n\n\n  function read32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeInt32(buffer);\n  }\n  /**\n   * Decode a signed 64bits integer\n   */\n\n\n  function read64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeInt64(buffer);\n  }\n\n  function readU64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt64(buffer);\n  }\n\n  function readByte() {\n    return readBytes(1)[0];\n  }\n\n  function parseModuleHeader() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var header = readBytes(4);\n\n    if (byteArrayEq(constants.magicModuleHeader, header) === false) {\n      throw new CompileError(\"magic header not detected\");\n    }\n\n    dump(header, \"wasm magic header\");\n    eatBytes(4);\n  }\n\n  function parseVersion() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var version = readBytes(4);\n\n    if (byteArrayEq(constants.moduleVersion, version) === false) {\n      throw new CompileError(\"unknown binary version\");\n    }\n\n    dump(version, \"wasm version\");\n    eatBytes(4);\n  }\n\n  function parseVec(cast) {\n    var u32 = readU32();\n    var length = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([length], \"number\");\n\n    if (length === 0) {\n      return [];\n    }\n\n    var elements = [];\n\n    for (var i = 0; i < length; i++) {\n      var byte = readByte();\n      eatBytes(1);\n      var value = cast(byte);\n      dump([byte], value);\n\n      if (typeof value === \"undefined\") {\n        throw new CompileError(\"Internal failure: parseVec could not cast the value\");\n      }\n\n      elements.push(value);\n    }\n\n    return elements;\n  } // Type section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-typesec\n\n\n  function parseTypeSection(numberOfTypes) {\n    var typeInstructionNodes = [];\n    dump([numberOfTypes], \"num types\");\n\n    for (var i = 0; i < numberOfTypes; i++) {\n      var _startLoc = getPosition();\n\n      dumpSep(\"type \" + i);\n      var type = readByte();\n      eatBytes(1);\n\n      if (type == constants.types.func) {\n        dump([type], \"func\");\n        var paramValtypes = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        var params = paramValtypes.map(function (v) {\n          return t.funcParam(\n          /*valtype*/\n          v);\n        });\n        var result = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        typeInstructionNodes.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.typeInstruction(undefined, t.signature(params, result)), endLoc, _startLoc);\n        }());\n        state.typesInModule.push({\n          params: params,\n          result: result\n        });\n      } else {\n        throw new Error(\"Unsupported type: \" + toHex(type));\n      }\n    }\n\n    return typeInstructionNodes;\n  } // Import section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-importsec\n\n\n  function parseImportSection(numberOfImports) {\n    var imports = [];\n\n    for (var i = 0; i < numberOfImports; i++) {\n      dumpSep(\"import header \" + i);\n\n      var _startLoc2 = getPosition();\n      /**\n       * Module name\n       */\n\n\n      var moduleName = readUTF8String();\n      eatBytes(moduleName.nextIndex);\n      dump([], \"module name (\".concat(moduleName.value, \")\"));\n      /**\n       * Name\n       */\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"name (\".concat(name.value, \")\"));\n      /**\n       * Import descr\n       */\n\n      var descrTypeByte = readByte();\n      eatBytes(1);\n      var descrType = constants.importTypes[descrTypeByte];\n      dump([descrTypeByte], \"import kind\");\n\n      if (typeof descrType === \"undefined\") {\n        throw new CompileError(\"Unknown import description type: \" + toHex(descrTypeByte));\n      }\n\n      var importDescr = void 0;\n\n      if (descrType === \"func\") {\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var id = getUniqueName(\"func\");\n        importDescr = t.funcImportDescr(id, t.signature(signature.params, signature.result));\n        state.functionsInModule.push({\n          id: t.identifier(name.value),\n          signature: signature,\n          isExternal: true\n        });\n      } else if (descrType === \"global\") {\n        importDescr = parseGlobalType();\n        var globalNode = t.global(importDescr, []);\n        state.globalsInModule.push(globalNode);\n      } else if (descrType === \"table\") {\n        importDescr = parseTableType(i);\n      } else if (descrType === \"mem\") {\n        var memoryNode = parseMemoryType(0);\n        state.memoriesInModule.push(memoryNode);\n        importDescr = memoryNode;\n      } else {\n        throw new CompileError(\"Unsupported import of type: \" + descrType);\n      }\n\n      imports.push(function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.moduleImport(moduleName.value, name.value, importDescr), endLoc, _startLoc2);\n      }());\n    }\n\n    return imports;\n  } // Function section\n  // https://webassembly.github.io/spec/binary/modules.html#function-section\n\n\n  function parseFuncSection(numberOfFunctions) {\n    dump([numberOfFunctions], \"num funcs\");\n\n    for (var i = 0; i < numberOfFunctions; i++) {\n      var indexU32 = readU32();\n      var typeindex = indexU32.value;\n      eatBytes(indexU32.nextIndex);\n      dump([typeindex], \"type index\");\n      var signature = state.typesInModule[typeindex];\n\n      if (typeof signature === \"undefined\") {\n        throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n      } // preserve anonymous, a name might be resolved later\n\n\n      var id = t.withRaw(t.identifier(getUniqueName(\"func\")), \"\");\n      state.functionsInModule.push({\n        id: id,\n        signature: signature,\n        isExternal: false\n      });\n    }\n  } // Export section\n  // https://webassembly.github.io/spec/binary/modules.html#export-section\n\n\n  function parseExportSection(numberOfExport) {\n    dump([numberOfExport], \"num exports\"); // Parse vector of exports\n\n    for (var i = 0; i < numberOfExport; i++) {\n      var _startLoc3 = getPosition();\n      /**\n       * Name\n       */\n\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"export name (\".concat(name.value, \")\"));\n      /**\n       * exportdescr\n       */\n\n      var typeIndex = readByte();\n      eatBytes(1);\n      dump([typeIndex], \"export kind\");\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      dump([index], \"export index\");\n      var id = void 0,\n          signature = void 0;\n\n      if (constants.exportTypes[typeIndex] === \"Func\") {\n        var func = state.functionsInModule[index];\n\n        if (typeof func === \"undefined\") {\n          throw new CompileError(\"unknown function (\".concat(index, \")\"));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = func.signature;\n      } else if (constants.exportTypes[typeIndex] === \"Table\") {\n        var table = state.tablesInModule[index];\n\n        if (typeof table === \"undefined\") {\n          throw new CompileError(\"unknown table \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Mem\") {\n        var memNode = state.memoriesInModule[index];\n\n        if (typeof memNode === \"undefined\") {\n          throw new CompileError(\"unknown memory \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Global\") {\n        var global = state.globalsInModule[index];\n\n        if (typeof global === \"undefined\") {\n          throw new CompileError(\"unknown global \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else {\n        console.warn(\"Unsupported export type: \" + toHex(typeIndex));\n        return;\n      }\n\n      var endLoc = getPosition();\n      state.elementsInExportSection.push({\n        name: name.value,\n        type: constants.exportTypes[typeIndex],\n        signature: signature,\n        id: id,\n        index: index,\n        endLoc: endLoc,\n        startLoc: _startLoc3\n      });\n    }\n  } // Code section\n  // https://webassembly.github.io/spec/binary/modules.html#code-section\n\n\n  function parseCodeSection(numberOfFuncs) {\n    dump([numberOfFuncs], \"number functions\"); // Parse vector of function\n\n    for (var i = 0; i < numberOfFuncs; i++) {\n      var _startLoc4 = getPosition();\n\n      dumpSep(\"function body \" + i); // the u32 size of the function code in bytes\n      // Ignore it for now\n\n      var bodySizeU32 = readU32();\n      eatBytes(bodySizeU32.nextIndex);\n      dump([bodySizeU32.value], \"function body size\");\n      var code = [];\n      /**\n       * Parse locals\n       */\n\n      var funcLocalNumU32 = readU32();\n      var funcLocalNum = funcLocalNumU32.value;\n      eatBytes(funcLocalNumU32.nextIndex);\n      dump([funcLocalNum], \"num locals\");\n      var locals = [];\n\n      for (var _i = 0; _i < funcLocalNum; _i++) {\n        var _startLoc5 = getPosition();\n\n        var localCountU32 = readU32();\n        var localCount = localCountU32.value;\n        eatBytes(localCountU32.nextIndex);\n        dump([localCount], \"num local\");\n        var valtypeByte = readByte();\n        eatBytes(1);\n        var type = constants.valtypes[valtypeByte];\n        var args = [];\n\n        for (var _i2 = 0; _i2 < localCount; _i2++) {\n          args.push(t.valtypeLiteral(type));\n        }\n\n        var localNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(\"local\", args), endLoc, _startLoc5);\n        }();\n\n        locals.push(localNode);\n        dump([valtypeByte], type);\n\n        if (typeof type === \"undefined\") {\n          throw new CompileError(\"Unexpected valtype: \" + toHex(valtypeByte));\n        }\n      }\n\n      code.push.apply(code, locals); // Decode instructions until the end\n\n      parseInstructionBlock(code);\n      var endLoc = getPosition();\n      state.elementsInCodeSection.push({\n        code: code,\n        locals: locals,\n        endLoc: endLoc,\n        startLoc: _startLoc4,\n        bodySize: bodySizeU32.value\n      });\n    }\n  }\n\n  function parseInstructionBlock(code) {\n    while (true) {\n      var _startLoc6 = getPosition();\n\n      var instructionAlreadyCreated = false;\n      var instructionByte = readByte();\n      eatBytes(1);\n\n      if (instructionByte === 0xfe) {\n        instructionByte = 0xfe00 + readByte();\n        eatBytes(1);\n      }\n\n      var instruction = constants.symbolsByByte[instructionByte];\n\n      if (typeof instruction === \"undefined\") {\n        throw new CompileError(\"Unexpected instruction: \" + toHex(instructionByte));\n      }\n\n      if (typeof instruction.object === \"string\") {\n        dump([instructionByte], \"\".concat(instruction.object, \".\").concat(instruction.name));\n      } else {\n        dump([instructionByte], instruction.name);\n      }\n      /**\n       * End of the function\n       */\n\n\n      if (instruction.name === \"end\") {\n        var node = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(instruction.name), endLoc, _startLoc6);\n        }();\n\n        code.push(node);\n        break;\n      }\n\n      var args = [];\n\n      if (instruction.name === \"loop\") {\n        var _startLoc7 = getPosition();\n\n        var blocktypeByte = readByte();\n        eatBytes(1);\n        var blocktype = constants.blockTypes[blocktypeByte];\n        dump([blocktypeByte], \"blocktype\");\n\n        if (typeof blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(blocktypeByte));\n        }\n\n        var instr = [];\n        parseInstructionBlock(instr); // preserve anonymous\n\n        var label = t.withRaw(t.identifier(getUniqueName(\"loop\")), \"\");\n\n        var loopNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.loopInstruction(label, blocktype, instr), endLoc, _startLoc7);\n        }();\n\n        code.push(loopNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"if\") {\n        var _startLoc8 = getPosition();\n\n        var _blocktypeByte = readByte();\n\n        eatBytes(1);\n        var _blocktype = constants.blockTypes[_blocktypeByte];\n        dump([_blocktypeByte], \"blocktype\");\n\n        if (typeof _blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte));\n        }\n\n        var testIndex = t.withRaw(t.identifier(getUniqueName(\"if\")), \"\");\n        var ifBody = [];\n        parseInstructionBlock(ifBody); // Defaults to no alternate\n\n        var elseIndex = 0;\n\n        for (elseIndex = 0; elseIndex < ifBody.length; ++elseIndex) {\n          var _instr = ifBody[elseIndex];\n\n          if (_instr.type === \"Instr\" && _instr.id === \"else\") {\n            break;\n          }\n        }\n\n        var consequentInstr = ifBody.slice(0, elseIndex);\n        var alternate = ifBody.slice(elseIndex + 1); // wast sugar\n\n        var testInstrs = [];\n\n        var ifNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.ifInstruction(testIndex, testInstrs, _blocktype, consequentInstr, alternate), endLoc, _startLoc8);\n        }();\n\n        code.push(ifNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"block\") {\n        var _startLoc9 = getPosition();\n\n        var _blocktypeByte2 = readByte();\n\n        eatBytes(1);\n        var _blocktype2 = constants.blockTypes[_blocktypeByte2];\n        dump([_blocktypeByte2], \"blocktype\");\n\n        if (typeof _blocktype2 === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte2));\n        }\n\n        var _instr2 = [];\n        parseInstructionBlock(_instr2); // preserve anonymous\n\n        var _label = t.withRaw(t.identifier(getUniqueName(\"block\")), \"\");\n\n        var blockNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.blockInstruction(_label, _instr2, _blocktype2), endLoc, _startLoc9);\n        }();\n\n        code.push(blockNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call\") {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n\n        var callNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.callInstruction(t.indexLiteral(index)), endLoc, _startLoc6);\n        }();\n\n        code.push(callNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call_indirect\") {\n        var _startLoc10 = getPosition();\n\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"call_indirect signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var _callNode = t.callIndirectInstruction(t.signature(signature.params, signature.result), []);\n\n        var flagU32 = readU32();\n        var flag = flagU32.value; // 0x00 - reserved byte\n\n        eatBytes(flagU32.nextIndex);\n\n        if (flag !== 0) {\n          throw new CompileError(\"zero flag expected\");\n        }\n\n        code.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(_callNode, endLoc, _startLoc10);\n        }());\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"br_table\") {\n        var indicesu32 = readU32();\n        var indices = indicesu32.value;\n        eatBytes(indicesu32.nextIndex);\n        dump([indices], \"num indices\");\n\n        for (var i = 0; i <= indices; i++) {\n          var _indexu = readU32();\n\n          var _index = _indexu.value;\n          eatBytes(_indexu.nextIndex);\n          dump([_index], \"index\");\n          args.push(t.numberLiteralFromRaw(_indexu.value.toString(), \"u32\"));\n        }\n      } else if (instructionByte >= 0x28 && instructionByte <= 0x40) {\n        /**\n         * Memory instructions\n         */\n        if (instruction.name === \"grow_memory\" || instruction.name === \"current_memory\") {\n          var _indexU = readU32();\n\n          var _index2 = _indexU.value;\n          eatBytes(_indexU.nextIndex);\n\n          if (_index2 !== 0) {\n            throw new Error(\"zero flag expected\");\n          }\n\n          dump([_index2], \"index\");\n        } else {\n          var aligun32 = readU32();\n          var align = aligun32.value;\n          eatBytes(aligun32.nextIndex);\n          dump([align], \"align\");\n          var offsetu32 = readU32();\n          var _offset2 = offsetu32.value;\n          eatBytes(offsetu32.nextIndex);\n          dump([_offset2], \"offset\");\n        }\n      } else if (instructionByte >= 0x41 && instructionByte <= 0x44) {\n        /**\n         * Numeric instructions\n         */\n        if (instruction.object === \"i32\") {\n          var value32 = read32();\n          var value = value32.value;\n          eatBytes(value32.nextIndex);\n          dump([value], \"i32 value\");\n          args.push(t.numberLiteralFromRaw(value));\n        }\n\n        if (instruction.object === \"u32\") {\n          var valueu32 = readU32();\n          var _value = valueu32.value;\n          eatBytes(valueu32.nextIndex);\n          dump([_value], \"u32 value\");\n          args.push(t.numberLiteralFromRaw(_value));\n        }\n\n        if (instruction.object === \"i64\") {\n          var value64 = read64();\n          var _value2 = value64.value;\n          eatBytes(value64.nextIndex);\n          dump([Number(_value2.toString())], \"i64 value\");\n          var high = _value2.high,\n              low = _value2.low;\n          var _node = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: high,\n              low: low\n            }\n          };\n          args.push(_node);\n        }\n\n        if (instruction.object === \"u64\") {\n          var valueu64 = readU64();\n          var _value3 = valueu64.value;\n          eatBytes(valueu64.nextIndex);\n          dump([Number(_value3.toString())], \"u64 value\");\n          var _high = _value3.high,\n              _low = _value3.low;\n          var _node2 = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: _high,\n              low: _low\n            }\n          };\n          args.push(_node2);\n        }\n\n        if (instruction.object === \"f32\") {\n          var valuef32 = readF32();\n          var _value4 = valuef32.value;\n          eatBytes(valuef32.nextIndex);\n          dump([_value4], \"f32 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value4, valuef32.nan, valuef32.inf, String(_value4)));\n        }\n\n        if (instruction.object === \"f64\") {\n          var valuef64 = readF64();\n          var _value5 = valuef64.value;\n          eatBytes(valuef64.nextIndex);\n          dump([_value5], \"f64 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value5, valuef64.nan, valuef64.inf, String(_value5)));\n        }\n      } else if (instructionByte >= 0xfe00 && instructionByte <= 0xfeff) {\n        /**\n         * Atomic memory instructions\n         */\n        var align32 = readU32();\n        var _align = align32.value;\n        eatBytes(align32.nextIndex);\n        dump([_align], \"align\");\n\n        var _offsetu = readU32();\n\n        var _offset3 = _offsetu.value;\n        eatBytes(_offsetu.nextIndex);\n        dump([_offset3], \"offset\");\n      } else {\n        for (var _i3 = 0; _i3 < instruction.numberOfArgs; _i3++) {\n          var u32 = readU32();\n          eatBytes(u32.nextIndex);\n          dump([u32.value], \"argument \" + _i3);\n          args.push(t.numberLiteralFromRaw(u32.value));\n        }\n      }\n\n      if (instructionAlreadyCreated === false) {\n        if (typeof instruction.object === \"string\") {\n          var _node3 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.objectInstruction(instruction.name, instruction.object, args), endLoc, _startLoc6);\n          }();\n\n          code.push(_node3);\n        } else {\n          var _node4 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.instruction(instruction.name, args), endLoc, _startLoc6);\n          }();\n\n          code.push(_node4);\n        }\n      }\n    }\n  } // https://webassembly.github.io/spec/core/binary/types.html#limits\n\n\n  function parseLimits() {\n    var limitType = readByte();\n    eatBytes(1);\n    var shared = limitType === 0x03;\n    dump([limitType], \"limit type\" + (shared ? \" (shared)\" : \"\"));\n    var min, max;\n\n    if (limitType === 0x01 || limitType === 0x03 // shared limits\n    ) {\n        var u32min = readU32();\n        min = parseInt(u32min.value);\n        eatBytes(u32min.nextIndex);\n        dump([min], \"min\");\n        var u32max = readU32();\n        max = parseInt(u32max.value);\n        eatBytes(u32max.nextIndex);\n        dump([max], \"max\");\n      }\n\n    if (limitType === 0x00) {\n      var _u32min = readU32();\n\n      min = parseInt(_u32min.value);\n      eatBytes(_u32min.nextIndex);\n      dump([min], \"min\");\n    }\n\n    return t.limit(min, max, shared);\n  } // https://webassembly.github.io/spec/core/binary/types.html#binary-tabletype\n\n\n  function parseTableType(index) {\n    var name = t.withRaw(t.identifier(getUniqueName(\"table\")), String(index));\n    var elementTypeByte = readByte();\n    eatBytes(1);\n    dump([elementTypeByte], \"element type\");\n    var elementType = constants.tableTypes[elementTypeByte];\n\n    if (typeof elementType === \"undefined\") {\n      throw new CompileError(\"Unknown element type in table: \" + toHex(elementType));\n    }\n\n    var limits = parseLimits();\n    return t.table(elementType, limits, name);\n  } // https://webassembly.github.io/spec/binary/types.html#global-types\n\n\n  function parseGlobalType() {\n    var valtypeByte = readByte();\n    eatBytes(1);\n    var type = constants.valtypes[valtypeByte];\n    dump([valtypeByte], type);\n\n    if (typeof type === \"undefined\") {\n      throw new CompileError(\"Unknown valtype: \" + toHex(valtypeByte));\n    }\n\n    var globalTypeByte = readByte();\n    eatBytes(1);\n    var globalType = constants.globalTypes[globalTypeByte];\n    dump([globalTypeByte], \"global type (\".concat(globalType, \")\"));\n\n    if (typeof globalType === \"undefined\") {\n      throw new CompileError(\"Invalid mutability: \" + toHex(globalTypeByte));\n    }\n\n    return t.globalType(type, globalType);\n  } // function parseNameModule() {\n  //   const lenu32 = readVaruint32();\n  //   eatBytes(lenu32.nextIndex);\n  //   console.log(\"len\", lenu32);\n  //   const strlen = lenu32.value;\n  //   dump([strlen], \"string length\");\n  //   const bytes = readBytes(strlen);\n  //   eatBytes(strlen);\n  //   const value = utf8.decode(bytes);\n  //   return [t.moduleNameMetadata(value)];\n  // }\n  // this section contains an array of function names and indices\n\n\n  function parseNameSectionFunctions() {\n    var functionNames = [];\n    var numberOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numberOfFunctionsu32.value;\n    eatBytes(numberOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      functionNames.push(t.functionNameMetadata(name.value, index));\n    }\n\n    return functionNames;\n  }\n\n  function parseNameSectionLocals() {\n    var localNames = [];\n    var numbeOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numbeOfFunctionsu32.value;\n    eatBytes(numbeOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var functionIndexu32 = readU32();\n      var functionIndex = functionIndexu32.value;\n      eatBytes(functionIndexu32.nextIndex);\n      var numLocalsu32 = readU32();\n      var numLocals = numLocalsu32.value;\n      eatBytes(numLocalsu32.nextIndex);\n\n      for (var _i4 = 0; _i4 < numLocals; _i4++) {\n        var localIndexu32 = readU32();\n        var localIndex = localIndexu32.value;\n        eatBytes(localIndexu32.nextIndex);\n        var name = readUTF8String();\n        eatBytes(name.nextIndex);\n        localNames.push(t.localNameMetadata(name.value, localIndex, functionIndex));\n      }\n    }\n\n    return localNames;\n  } // this is a custom section used for name resolution\n  // https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n\n\n  function parseNameSection(remainingBytes) {\n    var nameMetadata = [];\n    var initialOffset = offset;\n\n    while (offset - initialOffset < remainingBytes) {\n      // name_type\n      var sectionTypeByte = readVaruint7();\n      eatBytes(sectionTypeByte.nextIndex); // name_payload_len\n\n      var subSectionSizeInBytesu32 = readVaruint32();\n      eatBytes(subSectionSizeInBytesu32.nextIndex);\n\n      switch (sectionTypeByte.value) {\n        // case 0: {\n        // TODO(sven): re-enable that\n        // Current status: it seems that when we decode the module's name\n        // no name_payload_len is used.\n        //\n        // See https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n        //\n        // nameMetadata.push(...parseNameModule());\n        // break;\n        // }\n        case 1:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionFunctions()));\n            break;\n          }\n\n        case 2:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionLocals()));\n            break;\n          }\n\n        default:\n          {\n            // skip unknown subsection\n            eatBytes(subSectionSizeInBytesu32.value);\n          }\n      }\n    }\n\n    return nameMetadata;\n  } // this is a custom section used for information about the producers\n  // https://github.com/WebAssembly/tool-conventions/blob/master/ProducersSection.md\n\n\n  function parseProducersSection() {\n    var metadata = t.producersSectionMetadata([]); // field_count\n\n    var sectionTypeByte = readVaruint32();\n    eatBytes(sectionTypeByte.nextIndex);\n    dump([sectionTypeByte.value], \"num of producers\");\n    var fields = {\n      language: [],\n      \"processed-by\": [],\n      sdk: []\n    }; // fields\n\n    for (var fieldI = 0; fieldI < sectionTypeByte.value; fieldI++) {\n      // field_name\n      var fieldName = readUTF8String();\n      eatBytes(fieldName.nextIndex); // field_value_count\n\n      var valueCount = readVaruint32();\n      eatBytes(valueCount.nextIndex); // field_values\n\n      for (var producerI = 0; producerI < valueCount.value; producerI++) {\n        var producerName = readUTF8String();\n        eatBytes(producerName.nextIndex);\n        var producerVersion = readUTF8String();\n        eatBytes(producerVersion.nextIndex);\n        fields[fieldName.value].push(t.producerMetadataVersionedName(producerName.value, producerVersion.value));\n      }\n\n      metadata.producers.push(fields[fieldName.value]);\n    }\n\n    return metadata;\n  }\n\n  function parseGlobalSection(numberOfGlobals) {\n    var globals = [];\n    dump([numberOfGlobals], \"num globals\");\n\n    for (var i = 0; i < numberOfGlobals; i++) {\n      var _startLoc11 = getPosition();\n\n      var globalType = parseGlobalType();\n      /**\n       * Global expressions\n       */\n\n      var init = [];\n      parseInstructionBlock(init);\n\n      var node = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.global(globalType, init), endLoc, _startLoc11);\n      }();\n\n      globals.push(node);\n      state.globalsInModule.push(node);\n    }\n\n    return globals;\n  }\n\n  function parseElemSection(numberOfElements) {\n    var elems = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var _startLoc12 = getPosition();\n\n      var tableindexu32 = readU32();\n      var tableindex = tableindexu32.value;\n      eatBytes(tableindexu32.nextIndex);\n      dump([tableindex], \"table index\");\n      /**\n       * Parse instructions\n       */\n\n      var instr = [];\n      parseInstructionBlock(instr);\n      /**\n       * Parse ( vector function index ) *\n       */\n\n      var indicesu32 = readU32();\n      var indices = indicesu32.value;\n      eatBytes(indicesu32.nextIndex);\n      dump([indices], \"num indices\");\n      var indexValues = [];\n\n      for (var _i5 = 0; _i5 < indices; _i5++) {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n        indexValues.push(t.indexLiteral(index));\n      }\n\n      var elemNode = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.elem(t.indexLiteral(tableindex), instr, indexValues), endLoc, _startLoc12);\n      }();\n\n      elems.push(elemNode);\n    }\n\n    return elems;\n  } // https://webassembly.github.io/spec/core/binary/types.html#memory-types\n\n\n  function parseMemoryType(i) {\n    var limits = parseLimits();\n    return t.memory(limits, t.indexLiteral(i));\n  } // https://webassembly.github.io/spec/binary/modules.html#table-section\n\n\n  function parseTableSection(numberOfElements) {\n    var tables = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var tablesNode = parseTableType(i);\n      state.tablesInModule.push(tablesNode);\n      tables.push(tablesNode);\n    }\n\n    return tables;\n  } // https://webassembly.github.io/spec/binary/modules.html#memory-section\n\n\n  function parseMemorySection(numberOfElements) {\n    var memories = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryNode = parseMemoryType(i);\n      state.memoriesInModule.push(memoryNode);\n      memories.push(memoryNode);\n    }\n\n    return memories;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-startsec\n\n\n  function parseStartSection() {\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var startFuncIndex = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([startFuncIndex], \"index\");\n    return function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.start(t.indexLiteral(startFuncIndex)), endLoc, startLoc);\n    }();\n  } // https://webassembly.github.io/spec/binary/modules.html#data-section\n\n\n  function parseDataSection(numberOfElements) {\n    var dataEntries = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryIndexu32 = readU32();\n      var memoryIndex = memoryIndexu32.value;\n      eatBytes(memoryIndexu32.nextIndex);\n      dump([memoryIndex], \"memory index\");\n      var instrs = [];\n      parseInstructionBlock(instrs);\n      var hasExtraInstrs = instrs.filter(function (i) {\n        return i.id !== \"end\";\n      }).length !== 1;\n\n      if (hasExtraInstrs) {\n        throw new CompileError(\"data section offset must be a single instruction\");\n      }\n\n      var bytes = parseVec(function (b) {\n        return b;\n      });\n      dump([], \"init\");\n      dataEntries.push(t.data(t.memIndexLiteral(memoryIndex), instrs[0], t.byteArray(bytes)));\n    }\n\n    return dataEntries;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-section\n\n\n  function parseSection(sectionIndex) {\n    var sectionId = readByte();\n    eatBytes(1);\n\n    if (sectionId >= sectionIndex || sectionIndex === constants.sections.custom) {\n      sectionIndex = sectionId + 1;\n    } else {\n      if (sectionId !== constants.sections.custom) throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n    }\n\n    var nextSectionIndex = sectionIndex;\n    var startOffset = offset;\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var sectionSizeInBytes = u32.value;\n    eatBytes(u32.nextIndex);\n\n    var sectionSizeInBytesNode = function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.numberLiteralFromRaw(sectionSizeInBytes), endLoc, startLoc);\n    }();\n\n    switch (sectionId) {\n      case constants.sections.type:\n        {\n          dumpSep(\"section Type\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc13 = getPosition();\n\n          var _u = readU32();\n\n          var numberOfTypes = _u.value;\n          eatBytes(_u.nextIndex);\n\n          var _metadata = t.sectionMetadata(\"type\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTypes), endLoc, _startLoc13);\n          }());\n\n          var _nodes = parseTypeSection(numberOfTypes);\n\n          return {\n            nodes: _nodes,\n            metadata: _metadata,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.table:\n        {\n          dumpSep(\"section Table\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc14 = getPosition();\n\n          var _u2 = readU32();\n\n          var numberOfTable = _u2.value;\n          eatBytes(_u2.nextIndex);\n          dump([numberOfTable], \"num tables\");\n\n          var _metadata2 = t.sectionMetadata(\"table\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTable), endLoc, _startLoc14);\n          }());\n\n          var _nodes2 = parseTableSection(numberOfTable);\n\n          return {\n            nodes: _nodes2,\n            metadata: _metadata2,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.import:\n        {\n          dumpSep(\"section Import\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc15 = getPosition();\n\n          var numberOfImportsu32 = readU32();\n          var numberOfImports = numberOfImportsu32.value;\n          eatBytes(numberOfImportsu32.nextIndex);\n          dump([numberOfImports], \"number of imports\");\n\n          var _metadata3 = t.sectionMetadata(\"import\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfImports), endLoc, _startLoc15);\n          }());\n\n          var _nodes3 = parseImportSection(numberOfImports);\n\n          return {\n            nodes: _nodes3,\n            metadata: _metadata3,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.func:\n        {\n          dumpSep(\"section Function\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc16 = getPosition();\n\n          var numberOfFunctionsu32 = readU32();\n          var numberOfFunctions = numberOfFunctionsu32.value;\n          eatBytes(numberOfFunctionsu32.nextIndex);\n\n          var _metadata4 = t.sectionMetadata(\"func\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFunctions), endLoc, _startLoc16);\n          }());\n\n          parseFuncSection(numberOfFunctions);\n          var _nodes4 = [];\n          return {\n            nodes: _nodes4,\n            metadata: _metadata4,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.export:\n        {\n          dumpSep(\"section Export\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc17 = getPosition();\n\n          var _u3 = readU32();\n\n          var numberOfExport = _u3.value;\n          eatBytes(_u3.nextIndex);\n\n          var _metadata5 = t.sectionMetadata(\"export\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfExport), endLoc, _startLoc17);\n          }());\n\n          parseExportSection(numberOfExport);\n          var _nodes5 = [];\n          return {\n            nodes: _nodes5,\n            metadata: _metadata5,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.code:\n        {\n          dumpSep(\"section Code\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc18 = getPosition();\n\n          var _u4 = readU32();\n\n          var numberOfFuncs = _u4.value;\n          eatBytes(_u4.nextIndex);\n\n          var _metadata6 = t.sectionMetadata(\"code\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFuncs), endLoc, _startLoc18);\n          }());\n\n          if (opts.ignoreCodeSection === true) {\n            var remainingBytes = sectionSizeInBytes - _u4.nextIndex;\n            eatBytes(remainingBytes); // eat the entire section\n          } else {\n            parseCodeSection(numberOfFuncs);\n          }\n\n          var _nodes6 = [];\n          return {\n            nodes: _nodes6,\n            metadata: _metadata6,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.start:\n        {\n          dumpSep(\"section Start\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata7 = t.sectionMetadata(\"start\", startOffset, sectionSizeInBytesNode);\n\n          var _nodes7 = [parseStartSection()];\n          return {\n            nodes: _nodes7,\n            metadata: _metadata7,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.element:\n        {\n          dumpSep(\"section Element\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc19 = getPosition();\n\n          var numberOfElementsu32 = readU32();\n          var numberOfElements = numberOfElementsu32.value;\n          eatBytes(numberOfElementsu32.nextIndex);\n\n          var _metadata8 = t.sectionMetadata(\"element\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfElements), endLoc, _startLoc19);\n          }());\n\n          var _nodes8 = parseElemSection(numberOfElements);\n\n          return {\n            nodes: _nodes8,\n            metadata: _metadata8,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.global:\n        {\n          dumpSep(\"section Global\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc20 = getPosition();\n\n          var numberOfGlobalsu32 = readU32();\n          var numberOfGlobals = numberOfGlobalsu32.value;\n          eatBytes(numberOfGlobalsu32.nextIndex);\n\n          var _metadata9 = t.sectionMetadata(\"global\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfGlobals), endLoc, _startLoc20);\n          }());\n\n          var _nodes9 = parseGlobalSection(numberOfGlobals);\n\n          return {\n            nodes: _nodes9,\n            metadata: _metadata9,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.memory:\n        {\n          dumpSep(\"section Memory\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc21 = getPosition();\n\n          var _numberOfElementsu = readU32();\n\n          var _numberOfElements = _numberOfElementsu.value;\n          eatBytes(_numberOfElementsu.nextIndex);\n\n          var _metadata10 = t.sectionMetadata(\"memory\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements), endLoc, _startLoc21);\n          }());\n\n          var _nodes10 = parseMemorySection(_numberOfElements);\n\n          return {\n            nodes: _nodes10,\n            metadata: _metadata10,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.data:\n        {\n          dumpSep(\"section Data\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata11 = t.sectionMetadata(\"data\", startOffset, sectionSizeInBytesNode);\n\n          var _startLoc22 = getPosition();\n\n          var _numberOfElementsu2 = readU32();\n\n          var _numberOfElements2 = _numberOfElementsu2.value;\n          eatBytes(_numberOfElementsu2.nextIndex);\n\n          _metadata11.vectorOfSize = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements2), endLoc, _startLoc22);\n          }();\n\n          if (opts.ignoreDataSection === true) {\n            var _remainingBytes = sectionSizeInBytes - _numberOfElementsu2.nextIndex;\n\n            eatBytes(_remainingBytes); // eat the entire section\n\n            dumpSep(\"ignore data (\" + sectionSizeInBytes + \" bytes)\");\n            return {\n              nodes: [],\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          } else {\n            var _nodes11 = parseDataSection(_numberOfElements2);\n\n            return {\n              nodes: _nodes11,\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          }\n        }\n\n      case constants.sections.custom:\n        {\n          dumpSep(\"section Custom\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata12 = [t.sectionMetadata(\"custom\", startOffset, sectionSizeInBytesNode)];\n          var sectionName = readUTF8String();\n          eatBytes(sectionName.nextIndex);\n          dump([], \"section name (\".concat(sectionName.value, \")\"));\n\n          var _remainingBytes2 = sectionSizeInBytes - sectionName.nextIndex;\n\n          if (sectionName.value === \"name\") {\n            var initialOffset = offset;\n\n            try {\n              _metadata12.push.apply(_metadata12, _toConsumableArray(parseNameSection(_remainingBytes2)));\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"name\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (initialOffset + _remainingBytes2));\n            }\n          } else if (sectionName.value === \"producers\") {\n            var _initialOffset = offset;\n\n            try {\n              _metadata12.push(parseProducersSection());\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"producers\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (_initialOffset + _remainingBytes2));\n            }\n          } else {\n            // We don't parse the custom section\n            eatBytes(_remainingBytes2);\n            dumpSep(\"ignore custom \" + JSON.stringify(sectionName.value) + \" section (\" + _remainingBytes2 + \" bytes)\");\n          }\n\n          return {\n            nodes: [],\n            metadata: _metadata12,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n    }\n\n    throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n  }\n\n  parseModuleHeader();\n  parseVersion();\n  var moduleFields = [];\n  var sectionIndex = 0;\n  var moduleMetadata = {\n    sections: [],\n    functionNames: [],\n    localNames: [],\n    producers: []\n  };\n  /**\n   * All the generate declaration are going to be stored in our state\n   */\n\n  while (offset < buf.length) {\n    var _parseSection = parseSection(sectionIndex),\n        _nodes12 = _parseSection.nodes,\n        _metadata13 = _parseSection.metadata,\n        nextSectionIndex = _parseSection.nextSectionIndex;\n\n    moduleFields.push.apply(moduleFields, _toConsumableArray(_nodes12));\n    var metadataArray = Array.isArray(_metadata13) ? _metadata13 : [_metadata13];\n    metadataArray.forEach(function (metadataItem) {\n      if (metadataItem.type === \"FunctionNameMetadata\") {\n        moduleMetadata.functionNames.push(metadataItem);\n      } else if (metadataItem.type === \"LocalNameMetadata\") {\n        moduleMetadata.localNames.push(metadataItem);\n      } else if (metadataItem.type === \"ProducersSectionMetadata\") {\n        moduleMetadata.producers.push(metadataItem);\n      } else {\n        moduleMetadata.sections.push(metadataItem);\n      }\n    }); // Ignore custom section\n\n    if (nextSectionIndex) {\n      sectionIndex = nextSectionIndex;\n    }\n  }\n  /**\n   * Transform the state into AST nodes\n   */\n\n\n  var funcIndex = 0;\n  state.functionsInModule.forEach(function (func) {\n    var params = func.signature.params;\n    var result = func.signature.result;\n    var body = []; // External functions doesn't provide any code, can skip it here\n\n    if (func.isExternal === true) {\n      return;\n    }\n\n    var decodedElementInCodeSection = state.elementsInCodeSection[funcIndex];\n\n    if (opts.ignoreCodeSection === false) {\n      if (typeof decodedElementInCodeSection === \"undefined\") {\n        throw new CompileError(\"func \" + toHex(funcIndex) + \" code not found\");\n      }\n\n      body = decodedElementInCodeSection.code;\n    }\n\n    funcIndex++;\n    var funcNode = t.func(func.id, t.signature(params, result), body);\n\n    if (func.isExternal === true) {\n      funcNode.isExternal = func.isExternal;\n    } // Add function position in the binary if possible\n\n\n    if (opts.ignoreCodeSection === false) {\n      var _startLoc23 = decodedElementInCodeSection.startLoc,\n          endLoc = decodedElementInCodeSection.endLoc,\n          bodySize = decodedElementInCodeSection.bodySize;\n      funcNode = t.withLoc(funcNode, endLoc, _startLoc23);\n      funcNode.metadata = {\n        bodySize: bodySize\n      };\n    }\n\n    moduleFields.push(funcNode);\n  });\n  state.elementsInExportSection.forEach(function (moduleExport) {\n    /**\n     * If the export has no id, we won't be able to call it from the outside\n     * so we can omit it\n     */\n    if (moduleExport.id != null) {\n      moduleFields.push(t.withLoc(t.moduleExport(moduleExport.name, t.moduleExportDescr(moduleExport.type, moduleExport.id)), moduleExport.endLoc, moduleExport.startLoc));\n    }\n  });\n  dumpSep(\"end of program\");\n  var module = t.module(null, moduleFields, t.moduleMetadata(moduleMetadata.sections, moduleMetadata.functionNames, moduleMetadata.localNames, moduleMetadata.producers));\n  return t.program([module]);\n}","import * as decoder from \"./decoder\";\nimport * as t from \"@webassemblyjs/ast\";\n/**\n * TODO(sven): I added initial props, but we should rather fix\n * https://github.com/xtuc/webassemblyjs/issues/405\n */\n\nvar defaultDecoderOpts = {\n  dump: false,\n  ignoreCodeSection: false,\n  ignoreDataSection: false,\n  ignoreCustomNameSection: false\n}; // traverses the AST, locating function name metadata, which is then\n// used to update index-based identifiers with function names\n\nfunction restoreFunctionNames(ast) {\n  var functionNames = [];\n  t.traverse(ast, {\n    FunctionNameMetadata: function FunctionNameMetadata(_ref) {\n      var node = _ref.node;\n      functionNames.push({\n        name: node.value,\n        index: node.index\n      });\n    }\n  });\n\n  if (functionNames.length === 0) {\n    return;\n  }\n\n  t.traverse(ast, {\n    Func: function (_Func) {\n      function Func(_x) {\n        return _Func.apply(this, arguments);\n      }\n\n      Func.toString = function () {\n        return _Func.toString();\n      };\n\n      return Func;\n    }(function (_ref2) {\n      var node = _ref2.node;\n      // $FlowIgnore\n      var nodeName = node.name;\n      var indexBasedFunctionName = nodeName.value;\n      var index = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n      var functionName = functionNames.find(function (f) {\n        return f.index === index;\n      });\n\n      if (functionName) {\n        var oldValue = nodeName.value;\n        nodeName.value = functionName.name;\n        nodeName.numeric = oldValue; // $FlowIgnore\n\n        delete nodeName.raw;\n      }\n    }),\n    // Also update the reference in the export\n    ModuleExport: function (_ModuleExport) {\n      function ModuleExport(_x2) {\n        return _ModuleExport.apply(this, arguments);\n      }\n\n      ModuleExport.toString = function () {\n        return _ModuleExport.toString();\n      };\n\n      return ModuleExport;\n    }(function (_ref3) {\n      var node = _ref3.node;\n\n      if (node.descr.exportType === \"Func\") {\n        // $FlowIgnore\n        var nodeName = node.descr.id;\n        var index = nodeName.value;\n        var functionName = functionNames.find(function (f) {\n          return f.index === index;\n        });\n\n        if (functionName) {\n          node.descr.id = t.identifier(functionName.name);\n        }\n      }\n    }),\n    ModuleImport: function (_ModuleImport) {\n      function ModuleImport(_x3) {\n        return _ModuleImport.apply(this, arguments);\n      }\n\n      ModuleImport.toString = function () {\n        return _ModuleImport.toString();\n      };\n\n      return ModuleImport;\n    }(function (_ref4) {\n      var node = _ref4.node;\n\n      if (node.descr.type === \"FuncImportDescr\") {\n        // $FlowIgnore\n        var indexBasedFunctionName = node.descr.id;\n        var index = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n        var functionName = functionNames.find(function (f) {\n          return f.index === index;\n        });\n\n        if (functionName) {\n          // $FlowIgnore\n          node.descr.id = t.identifier(functionName.name);\n        }\n      }\n    }),\n    CallInstruction: function (_CallInstruction) {\n      function CallInstruction(_x4) {\n        return _CallInstruction.apply(this, arguments);\n      }\n\n      CallInstruction.toString = function () {\n        return _CallInstruction.toString();\n      };\n\n      return CallInstruction;\n    }(function (nodePath) {\n      var node = nodePath.node;\n      var index = node.index.value;\n      var functionName = functionNames.find(function (f) {\n        return f.index === index;\n      });\n\n      if (functionName) {\n        var oldValue = node.index;\n        node.index = t.identifier(functionName.name);\n        node.numeric = oldValue; // $FlowIgnore\n\n        delete node.raw;\n      }\n    })\n  });\n}\n\nfunction restoreLocalNames(ast) {\n  var localNames = [];\n  t.traverse(ast, {\n    LocalNameMetadata: function LocalNameMetadata(_ref5) {\n      var node = _ref5.node;\n      localNames.push({\n        name: node.value,\n        localIndex: node.localIndex,\n        functionIndex: node.functionIndex\n      });\n    }\n  });\n\n  if (localNames.length === 0) {\n    return;\n  }\n\n  t.traverse(ast, {\n    Func: function (_Func2) {\n      function Func(_x5) {\n        return _Func2.apply(this, arguments);\n      }\n\n      Func.toString = function () {\n        return _Func2.toString();\n      };\n\n      return Func;\n    }(function (_ref6) {\n      var node = _ref6.node;\n      var signature = node.signature;\n\n      if (signature.type !== \"Signature\") {\n        return;\n      } // $FlowIgnore\n\n\n      var nodeName = node.name;\n      var indexBasedFunctionName = nodeName.value;\n      var functionIndex = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n      signature.params.forEach(function (param, paramIndex) {\n        var paramName = localNames.find(function (f) {\n          return f.localIndex === paramIndex && f.functionIndex === functionIndex;\n        });\n\n        if (paramName && paramName.name !== \"\") {\n          param.id = paramName.name;\n        }\n      });\n    })\n  });\n}\n\nfunction restoreModuleName(ast) {\n  t.traverse(ast, {\n    ModuleNameMetadata: function (_ModuleNameMetadata) {\n      function ModuleNameMetadata(_x6) {\n        return _ModuleNameMetadata.apply(this, arguments);\n      }\n\n      ModuleNameMetadata.toString = function () {\n        return _ModuleNameMetadata.toString();\n      };\n\n      return ModuleNameMetadata;\n    }(function (moduleNameMetadataPath) {\n      // update module\n      t.traverse(ast, {\n        Module: function (_Module) {\n          function Module(_x7) {\n            return _Module.apply(this, arguments);\n          }\n\n          Module.toString = function () {\n            return _Module.toString();\n          };\n\n          return Module;\n        }(function (_ref7) {\n          var node = _ref7.node;\n          var name = moduleNameMetadataPath.node.value; // compatiblity with wast-parser\n\n          if (name === \"\") {\n            name = null;\n          }\n\n          node.id = name;\n        })\n      });\n    })\n  });\n}\n\nexport function decode(buf, customOpts) {\n  var opts = Object.assign({}, defaultDecoderOpts, customOpts);\n  var ast = decoder.decode(buf, opts);\n\n  if (opts.ignoreCustomNameSection === false) {\n    restoreFunctionNames(ast);\n    restoreLocalNames(ast);\n    restoreModuleName(ast);\n  }\n\n  return ast;\n}"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;ACnxtzxQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;;;ACzlrYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;;;;;;;AC1GA;AACA;;;A;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;;;;;ACnhhzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;;;;;ACjjlpWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;;;;ACxusourceRoot":""}